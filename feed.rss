<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>https://namecoin.org//</link>
    <atom:link href="https://namecoin.org//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 08 Jul 2018 05:54:07 +0000</pubDate>
    <lastBuildDate>Sun, 08 Jul 2018 05:54:07 +0000</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>The Great Namecoin Mining Brownout of June 17-20, 2018: Postmortem</title>
        <description>&lt;p&gt;Recently, many Namecoin mining pools experienced an outage, causing transaction confirmation to slow down to 2.1 blocks/hour.  We’ve fixed the issue, and mining is back to normal.  This post summarizes what we know about the outage.&lt;/p&gt;

&lt;h2 id=&quot;the-cause&quot;&gt;The Cause&lt;/h2&gt;

&lt;p&gt;On June 17, an unknown person appears to have built a pair of &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; transactions with the raw transaction API, and broadcast them both to the Namecoin P2P network at the same time.  This is not something that the normal Namecoin Core GUI or RPC API will let you do, because revealing your &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; transaction before the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; has been confirmed allows 3rd parties to front-run your registration.  However, there’s nothing that prevents users from doing this via the raw transaction API.  Namecoin Core’s consensus rules require &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; transactions to wait 12 blocks after &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; before they can be mined; any &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; transactions whose &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; input doesn’t yet have 12 confirmations will be admitted to the memory pool but will not be mined.  Unfortunately, there was a bug in Namecoin Core’s mining code: while it was correctly choosing not to mine &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; transactions whose &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; input had between 1 and 11 (inclusive) confirmations, it was erroneously trying to mine &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; transactions whose &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; input had zero confirmations.  As a result, &lt;code class=&quot;highlighter-rouge&quot;&gt;getblocktemplate&lt;/code&gt; was building an invalid block, and then returning an error upon detecting that the block was invalid, which DoSed the mining pools.&lt;/p&gt;

&lt;h2 id=&quot;our-initial-response&quot;&gt;Our Initial Response&lt;/h2&gt;

&lt;p&gt;Cassini reported on June 18 that, during the prior 24 hours, only ViaBTC and BTC.COM had mined any Namecoin blocks.  He wasn’t sure what the cause of the outage was, but he did note that it didn’t seem to be related to BTC versus BCH mining, since ViaBTC was still using both parent chains for Namecoin mining as usual.  The obvious thing to do was to contact the mining pools to figure out whether they were seeing any errors on their end.  Jeremy began contacting the mining pools.  While we were waiting for mining pools to respond, we tried to analyze possible failure modes.  Cassini speculated that maybe an accidental consensus fork had occurred, and wondered whether the two pools who were still online had changed anything about their setup recently (e.g. updating their Bitcoin Core or Namecoin Core client).  Jeremy noted that clearly the pools who were still online hadn’t accidentally activated a hardfork, since Jeremy’s Namecoin Core node from 2 years ago was still accepting their blocks.  To verify whether an accidental softfork had been activated, Jeremy asked Redblade7 (who runs a Namecoin seed node) to check the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;namecoin-cli getchaintips&lt;/code&gt;.  The output revealed that no forks had been observed since June 3 (and that fork was only a single orphaned block), which made it clear that no softfork had occurred.  (In addition, the two pools who were still up composed a minority of the usual hashrate, which again pointed to this not being an accidental softfork.)&lt;/p&gt;

&lt;h2 id=&quot;response-from-miners&quot;&gt;Response from Miners&lt;/h2&gt;

&lt;p&gt;Wang Chun from F2Pool was the first mining pool operator to get back to us; he said F2Pool was investigating the issue from their side.  Shortly afterward, F2Pool’s mining came back online and mined 6 blocks.  Shortly afterward, crackfoo of zpool posted on GitHub saying that he was repeatedly getting &lt;code class=&quot;highlighter-rouge&quot;&gt;getblocktemplate&lt;/code&gt; errors that day.  crackfoo posted this in a GitHub issue that was fairly old: mining pools had occasionally been receiving that error for well over a year, but it had been difficult to reproduce.  However, the last post in that thread prior to crackfoo’s was from Yihao Peng of BTC.COM on June 17, saying that he had gotten the error that day and had fixed it by clearing his memory pool.  Yihao Peng’s post was the first one that provided debug logs, which allowed us to analyze what was happening.  Daniel quickly figured out that the issue was caused by the unconfirmed &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; pair, and Jeremy speculated that this was probably the reason for the outage.&lt;/p&gt;

&lt;h2 id=&quot;immediate-fixes&quot;&gt;Immediate Fixes&lt;/h2&gt;

&lt;p&gt;crackfoo asked whether there was any way to exclude the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; from block creation as a temporary fix while we were waiting for a Namecoin Core update.  Jeremy suggested using the &lt;code class=&quot;highlighter-rouge&quot;&gt;prioritisetransaction&lt;/code&gt; RPC call to prevent the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; from being included in blocks.  Jeremy then tested this locally, and verified that it fixed mining; Jeremy sent out a message to the Alerts mailing list notifying mining pools  that they could restore service by doing this.  Jeremy also suggested using &lt;code class=&quot;highlighter-rouge&quot;&gt;prioritisetransaction&lt;/code&gt; to accelerate the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; transaction, since once it got mined, the problem would go away (even for mining pools who didn’t do anything).  Yihao Peng from BTC.COM offered to do so, and successfully mined the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; transaction on June 20.  At this point, we observed the rest of the mining pools come back online.&lt;/p&gt;

&lt;h2 id=&quot;proper-fixes&quot;&gt;Proper Fixes&lt;/h2&gt;

&lt;p&gt;Daniel has fixed the relevant behavior in Namecoin Core’s block construction code; the fix is present in both the &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0.16&lt;/code&gt; branches.  Miners are encouraged to upgrade so that this situation can’t happen again.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;p&gt;Obviously, any kind of mining disruption is a bad thing, since it causes transactions to confirm more slowly and also increases exposure of the Namecoin network to potential 51% attacks.  In particular, when only 2 mining pools are mining blocks for a period of a day, the larger of the two pools obviously has the capacity to double-spend transactions.  We’re not aware of any reason to believe that any double-spend attacks occurred, which is consistent with our general experience that the Namecoin mining pools behave ethically and try to help us fix issues.  (AuxPoW researchers Paul Sztorc and Alexey Zamyatin have come to similar conclusions about Namecoin mining pools.)  In particular, BTC.COM (the pool that would have been capable of double-spending) was also the pool who reported debug logs to us and accelerated the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; transaction to fix the problem for the other pools.&lt;/p&gt;

&lt;p&gt;Generally speaking, our incident response went quite well.  In particular, service stayed up and running throughout the 3-day incident, although it took ~3x longer to get transactions to confirm than usual.  Compared to &lt;a href=&quot;/2014/09/09/great-aggregating-postmortem.html&quot;&gt;the previous notable outage, from 2014&lt;/a&gt;, where the network was totally unusable for 2 weeks, things certainly went a lot better this time around.  However, we wouldn’t be doing our jobs if we didn’t propose some additional steps we can take to further improve:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Streamline the process of contacting mining pools.  We already have an alerts mailing list that was set up long ago, but the alerts list is ill-suited to cases where we suspect a problem with a particular mining pool and don’t want to spam the other pools with noise.  Improving this is already on our radar, due to some upcoming softforks (yes, we’re finally activating P2SH and SegWit soon!) on which we need to closely coordinate with mining pools (and other service providers, such as exchanges, registrars, block explorers, ElectrumX operators, inproxies like OpenNIC, and analytic websites like CoinMarketCap, BitName.ru, and Blockchain-DNS.info).&lt;/li&gt;
  &lt;li&gt;Automated monitoring.  Significant progress was made on this since the 2014 outage.  In particular, we have a free software script that can calculate hashrate distribution, and Cassini runs this script regularly.  However, that script is not maintained as well as it should be (both Cassini and Jeremy have some private changes that haven’t yet been merged due to lack of time to devote to it), and it would be beneficial to document exactly how to run the script in an automated fashion, with things like email or Matrix alerts when suspicious events occur.  We’re currently in the middle of re-evaluating our CI infrastructure (yes, we are aware of the GitHub buyout by a PRISM member and ICE supplier, and we’re not happy about it), and this is definitely one area that we’ll be exploring.  Coincidentally, several of our developers recently obtained a &lt;a href=&quot;https://www.raptorcs.com/&quot;&gt;Talos II from Raptor Computing Systems&lt;/a&gt; (yes, they are awesome, you should support Raptor), so this may give us additional infrastructure options.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, to complement the above, some things that &lt;em&gt;aren’t&lt;/em&gt; critically needed for this particular issue:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Quick release of binaries for emergency fixes.  While this &lt;em&gt;would&lt;/em&gt; be highly useful for other reasons (and we’re exploring this possibility for CI infrastructure), we’ve been sufficiently successful at making Namecoin Core build reliably from source that the mining pools usually build Namecoin Core themselves.  At the time of the 2014 outage, Namecoin was a pain in the rear to build and a lot of mining pools were using our binaries.  Not a problem anymore.&lt;/li&gt;
  &lt;li&gt;Adopt support for Matt Corallo’s decentralized pooled mining protocol.  While this would have substantial benefits in terms of both total hashrate and hashrate diversity, the problem at the root of this issue is a matter of (1) effective communication with miners and (2) attentive miners, both of which are made mildly worse by a more diverse hashrate distribution.  We do intend to pursue this as a long-term goal (it’s a hardfork, meaning that adopting it is a major bother), and we think it’s highly important for Namecoin to improve in this area, even though a more diverse hashrate is less effective for communication and attentiveness.&lt;/li&gt;
  &lt;li&gt;Contingency plans for developers who are busy with external obligations.  Although more redundancy is always helpful, we currently have some developers who have sufficient funding for Namecoin to be their primary project.  This was not the case in 2014, when our primary responders were dealing with unrelated business trips or school coursework.  As a result, response to critical issues is substantially more reliable now than it was 4 years ago.  Don’t get me wrong, we still need more developers, and we still would benefit from more funding – but things are clearly moving in the right direction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thanks&quot;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;The following people helped respond to the outage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cassini&lt;/li&gt;
  &lt;li&gt;Jeremy Rand&lt;/li&gt;
  &lt;li&gt;Daniel Kraft&lt;/li&gt;
  &lt;li&gt;Yihao Peng (BTC.COM)&lt;/li&gt;
  &lt;li&gt;crackfoo (zpool)&lt;/li&gt;
  &lt;li&gt;Wang Chun (F2Pool)&lt;/li&gt;
  &lt;li&gt;Redblade7&lt;/li&gt;
  &lt;li&gt;Luke Dashjr&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/07/08/brownout-june-17-20.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/07/08/brownout-june-17-20.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC: AuxPoW Deserialization</title>
        <description>&lt;p&gt;Namecoin’s merged mining, which allows miners to simultaneously mine a parent chain (usually Bitcoin) and any number of child chains (e.g. Namecoin and Huntercoin), is made possible by AuxPoW (auxilliary proof of work).  AuxPoW is a clever trick (first proposed by Bitcoin founder Satoshi Nakamoto, and first implemented by Namecoin founder Vincent Durham) that allows a block in the parent chain to commit to a block in any number of child chains, such that the child block can reference the parent block’s PoW and thereby prove that the PoW committed to both the parent and child block.  AuxPoW doesn’t impose any changes for the parent chain’s consensus rules, but it does constitute a hardfork for the child chain (even for lightweight SPV clients of the child chain).  As a result, making Electrum-NMC validate PoW properly requires patching Electrum to support AuxPoW.&lt;/p&gt;

&lt;p&gt;Recently I started hacking on Electrum-NMC to support AuxPoW.  This is not an entirely new problem; a previous Electrum fork (&lt;a href=&quot;https://github.com/electrumalt/electrum-doge&quot;&gt;Electrum-DOGE&lt;/a&gt;) already tried to implement AuxPoW.  Unfortunately, Electrum-DOGE’s code quality is not exactly up to my standards, and besides that, it’s a fork of a 3.5-year-old version of Electrum.  Electrum has evolved substantially since then, to the point that a straightforward merge isn’t possible.  Additionally, it’s not clear how many people have actually audited Electrum-DOGE for correctness.  That said, Electrum-DOGE’s implementation is definitely a useful reference for determining how to do AuxPoW in Electrum.&lt;/p&gt;

&lt;p&gt;Upon adding some debug output to Electrum-NMC, I observed that the first error that showed up was in deserializing block headers.  This makes sense, since in Bitcoin, all block headers are exactly 80 bytes, whereas in Namecoin, the 80 bytes are optionally followed by a variable-length AuxPoW header, which includes things such as the parent block’s header, the parent block’s coinbase transaction (variable length), and two Merkle branches (also variable length).  Electrum-DOGE’s code for deserializing block headers wasn’t directly mergeable, but it definitely was sufficient reference material to implement AuxPoW header deserialization in Electrum-NMC.&lt;/p&gt;

&lt;p&gt;The next error that showed up was related to deserializing &lt;strong&gt;chunks&lt;/strong&gt; of block headers.  Electrum groups block headers into chunks, where each chunk corresponds to a difficulty period (2016 block headers).  Electrum was, of course, assuming in the chunking code that a chunk was exactly &lt;code class=&quot;highlighter-rouge&quot;&gt;2016 * 80&lt;/code&gt; bytes, which wasn’t going to work with AuxPoW.  Fixing this was straightforward enough that I did so without using Electrum-DOGE as a reference (the chunking code has evolved enough in the last 3.5 years that using Electrum-DOGE as a reference would probably have taken more time than reimplementing from scratch).&lt;/p&gt;

&lt;p&gt;The next step is dealing with serialization/deserialization of block headers to/from disk.  Naturally, Electrum’s block header storage format assumes 80-byte headers, so fixing that will take some work.&lt;/p&gt;

&lt;p&gt;There’s also a licensing side effect of using Electrum-DOGE as a reference.  Electrum’s license used to be GPLv3+, but since then they’ve relicensed to MIT.  Electrum-DOGE was forked from Electrum before the license change, and Electrum-DOGE’s authors never relicensed.  As a result, the code I wrote that’s based on Electrum-DOGE’s codebase is a derivative work of GPLv3+-licensed code.  All of the code from upstream Electrum, as well as all of Namecoin’s changes to Electrum and Electrum-DOGE, are still MIT-licensed, but the full combined work that constitutes Electrum-NMC is GPLv3-licensed.  This isn’t really a huge problem (GPLv3+ is a perfectly fine free software license, and I wasn’t intending to submit any of the AuxPoW code upstream anyway), but it’s definitely noteworthy.&lt;/p&gt;

&lt;p&gt;More Electrum AuxPoW work will be covered in future posts.&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/07/01/electrum-nmc-auxpow.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/07/01/electrum-nmc-auxpow.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC v3.1.3-beta1 Released</title>
        <description>&lt;p&gt;We’ve released Electrum-NMC v3.1.3-beta1.  This release supports Namecoin currency transactions, but does not yet support AuxPoW or name transactions.  This release is based on work by both ahmedbodi and myself.&lt;/p&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#electrum-nmc&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/06/07/electrum-nmc-v3.1.3-beta1-released.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/06/07/electrum-nmc-v3.1.3-beta1-released.html</guid>
        
        <category>Releases</category>
        
        <category>Electrum Releases</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC: Code Review and Rebase</title>
        <description>&lt;p&gt;Last year, Ahmed &lt;a href=&quot;/2017/06/17/progress-electrum-nmc.html&quot;&gt;posted about his progress&lt;/a&gt; porting Electrum to Namecoin.  Electrum-NMC has been on the back burner for me lately, due to the TLS and BitcoinJ efforts taking up most of my time.  However, today I found time to inspect Ahmed’s branch.&lt;/p&gt;

&lt;p&gt;Three main things were on my agenda:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Code review of the existing changes.  Generally I don’t like to move code to the GitHub Namecoin organization unless I’ve actually reviewed it for sanity.  I made a few tweaks and bugfixes to Ahmed’s code, but for the most part the code review went smoothly.&lt;/li&gt;
  &lt;li&gt;Rebase against current master branch of Electrum.  This actually went surprisingly well, given that Ahmed’s branch is about 11 months old.  The vast majority of the merge conflicts were due to the &lt;code class=&quot;highlighter-rouge&quot;&gt;electrum&lt;/code&gt; package being renamed to &lt;code class=&quot;highlighter-rouge&quot;&gt;electrum-nmc&lt;/code&gt;, which causes unfortunate merge conflicts every time upstream messes with the &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; statements at the top of a Python file.  Unfortunately I don’t know of any way around this, and a cursory check of altcoin Electrum ports shows that they do the same thing, so I guess we’re going to live with it.  The good news is that those types of merge conflicts are very easy to manually resolve.&lt;/li&gt;
  &lt;li&gt;Additional rebranding beyond what Ahmed’s branch does.  In particular, I swapped out the ElectrumX Bitcoin server addresses and replaced them with ElectrumX Namecoin server addresses.  (Right now there’s only 1 public ElectrumX Namecoin server.  We need more of them — if you’d like to help us, please consider starting up an ElectrumX Namecoin server and sending a PR to ElectrumX that adds your server to the public list.)  I also swapped out the Bitcoin block explorers and replaced them with Namecoin explorers.  (I also gave the Namecoin explorers names that include scary warnings for the subset of explorers that are wiretapped by CloudFlare, discriminate against Tor users, don’t support names, or are non-libre.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The resulting code &lt;a href=&quot;https://github.com/namecoin/electrum-nmc&quot;&gt;is now on GitHub&lt;/a&gt;.  I’ve successfully sent some coins from Namecoin Core to Electrum-NMC and back without any difficulty.&lt;/p&gt;

&lt;p&gt;Regarding next steps, I’ll defer to Ahmed’s post:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On the roadmap now are:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Extend electrumX NMC Support to allow for full veritification of AuxPow&lt;/li&gt;
    &lt;li&gt;Modify new electrum client to verify the new AuxPow&lt;/li&gt;
    &lt;li&gt;Add Name handling support to electrum&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hopefully these won’t be incredibly difficult.  I might post binaries of the current codebase before I try to tackle these (but note that I’m not familiar with the Electrum packaging scripts yet, so there’s a good chance that I’ll break something and/or find something that I broke earlier).&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/05/28/electrum-nmc-code-review-rebase.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/05/28/electrum-nmc-code-review-rebase.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>More Fun with tlsrestrict_nss_tool on Windows</title>
        <description>&lt;p&gt;Last episode: When we last left our hero, tlsrestrict_nss_tool &lt;a href=&quot;/2018/05/20/testing-tlsrestrict-nss-tool-windows.html&quot;&gt;had a few unfixed bugs&lt;/a&gt; that made it unusable on Windows.  Everyone believed those bugs would be the final ones.  Were they?  And now, the conclusion to our 2-part special:&lt;/p&gt;

&lt;p&gt;Spoiler alert: no, of course they weren’t the final bugs!  Obviously Murphy needs to keep showing up, otherwise life as an engineer would be boring, right?&lt;/p&gt;

&lt;p&gt;Anyway, so I fixed the 3 known bugs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use of &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;No warning when CKBI is empty.&lt;/li&gt;
  &lt;li&gt;Broken Unicode in nicknames.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And at this point, things &lt;em&gt;almost&lt;/em&gt; worked.  Specifically, I could apply a name constraint that blacklisted &lt;code class=&quot;highlighter-rouge&quot;&gt;.org&lt;/code&gt;, and accordingly &lt;a href=&quot;https://www.namecoin.org/&quot;&gt;the Namecoin website&lt;/a&gt; showed an error, while &lt;a href=&quot;https://tehnoetic.com/&quot;&gt;Technoethical&lt;/a&gt; still worked.  Seems good enough, right?  I certainly thought so, at least enough to announce on #namecoin-dev that I believed it was working.  Except then I had that insane urge to try to torture-test it a bit more.  So I ran tlsrestrict_nss_tool a 2nd time against the same NSS DB and the same CKBI library.  The expected behavior is that it will examine the CKBI and NSS DB, and decide that no additional cross-signing is needed.  Unfortunately, I instead was treated to a fatal error due to an ASN.1 parse error, specifically due to trailing data.&lt;/p&gt;

&lt;p&gt;I’ve seen this error before, and it’s usually triggered by an NSS quirk.  NSS doesn’t actually keep track of each certificate uniquely.  If you put 2 certificates in an NSS DB that have the same Subject, and you ask certutil to give you one of them (doesn’t matter which), certutil will actually give you &lt;em&gt;both of them&lt;/em&gt;, concatenated.  This happens regularly in our usage, because the cross-signed CA and the (distrusted) original CA have the same Subject (by design).&lt;/p&gt;

&lt;p&gt;Further examination of the logs showed that the errors were showing up while trying to handle certs that had a very odd characteristic: their names looked like what you would get from concatenating the Namecoin prefix with an empty string instead of with the name of the certificate.  Given that I had just spent time fixing issues with Unicode encoding of certificate names, this seemed to be a likely culprit.&lt;/p&gt;

&lt;p&gt;So, I made 2 (overdue anyway) changes to the codebase:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Switch from DER to PEM encoding when communicating with certutil.  DER doesn’t have boundaries when you concatenate certificates, while PEM does.  Using PEM should make debugging a lot easier when multiple certs show up with the same name.&lt;/li&gt;
  &lt;li&gt;When dumping a PEM cert from the NSS DB, explicitly check for multiple PEM certs, and if more than one is present, try to guess which one is correct by checking for the Namecoin prefix in its Subject CommonName and Issuer CommonName (this will be unambiguous under typical conditions).  If more than one cert is present that matches the expected prefixes, throw an error and log all of the PEM certs that showed up in the dump.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, with those changes added, I ran it again, and quickly got an error telling me that 9 certs were being returned in a single dump.  How odd.  Conveniently, the log told me what certificate it was trying to dump when this happened: “Namecoin Restricted CKBI Intermediate CA for ePKI Root Certification Authority”.  This didn’t look like a Unicode issue at all – that name is entirely Latin.  So I Googled for “ePKI Root Certification Authority”, and quickly facepalmed.  That root CA &lt;em&gt;doesn’t have a CommonName!&lt;/em&gt;  Suddenly the symptoms made sense.  The root and intermediate CA’s that are created by cross_sign_name_constraint_tool prepend a Namecoin string to the CommonName of the input CA and discard the rest of the input CA’s Subject, meaning that if multiple input CA’s have a blank CommonName, their resulting Namecoin root and intermediate CA’s will end up with colliding Subjects.  Fail.&lt;/p&gt;

&lt;p&gt;The fix, of course, is to append the SHA256 fingerprint of the input CA to the Subject CommonName of the root and intermediate Namecoin CA’s.  This ensures that we’ll get a unique Subject per input certificate.&lt;/p&gt;

&lt;p&gt;And now, it works.  Repeated runs of tlsrestrict_nss_tool work as they should.  Kind of irritating to spend so much time chasing a silly fail like that, but on the bright side the switch to PEM resulted in cleaner code.&lt;/p&gt;

&lt;p&gt;Next, I’ll be integrating tlsrestrict_nss_tool into ncdns.  Hopefully this will expose any remaining weirdness.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/05/21/more-fun-tlsrestrict-nss-tool-windows.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/05/21/more-fun-tlsrestrict-nss-tool-windows.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Testing tlsrestrict_nss_tool on Windows</title>
        <description>&lt;p&gt;Now that we got &lt;a href=&quot;/2018/05/17/reproducible-builds-certutil-cross-compiling-rbm.html&quot;&gt;NSS &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; reproducibly cross-compiled for Windows&lt;/a&gt;, initial testing has begun on &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; for Windows.&lt;/p&gt;

&lt;p&gt;Besides the obvious and rather boring fail that &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; was trying to execute &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt;, which of course isn’t going to work on Windows (that particular code segment is a relic from quick prototyping that wasn’t ever intended to stay in the codebase), two more interesting issues were identified:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;rbm builds &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; with the Visual C++ 2010 runtime, so running &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; without that runtime installed produces an obvious error.  However, in order to properly detect the built-in certificates (“CKBI”) that Firefox ships with, &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; makes &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; load the CKBI module that Firefox distributes (&lt;em&gt;not&lt;/em&gt; the CKBI module that &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; was built with).  This means that, when &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; is asked to load Firefox’s CKBI module, the Visual C++ runtime used by Firefox’s CKBI module also needs to be present.  Which happens to be Visual C++ 2015.  Without that, &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; looks like it’s working – but the moment the Firefox CKBI module is loaded into &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; exits with a missing DLL error.  However, the situation is worsened by the fact that, as far as I can tell, a missing DLL error in Windows doesn’t impact the exit code.  So &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; doesn’t actually know thet &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; encountered an error; it just thinks it succeeded, and happened to produce no output.  What happens if &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; produces no output when dumping the CKBI list?  Well, &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; just figures that you’re using a Firefox build &lt;em&gt;that doesn’t have any default trusted CA’s!&lt;/em&gt;  This is bad enough when you first run &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt;, since it will basically be a no-op.  But even worse, if you &lt;em&gt;did&lt;/em&gt; have the Visual C++ dependency from Firefox, but then Firefox upgraded it, then the next time you try to run &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt;, all of the name constraints that were previously added will get &lt;em&gt;deleted&lt;/em&gt;, because &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; figures that those CA’s have vanished.  How sad.  The fix here is probably to make &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; explicitly error if the CKBI module appears to have 0 certificates in it.  Such a scenario pretty much always indicates that &lt;em&gt;something&lt;/em&gt; has gone horribly wrong involving the CKBI module, and it’s generally best to treat it as an error.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt;’s certificate dumping functions require selecting a certificate by its nickname.  What’s a nickname?  In practice, for the CKBI module it seems to be the CommonName of the certificate.  The nickname is passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; via a command line flag.  What could possibly go wrong here?  Certificate nicknames can be arbitrary text, including Unicode.  What happens when you pass Unicode as a command line argument in Windows?  Nothing good happens, that’s for sure.  In my testing, Windows will corrupt all of the non-ASCII characters, which results in &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; receiving a corrupted nickname to look up (and it correctly replies that no such nickname exists in the database).  The fix here is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt;’s “batch command” feature.  &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; allows you to put a sequence of commands into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt; file, and you can pass that &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt; file’s path to &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; with a command line flag; &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; will then run all of those commands.  Since the &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt; file isn’t parsed by Windows’s broken command line text decoder, Unicode inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt; file passes through unharmed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, I haven’t actually &lt;em&gt;fixed&lt;/em&gt; these bugs yet.  But, progress is progress.  Hopefully fixes will be coming very soon.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/05/20/testing-tlsrestrict-nss-tool-windows.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/05/20/testing-tlsrestrict-nss-tool-windows.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Reproducible Builds of NSS certutil via Cross-Compiling with rbm</title>
        <description>&lt;p&gt;In a previous post &lt;a href=&quot;/2018/03/26/integrating-cross-signing-name-constraints-nss.html&quot;&gt;where I introduced &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt;&lt;/a&gt;, I mentioned that NSS’s &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; doesn’t have official binaries for Windows, and that “At some point, we’ll probably need to start cross-compiling NSS ourselves, although I admit I’m not sure I’m going to enjoy that.”  Well, we’ve reached that point, and it was an interesting adventure.&lt;/p&gt;

&lt;p&gt;Initially, I looked at the NSS build docs themselves, and was rather annoyed to find that there’s no documentation about how to cross-compile NSS.  To make matters worse, the only results I could find by Startpaging were people saying that they couldn’t figure out how to cross-compile NSS (including some well-known software projects’ developers).&lt;/p&gt;

&lt;p&gt;However, it just so happens that there’s a very high-profile free software project whom I was certain is definitely cross-compiling NSS: The Tor Project.  Tor cross-compiles Firefox (including NSS) as part of their Tor Browser build scripts, so it seemed near-certain that their build scripts could be modified to build &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt;.  However, Tor’s build scripts are rather nonstandard, since they build everything with rbm.  rbm is a container-based build system that’s superficially similar to the Gitian build system that Bitcoin Core and Namecoin Core use (indeed, The Tor Project used to use Gitian before they migrated to rbm).  I’ve been intending to get my feet wet with rbm for quite a while now, so this seemed like a great excuse to play with rbm a bit.&lt;/p&gt;

&lt;p&gt;First off, I wanted to build Firefox in rbm without any changes.  This was actually quite easy – The Tor Project’s documentation is quite good, and I didn’t run into any snags (besides the issue that I initially assigned too little storage to the VM where I was doing this – The Tor Project should probably document the expected storage requirements).  The build command I used was:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./rbm/rbm build firefox --target nightly --target torbrowser-windows-i686
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, I looked at Tor’s Firefox build script… and I was delighted to see that Tor is &lt;em&gt;already&lt;/em&gt; building &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt;.  In fact, you can &lt;a href=&quot;http://rqef5a5mebgq46y5.onion/torbrowser/&quot;&gt;download &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; binaries from The Tor Project’s download server&lt;/a&gt; right now!  (You want the &lt;code class=&quot;highlighter-rouge&quot;&gt;mar-tools-*.zip&lt;/code&gt; packages.)  Except… their build script discards the &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; binaries for all non-GNU/Linux targets.  How sad.&lt;/p&gt;

&lt;p&gt;Modifying the build script to also output &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; for Windows was reasonably straightforward – rbm even worked without erroring on the first try.  I did, however, need to try for a few iterations to make sure that I was outputting all of the needed &lt;code class=&quot;highlighter-rouge&quot;&gt;.dll&lt;/code&gt; files.  However, once I had all the required &lt;code class=&quot;highlighter-rouge&quot;&gt;.dll&lt;/code&gt; files, a rather odd symptom occurred when I tested it on a Windows machine.  When I ran &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; from a command prompt, it would immediately exit without printing anything.  Stranger, when I double-clicked &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; in Windows Explorer, it didn’t even pop up with a command prompt window before it exited.  In addition, I noticed that if I passed command line arguments to &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; telling it to create a new database, it actually did create the database – but it still didn’t display any output.&lt;/p&gt;

&lt;p&gt;This seemed to indicate that something was wrong not with &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt;’s actual functionality, but with its PE metadata: Windows was probably treating it as a GUI application rather than a console application.  Checking the PE metadata confirmed this: Tor’s build scripts were producing a &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; whose PE metadata was marking it as a GUI application.  Some more quick searching revealed &lt;a href=&quot;https://stackoverflow.com/questions/2435816/how-do-i-poke-the-flag-in-a-win32-pe-that-controls-console-window-display/14806704#14806704&quot;&gt;a StackOverflow post&lt;/a&gt; providing a short Python2 script that could edit that part of the PE metadata.  I ran that script against &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt;… and now &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; works properly.  Yay!&lt;/p&gt;

&lt;p&gt;The lack of &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; binaries was one of the major blockers for releasing negative TLS certificate overrides for Firefox on Windows.  Now that this barrier is behind us, I can get around to testing &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; on Windows, and hopefully do a release (with NSIS installer support).  And as a side bonus, &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; builds reproducibly, and I’ve now gotten some experience with rbm (meaning that reproducible builds for ncdns and our other Go software may be coming soon).&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/05/17/reproducible-builds-certutil-cross-compiling-rbm.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/05/17/reproducible-builds-certutil-cross-compiling-rbm.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Integrating ncdumpzone's Firefox TLS Mode into ncdns</title>
        <description>&lt;p&gt;I &lt;a href=&quot;/2018/02/20/ncdumpzone-firefox.html&quot;&gt;discussed in a previous post&lt;/a&gt; some experimental work on making ncdumpzone output a Firefox certificate override list.  At that time, the procedure wasn’t exactly user-friendly: you’d need to run ncdumpzone from a terminal, redirect the output to a file, close Firefox, delete whatever existing &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; entries existed in the existing Firefox certificate override file, append the ncdumpzone output to that file, and relaunch Firefox.  I’ve now integrated some code into ncdns that can automate this procedure.&lt;/p&gt;

&lt;p&gt;One of the trickier components of this was detecting whether Firefox was open.  Firefox’s documentation claims that it uses a lockfile, but as far as I can tell Firefox doesn’t actually delete its lockfile when it exits (and I’ve seen similar reports from other people).  Eventually, I decided to just watch the contents of my Firefox profile directory (sorted by Last Modified date) as Firefox opened and closed, and I noticed that Firefox’s sqlite databases produce some temporary files (specifically, files with the &lt;code class=&quot;highlighter-rouge&quot;&gt;.sqlite-wal&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.sqlite-shm&lt;/code&gt; extension) that are only present when Firefox is open.  So that’s a decent hack to detect that Firefox is open.&lt;/p&gt;

&lt;p&gt;Given that, ncdns now creates 2 extra threads: &lt;code class=&quot;highlighter-rouge&quot;&gt;watchZone&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;watchProfile&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;watchZone&lt;/code&gt; dumps the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; zone with ncdumpzone every 10 minutes, and makes that data available to &lt;code class=&quot;highlighter-rouge&quot;&gt;watchProfile&lt;/code&gt;.  (Right now, ncdumpzone is called as a separate process, which isn’t exactly ideal – a future revision will probably refactor ncdumpzone into a library so that we can avoid this inefficiency.)  &lt;code class=&quot;highlighter-rouge&quot;&gt;watchProfile&lt;/code&gt; waits for Firefox to exit (it checks at 1 Hz), and then loads Firefox’s &lt;code class=&quot;highlighter-rouge&quot;&gt;cert_override.txt&lt;/code&gt; into memory, removes any existing &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; lines, appends the data from &lt;code class=&quot;highlighter-rouge&quot;&gt;watchZone&lt;/code&gt;, and writes the result back to Firefox’s &lt;code class=&quot;highlighter-rouge&quot;&gt;cert_override.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These 2 new threads in ncdns are deliberately designed to kill ncdns if they encounter any unexpected errors.  This is because, if we stop syncing the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; zone to the Firefox override list, Firefox will continue trusting &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; certs that might be revoked in Namecoin.  Therefore, it is important that, in such a situation, &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains must stop resolving until the issue is corrected.  Forcing ncdns to exit seems to be the least complex way to reliably achieve this.&lt;/p&gt;

&lt;p&gt;These changes significantly improve the UX of positive TLS certificate overrides for Firefox.  A pull request to ncdns should be coming soon.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/05/14/integrating-ncdumpzone-firefox.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/05/14/integrating-ncdumpzone-firefox.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Fixing DNAME records in madns and dns-prop279</title>
        <description>&lt;p&gt;One of the more obscure DNS record types is &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; (AKA the Namecoin &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;translate&quot;&lt;/code&gt; JSON field), which is basically a DNS redirect for an entire subtree.  For example, currently &lt;code class=&quot;highlighter-rouge&quot;&gt;radio.bit.&lt;/code&gt; has a &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; record pointing to &lt;code class=&quot;highlighter-rouge&quot;&gt;biteater.dtdns.net.&lt;/code&gt;, which means that any subdomain (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;batman.radio.bit.&lt;/code&gt;) becomes a &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; redirect (e.g. to &lt;code class=&quot;highlighter-rouge&quot;&gt;batman.biteater.dtdns.net.&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; is not exactly a favorite of mine in the context of Namecoin, because it’s easy to misuse it in a way that assigns trust for a Namecoin domain name to 3rd party keys whom Namecoin is intended to not trust (e.g. if you &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;radio.bit.&lt;/code&gt; to a DNS domain name, you’re also assigning control of the &lt;code class=&quot;highlighter-rouge&quot;&gt;TLSA&lt;/code&gt; records for &lt;code class=&quot;highlighter-rouge&quot;&gt;_443._tcp.radio.bit.&lt;/code&gt; to whatever DNSSEC keys have the ability to sign for that DNS domain name, which probably includes a DNS registrar, a DNS registry, and the ICANN root key).  That said, &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; is part of the DNS, and so it &lt;em&gt;should&lt;/em&gt; work in Namecoin, even though there aren’t likely to be many good uses for it in Namecoin.&lt;/p&gt;

&lt;p&gt;Which is why I was surprised to notice when I tested &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; today that it wasn’t actually working as intended in ncdns or dns-prop279.  Some digging revealed that madns (the authoritative DNS server library that ncdns utilizes) didn’t actually have any &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; support; the place in the code where it should have gone was just marked “TODO”.  This was a great excuse for me to get my feet wet with the madns codebase (Hugo usually handles that code), so I jumped in.&lt;/p&gt;

&lt;p&gt;In the process of adding &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; support to madns, I got to read &lt;a href=&quot;https://tools.ietf.org/html/rfc6672#section-2.3&quot;&gt;RFC 6672&lt;/a&gt;, and noticed that it very much looks like Namecoin’s &lt;code class=&quot;highlighter-rouge&quot;&gt;d/&lt;/code&gt; (domain names JSON) spec is not quite compliant with the RFC.  Specifically, the &lt;a href=&quot;https://github.com/namecoin/proposals/blob/1b0043a98fe8f4cf1a85ec92fdbe98d38b5886b3/ifa-0001.md#item-suppression-rules&quot;&gt;Namecoin spec&lt;/a&gt; says that a &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; at &lt;code class=&quot;highlighter-rouge&quot;&gt;radio.bit.&lt;/code&gt; suppresses all other records at &lt;code class=&quot;highlighter-rouge&quot;&gt;radio.bit.&lt;/code&gt;, whereas the RFC says that other record types can coexist at &lt;code class=&quot;highlighter-rouge&quot;&gt;radio.bit.&lt;/code&gt;, with the sole exception of &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; records.  I’ve filed a bug to get the Namecoin spec brought in line with the RFC.&lt;/p&gt;

&lt;p&gt;Once I got madns supporting &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; properly, that meant I could test dns-prop279 with &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt;.  Except testing quickly showed that dns-prop279 was crashing when it encountered a &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt;.  A quick check of the stack trace showed that I had made a minor screw-up in the error checking in dns-prop279 (specifically, dns-prop279 is asking for a &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt;, but doesn’t properly handle the case where it receives both a &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt;).  A quick bugfix later, and dns-prop279 was correctly handling &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The fixes are expected to be included in the next release of ncdns and dns-prop279.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;

&lt;p&gt;(Side note: some readers might have noticed that I was posting less frequently over the past month or so.  That’s because my master’s thesis defense was on May 3, and as a result I spent most of the last month getting ready for that.  I passed my defense, so things should be back to normal soon.)&lt;/p&gt;
</description>
        <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/05/12/fixing-dname-madns-dns-prop279.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/05/12/fixing-dname-madns-dns-prop279.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>cross_sign_name_constraint_tool v0.0.2 and tlsrestrict_nss_tool v0.0.2 Released</title>
        <description>&lt;p&gt;We’ve released &lt;code class=&quot;highlighter-rouge&quot;&gt;cross_sign_name_constraint_tool&lt;/code&gt; v0.0.2 and &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; v0.0.2.  These implement the functionality described in my previous post on &lt;a href=&quot;/2018/03/26/integrating-cross-signing-name-constraints-nss.html&quot;&gt;Integrating Cross-Signing with Name Constraints into NSS&lt;/a&gt; (and the earlier posts that that post links to).&lt;/p&gt;

&lt;p&gt;With this release, in theory Namecoin TLS negative overrides are supported in anything that uses NSS’s trust store (including Firefox on all OS’s, and Chromium on GNU/Linux, without requiring HPKP).&lt;/p&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#cross_sign_name_constraint_tool&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/04/19/cross-sign-name-constraint-tlsrestrict-nss-tools-v0.0.2-released.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/04/19/cross-sign-name-constraint-tlsrestrict-nss-tools-v0.0.2-released.html</guid>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
  </channel>
</rss>
