<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>https://namecoin.org//</link>
    <atom:link href="https://namecoin.org//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 12 Feb 2018 05:41:19 +0000</pubDate>
    <lastBuildDate>Mon, 12 Feb 2018 05:41:19 +0000</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>Pruning of Non-scriptPubKey Data in libdohj</title>
        <description>&lt;p&gt;Our lightweight SPV client’s &lt;code class=&quot;highlighter-rouge&quot;&gt;leveldbtxcache&lt;/code&gt; mode is the most secure of the various Namecoin lightweight SPV modes.  Its storage requirements aren’t too bad either (129.1 MB at the moment for Namecoin mainnet).  However, while 129.1 MB of storage isn’t a dealbreaker, it’s still a bit borderline on mobile devices.  We can do better.&lt;/p&gt;

&lt;p&gt;First, a reminder of how &lt;code class=&quot;highlighter-rouge&quot;&gt;leveldbtxcache&lt;/code&gt; currently works.  Initially, the IBD (initial blockchain download) proceeds the same way a typical lightweight SPV Bitcoin client (such as Schildbach’s Android Bitcoin Wallet) would work: it downloads blockchain headers, aiming for the chain with the most work.  However, at the point when the IBD has reached 1 year ago in the blockchain, it begins downloading full blocks instead of block headers.  The full blocks aren’t saved; they’re used temporarily for 2 purposes: verifying consistency with the block headers’ Merkle root (thus ensuring that no transactions have been censored), and adding any &lt;code class=&quot;highlighter-rouge&quot;&gt;name_anyupdate&lt;/code&gt; transactions to a LevelDB database that allows quick lookup of names.  After those 2 things have been processed, the full blocks are discarded.  The 129.1 MB storage figure is as low as it is because we’re only storing name transactions from the last year (plus block headers, which are negligible in size).&lt;/p&gt;

&lt;p&gt;However, there’s a lot of data in name transactions that we don’t actually need in order to look up names: currency data, signatures, and transaction metadata.&lt;/p&gt;

&lt;p&gt;Currency data exists in name transactions because name operations cost a transaction fee, so there will typically be a currency input and a currency output in any name transaction.  We don’t need this information in order to look up names.  Signatures are used for verifying new transactions, but are not needed to look up previously accepted transaction data.  Transaction metadata, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;nVersion&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;nLockTime&lt;/code&gt;, is also not needed to look up names.  There may be other sources of unwanted data too.&lt;/p&gt;

&lt;p&gt;To improve the situation, I’ve just modified &lt;code class=&quot;highlighter-rouge&quot;&gt;leveldbtxcache&lt;/code&gt; so that, instead of storing full name transactions in LevelDB, it only stores the &lt;code class=&quot;highlighter-rouge&quot;&gt;scriptPubKey&lt;/code&gt; of the name output.  This includes the name’s identifier and value, as well as the Bitcoin-compatible &lt;code class=&quot;highlighter-rouge&quot;&gt;scriptPubKey&lt;/code&gt; that can be used to verify future signatures.  It’s a relatively straightforward change to the code, although it does break backward-compatibility with existing name databases (so you’ll need to delete your blockchain and resync after updating).&lt;/p&gt;

&lt;p&gt;So, how does this fare?&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Full Transactions&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Only &lt;code class=&quot;highlighter-rouge&quot;&gt;scriptPubKey&lt;/code&gt;&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Storage Used after IBD&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;129.1 MB&lt;/td&gt;
      &lt;td&gt;63.7 MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Time Elapsed for IBD&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;~9 Minutes&lt;/td&gt;
      &lt;td&gt;~6 minutes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Not bad, and we even got a faster IBD as a bonus.  (This suggests that the bottleneck, at least on my laptop running Qubes with an HDD, was storage I/O.)&lt;/p&gt;

&lt;p&gt;I’ve just submitted this change to upstream libdohj.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/02/11/libdohj-pruning-scriptpubkey.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/02/11/libdohj-pruning-scriptpubkey.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Core 0.15.99-name-tab-beta1 Released</title>
        <description>&lt;p&gt;Namecoin Core 0.15.99-name-tab-beta1 has been released on the &lt;a href=&quot;/download/betas/#namecoin-core&quot;&gt;Beta Downloads page&lt;/a&gt;.  Changes since 0.13.99-name-tab-beta1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New features:
    &lt;ul&gt;
      &lt;li&gt;GUI
        &lt;ul&gt;
          &lt;li&gt;Significant rewrite of name GUI.  (Patch by brandonrobertz.)  &lt;strong&gt;In particular, please torture-test the following&lt;/strong&gt;:
            &lt;ul&gt;
              &lt;li&gt;Full flow for registering names.&lt;/li&gt;
              &lt;li&gt;Full flow for updating and renewing names.&lt;/li&gt;
              &lt;li&gt;State display in the names list.&lt;/li&gt;
              &lt;li&gt;The above with mainnet, testnet, and regtest networks.&lt;/li&gt;
              &lt;li&gt;The above with encrypted locked, encrypted unlocked, and unencrypted wallets.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;RPC
        &lt;ul&gt;
          &lt;li&gt;Remove name operation from &lt;code class=&quot;highlighter-rouge&quot;&gt;createrawtransaction&lt;/code&gt; RPC method; add &lt;code class=&quot;highlighter-rouge&quot;&gt;namerawtransaction&lt;/code&gt; RPC method.  This paves the way for various future improvements to the name GUI, including coin control, anonymity, fee control, registration without unlocking the wallet twice, and decreased transaction size.  You’ll need to update your scripts if you currently use the raw transaction API for name transactions.  (Reported by JeremyRand, patch by domob1812.)&lt;/li&gt;
          &lt;li&gt;Restore &lt;code class=&quot;highlighter-rouge&quot;&gt;getblocktemplate&lt;/code&gt; RPC method.  This improves workflow for software used by Bitcoin mining pools.  (Reported by DrHaribo, patch by domob1812.)&lt;/li&gt;
          &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;createauxblock&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;submitauxblock&lt;/code&gt; RPC methods.  This improves workflow for software used by Bitcoin mining pools.  (Patch by bitkevin.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Fixes:
    &lt;ul&gt;
      &lt;li&gt;GUI
        &lt;ul&gt;
          &lt;li&gt;Fix pending name registration bug, where the GUI requests a wallet unlock over and over and then errors with name registered.  (Patch by brandonrobertz.)&lt;/li&gt;
          &lt;li&gt;Fix bug where names weren’t showing up in the Manage Names list properly until client had been restarted.  (Patch by brandonrobertz.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;P2P
        &lt;ul&gt;
          &lt;li&gt;Update seed nodes.  This should decrease likelihood of getting stuck without peers.  (Patch by JeremyRand.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;RPC
        &lt;ul&gt;
          &lt;li&gt;Fix crash when user attempts to broadcast an invalid raw transaction containing multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;name_update&lt;/code&gt; outputs.  (Reported by maxweisspoker, patch by domob1812.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Improvements from upstream Bitcoin Core.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, Windows and macOS builds are broken in this release, so only GNU/Linux binaries are available.  We expect Windows and macOS builds to be restored for the 0.15.99-name-tab-beta2 release, which is coming soon.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/02/01/namecoin-core-0-15-99-name-tab-beta1.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/02/01/namecoin-core-0-15-99-name-tab-beta1.html</guid>
        
        <category>Releases</category>
        
        <category>Namecoin Core Releases</category>
        
        
      </item>
    
      <item>
        <title>Recent Reports of Ransomware Using Namecoin are Missing the Real Story</title>
        <description>&lt;p&gt;Some reports are making the rounds that a new ransomware strain, “GandCrab”, is using Namecoin for C&amp;amp;C.  While this may sound interesting, as far as I can tell these reports are missing the real story.&lt;/p&gt;

&lt;p&gt;Looking at the &lt;a href=&quot;https://www.bleepingcomputer.com/news/security/gandcrab-ransomware-distributed-by-exploit-kits-appends-gdcb-extension/&quot;&gt;report on Bleeping Computer&lt;/a&gt;, we see these quotes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Another interesting feature is GandCrab’s use of the NameCoin .BIT top-level domain.  .BIT is not a TLD that is recognized by the Internet Corporation for Assigned Names and Numbers (ICANN), but is instead managed by &lt;a href=&quot;https://namecoin.org/&quot;&gt;NameCoin’s&lt;/a&gt; decentralized domain name system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The developers of GandCrab are using NameCoin’s DNS as it makes it harder for law enforcement to track down the owner of the domain and to take the domains down.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This doesn’t make much sense, since Namecoin isn’t anonymous (so tracking down the owner of the domain is relatively straightforward for law enforcement).  But more to the point, most Internet users don’t have Namecoin installed, and it would be rather odd for ransomware to bundle a Namecoin name lookup client.  This confusion is explained by Bleeping Computer (to their credit):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This means that any software that wishes to resolve a domain name that uses the .BIT tld, must use a DNS server that supports it. GandCrab does this by making dns queries using the a.dnspod.com DNS server, which is accessible on the Internet and can also  be used to resolve .bit domains.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yep, if this is to be believed, GandCrab isn’t actually using Namecoin, they’re using a centralized DNS server (&lt;code class=&quot;highlighter-rouge&quot;&gt;a.dnspod.com&lt;/code&gt;) which nominally claims to mirror the namespace of Namecoin.  This means that, if law enforcement wants to censor the C&amp;amp;C &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains, they don’t need to censor Namecoin (which would be rather difficult), they simply need to look up who owns &lt;code class=&quot;highlighter-rouge&quot;&gt;dnspod.com&lt;/code&gt; (under ICANN policy, looking this up is straightforward for law enforcement) and send them a court order to censor the C&amp;amp;C domains.&lt;/p&gt;

&lt;p&gt;However, Bleeping Computer is actually substantially wrong on this point.  Why?  Take a look in the Namecha.in block explorer at &lt;a href=&quot;https://namecha.in/name/d/bleepingcomputer&quot;&gt;the Namecoin value of &lt;code class=&quot;highlighter-rouge&quot;&gt;bleepingcomputer.bit&lt;/code&gt;&lt;/a&gt;, which is one of the alleged C&amp;amp;C domains:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;ns&quot;:[&quot;A.DNSPOD.COM&quot;,&quot;B.DNSPOD.COM&quot;]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First off, note that this is actually a completely invalid Namecoin configuration, because &lt;a href=&quot;https://help.directadmin.com/item.php?id=541&quot;&gt;the trailing period is missing&lt;/a&gt; from the authoritative nameserver addresses, so any DNS software that tries to process that Namecoin domain will return &lt;code class=&quot;highlighter-rouge&quot;&gt;SERVFAIL&lt;/code&gt;.  Second, note that the authoritative nameservers listed are… the &lt;code class=&quot;highlighter-rouge&quot;&gt;dnspod.com&lt;/code&gt; nameservers.  This makes it pretty clear that &lt;code class=&quot;highlighter-rouge&quot;&gt;a.dnspod.com&lt;/code&gt; isn’t actually a Namecoin DNS inproxy.  If it were, and even if the trailing-period fail were corrected in the Namecoin value, the inproxy would end up in a recursion loop.  &lt;code class=&quot;highlighter-rouge&quot;&gt;a.dnspod.com&lt;/code&gt; is actually just a random authoritative nameserver that happens to be serving records for a domain name that ends in &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt;.  &lt;strong&gt;Namecoin isn’t used anywhere by GandCrab, and killing the Namecoin domain wouldn’t have any effect on GandCrab.&lt;/strong&gt;  Of course, this raises questions about why exactly that domain name is even registered in Namecoin.  The simplest explanations are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The GandCrab developers are massively incompetent, and have potentially deanonymized themselves by registering a Namecoin domain despite not ever using that Namecoin domain for their ransomware.&lt;/li&gt;
  &lt;li&gt;Someone unrelated to GandCrab has registered that Namecoin domain for the purpose of trolling security researchers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s conceivable that &lt;code class=&quot;highlighter-rouge&quot;&gt;dnspod.com&lt;/code&gt;’s nameservers will only allow a &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domain’s records to be served from their systems if that &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domain’s Namecoin data points to &lt;code class=&quot;highlighter-rouge&quot;&gt;dnspod.com&lt;/code&gt;’s namservers, and it’s further possible that their systems are misconfigured to not notice that the trailing period is missing.  However, this seemed rather unlikely to me.  Why?  Well, first, take a look at the WHOIS data for &lt;code class=&quot;highlighter-rouge&quot;&gt;dnspod.com&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Registrar URL: http://www.dnspod.cn
Registrar: DNSPod, Inc.
Registrar IANA ID: 1697
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So DNSPod is apparently an ICANN-accredited DNS registrar, with a primary domain name in China.  Which of these scenarios fits better with Occam’s Razor:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A DNS registrar located in China (which is not exactly known for its government’s respect for Namecoin’s values of free speech), which is accredited by ICANN (which doesn’t recognize Namecoin as either a DNS TLD or a special-use TLD), is doing special processing of domain names that they host in order to respect the authority of Namecoin.  They’ve also never contacted the Namecoin developers to inform us that they’re doing this, nor are any of their technical people active in the Namecoin community.&lt;/li&gt;
  &lt;li&gt;DNSPod simply doesn’t care what domains their customers host on their nameservers, since if DNSPod’s nameservers aren’t authorized by a domain’s NS record in the DNS, nothing bad will happen anyway (DNSPod simply won’t receive any requests for that domain).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In addition, if DNSPod had such a policy, it’s not clear how exactly their customers would be able to switch their Namecoin domains to DNSPod nameservers without encountering downtime while DNSPod was waiting for the Namecoin transaction to propagate.&lt;/p&gt;

&lt;p&gt;However, since empiricism is informative, Ryan Castellucci tested this with an account on DNSPod, and confirmed that no such validation occurs:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dig +tcp jeremyrandissomesortofhumanperson.bit @a.dnspod.com

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.5-9+deb8u14-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; +tcp jeremyrandissomesortofhumanperson.bit @a.dnspod.com
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 23586
;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 3, ADDITIONAL: 1
;; WARNING: recursion requested but not available

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;jeremyrandissomesortofhumanperson.bit. IN A

;; ANSWER SECTION:
jeremyrandissomesortofhumanperson.bit. 600 IN A 255.255.255.255

;; AUTHORITY SECTION:
jeremyrandissomesortofhumanperson.bit. 600 IN NS b.dnspod.com.
jeremyrandissomesortofhumanperson.bit. 600 IN NS c.dnspod.com.
jeremyrandissomesortofhumanperson.bit. 600 IN NS a.dnspod.com.

;; Query time: 595 msec
;; SERVER: 101.226.79.205#53(101.226.79.205)
;; WHEN: Wed Jan 31 03:04:24 UTC 2018
;; MSG SIZE  rcvd: 160
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Ryan doesn’t own &lt;code class=&quot;highlighter-rouge&quot;&gt;jeremyrandissomesortofhumanperson.bit&lt;/code&gt;.)  Ryan also did the same for &lt;code class=&quot;highlighter-rouge&quot;&gt;bleepingcomputer.iq&lt;/code&gt;, implying that DNSPod isn’t verifying ownership of DNS domain names either:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dig +tcp bleepingcomputer.iq @a.dnspod.com A

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.5-9+deb8u14-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; +tcp bleepingcomputer.iq @a.dnspod.com A
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 50149
;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 3, ADDITIONAL: 1
;; WARNING: recursion requested but not available

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;bleepingcomputer.iq.           IN      A

;; ANSWER SECTION:
bleepingcomputer.iq.    600     IN      A       8.8.8.8

;; AUTHORITY SECTION:
bleepingcomputer.iq.    600     IN      NS      a.dnspod.com.
bleepingcomputer.iq.    600     IN      NS      b.dnspod.com.
bleepingcomputer.iq.    600     IN      NS      c.dnspod.com.

;; Query time: 5758 msec
;; SERVER: 101.226.79.205#53(101.226.79.205)
;; WHEN: Wed Jan 31 03:00:39 UTC 2018
;; MSG SIZE  rcvd: 142
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ryan tried registering a &lt;code class=&quot;highlighter-rouge&quot;&gt;.onion&lt;/code&gt; domain and &lt;code class=&quot;highlighter-rouge&quot;&gt;bleepingcomputer.malware&lt;/code&gt; on DNSPod as well, but these were rejected as invalid TLD’s.  Ryan and I have no clue why &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; is on DNSPod’s TLD whitelist while &lt;code class=&quot;highlighter-rouge&quot;&gt;.onion&lt;/code&gt; isn’t – probably because a customer asked for it and DNSPod just doesn’t care.&lt;/p&gt;

&lt;p&gt;Ryan isn’t aware of any prior cases where a malware C&amp;amp;C was set up in a random free authoritative DNS provider such as DNSPod, with the DNS servers hardcoded in the malware.  It’s an interesting strategy for malware authors, since authoritative DNS providers usually don’t bother to confirm domain name ownership.  Entertainingly, Ryan found that DNSPod isn’t verifying ownership of the email addresses used to register accounts either.&lt;/p&gt;

&lt;p&gt;So in conclusion: while this is a rather interesting case of a possible hilarious opsec fail by a ransomware author (which very well might get them arrested), and the strategy of using authoritative DNS hosting providers for malware C&amp;amp;C is fascinating as well, the ransomware itself is fully irrelevant to Namecoin.&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/01/30/recent-reports-ransomware-using-namecoin-missing-real-story.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/01/30/recent-reports-ransomware-using-namecoin-missing-real-story.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>34C3 Summary</title>
        <description>&lt;p&gt;As was &lt;a href=&quot;/2017/12/23/34c3.html&quot;&gt;previously announced&lt;/a&gt;, Jonas Ostman and I (Jeremy Rand) represented Namecoin at &lt;a href=&quot;https://events.ccc.de/congress/2017/wiki/index.php/Main_Page&quot;&gt;34C3&lt;/a&gt; in Leipzig, Germany.  This was our first Congress, so we didn’t quite know what to expect, but we were pretty confident that it would be awesome.  We were not disappointed.  The CCC community is well-known for being friendly and welcoming to newcomers, and we greatly enjoyed talking to everyone there.&lt;/p&gt;

&lt;p&gt;Namecoin gave 3 talks, all of which were hosted by the Monero Assembly and the Chaos West Stage.  I expect 2 of those talks to have videos posted sometime later this month.  Unfortunately, 1 of the talks suffered an audio issue in the recording, so it won’t have a video posted (but I will post the slides of that talk, as well as the other talks’ slides).  The talks’ titles are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Namecoin as a Decentralized Alternative to Certificate Authorities for TLS&lt;/li&gt;
  &lt;li&gt;Namecoin for Tor Onion Service Naming (And Other Darknets) &lt;em&gt;(No video will be posted due to audio recording technical issues)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;A Blueprint for Making Namecoin Anonymous&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual for conferences that we attend, we engaged in a large number of conversations with other attendees.  Also as usual, I won’t be publicly disclosing the content of those conversations, because I want people to be able to talk to me at conferences without worrying that off-the-cuff comments will be broadcast to the public.  That said, I can say that a lot of very promising discussions happened regarding future collaboration with allied projects, and we’ll make any relevant announcements when/if such collaborations are formalized.&lt;/p&gt;

&lt;p&gt;Huge thank you to the following groups who facilitated our participation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://events.ccc.de/congress/2017/wiki/index.php/Assembly:Monero_Assembly&quot;&gt;The Monero Assembly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://events.ccc.de/congress/2017/wiki/index.php/Assembly:Chaos_West&quot;&gt;The Chaos West Assembly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tehnoetic.com/&quot;&gt;Technoethical&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We definitely intend to return for 35C3 in December 2018.  Until then, &lt;em&gt;Tuwat!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/01/03/34c3-summary.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/01/03/34c3-summary.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin's Jeremy Rand and Jonas Ostman will be at 34C3</title>
        <description>&lt;p&gt;Namecoin developers Jeremy Rand and Jonas Ostman will attend &lt;a href=&quot;https://events.ccc.de/congress/2017/wiki/index.php/Main_Page&quot;&gt;34C3 (the 34th Chaos Communication Congress)&lt;/a&gt; in Leipzig, December 27-30.  There’s a good chance that the 34C3 Monero Assembly will host some Namecoin talks.  We’re looking forward to the congress!&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/12/23/34c3.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/12/23/34c3.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Lightweight SPV Lookup Client 0.2.7 Beta 1 Source Code Available</title>
        <description>&lt;p&gt;Version 0.2.7 Beta 1 of the Namecoin Lightweight SPV Lookup Client has had its source code released.  &lt;a href=&quot;/docs/bitcoinj-name-lookups/&quot;&gt;Build instructions are here (it’s the “bleeding-edge branch”).&lt;/a&gt;  Binaries will be made available later.  Meanwhile, the former bleeding-edge branch (the branch that introduced leveldbtxcache mode) has graduated to partially-stable.  The former partially-stable branch has been deprecated.&lt;/p&gt;

&lt;p&gt;Happily, the 0.2.7 Beta 1 release is using an unmodified upstream libdohj, since Ross Nicoll from Dogecoin has merged all of my changes.  I’m still working to get the relevant ConsensusJ (formerly bitcoinj-addons) code merged upstream.  &lt;strong&gt;As usual, the SPV client is experimental.  Namecoin Core is still substantially more secure against most threat models.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/11/30/spv-lookup-0.2.7-beta-1.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/11/30/spv-lookup-0.2.7-beta-1.html</guid>
        
        <category>Releases</category>
        
        <category>libdohj Releases</category>
        
        
      </item>
    
      <item>
        <title>Update on Namecoin Core Qt Development</title>
        <description>&lt;p&gt;It’s been roughly a year since the &lt;a href=&quot;https://github.com/namecoin/namecoin-core/pull/67&quot;&gt;initial manage names tab&lt;/a&gt;
code was ported from legacy Namecoin to Namecoin Core. Since then, development
of namecoin-qt has been progressing on two fronts: merging the manage names Qt
interface into Namecoin Core’s master branch and the development of a &lt;code class=&quot;highlighter-rouge&quot;&gt;d/&lt;/code&gt; spec
DNS configuration interface.&lt;/p&gt;

&lt;p&gt;In October, I initiated a &lt;a href=&quot;https://github.com/namecoin/namecoin-core/pull/187&quot;&gt;pull request&lt;/a&gt;
to merge the manage names tab into Namecoin Core’s master branch.
This patch replaces the previous, experimental manage names (v0.13.99) interface and
brings it current with Namecoin Core version 0.15.99. There have been many
bugfixes and improvements, so we welcome users to test the code and report any
issues.&lt;/p&gt;

&lt;p&gt;Secondly, thanks to &lt;a href=&quot;https://www.namecoin.org/2017/05/19/funding-nlnet.html&quot;&gt;support&lt;/a&gt;
from the NLnet Foundation’s Internet Hardening Fund, I’ve began developing the
DNS configuration dialog. The goal is to make managing Namecoin domains much simpler
and will remove the need for many users to build &lt;code class=&quot;highlighter-rouge&quot;&gt;d/&lt;/code&gt; spec JSON documents
altogether. We currently have a set of &lt;a href=&quot;https://github.com/namecoin/namecoin-core/issues/196&quot;&gt;mocks available&lt;/a&gt;
for comments from users. Until a pull request is issued, development can be tracked
in the &lt;a href=&quot;https://github.com/brandonrobertz/namecoin-core/tree/manage-dns&quot;&gt;manage-dns&lt;/a&gt;
branch of my Namecoin Core repo.&lt;/p&gt;

&lt;p&gt;Development is moving quickly, so I will continue to update the community as
things progress. As usual, you can follow our work in the &lt;a href=&quot;https://github.com/namecoin/namecoin-core&quot;&gt;GitHub repo&lt;/a&gt;
and on the &lt;a href=&quot;https://www.reddit.com/r/Namecoin/&quot;&gt;Namecoin Subreddit&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/11/20/update-on-namecoin-core-qt-development.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/11/20/update-on-namecoin-core-qt-development.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin will be at the 2017 Oklahoma City Fall Peace Festival</title>
        <description>&lt;p&gt;Namecoin will have a table at the 2017 &lt;a href=&quot;https://peacehouseok.org/outreach/fall-peace-festival/&quot;&gt;Fall Peace Festival&lt;/a&gt; in Oklahoma City on November 11.  If you happen to be in the OKC area, feel free to stop by and say hello.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Nov 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/11/10/oklahoma-peace-festival.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/11/10/oklahoma-peace-festival.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>What Chromium's Deprecation of HPKP Means for Namecoin</title>
        <description>&lt;p&gt;Readers who’ve been paying attention to the TLS scene are likely aware that &lt;a href=&quot;https://scotthelme.co.uk/the-death-knell-for-hpkp/&quot;&gt;Google has recently announced that Chromium is deprecating HPKP&lt;/a&gt;.  This is not a huge surprise to people who’ve been paying attention; HPKP has had virtually no meaningful implementation by websites, and many security experts have been warning that HPKP is too dangerous for most deployments due to the risk that websites who use it could, with a single mistake, accidentally DoS themselves for months.  The increased publicity of the RansomPKP attack drove home the point that this kind of DoS could even happen to websites who &lt;em&gt;don’t&lt;/em&gt; use HPKP.  I won’t comment on the merits of HPKP for its intended purpose.  However, readers familiar with Namecoin will probably be aware that Namecoin’s TLS support for Chromium relies on HPKP.  So, what does HPKP’s deprecation mean for Namecoin?&lt;/p&gt;

&lt;p&gt;First off, nothing will happen on this front until Chrome 67, which is projected to release as Stable on May 29, 2018.  (Users of more cutting-edge releases of Chromium-based browsers will lose HPKP earlier.)  When Chrome 67 is released, I expect that the following behavior will be observed for the current ncdns release (v0.0.5):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The ncdns Windows installer will probably continue to detect Chromium installations (because the HPKP state shares a database with the HSTS state, which isn’t going anywhere).  The NUMS HPKP installation will appear to succeed.&lt;/li&gt;
  &lt;li&gt;ncdns will continue to be able to add certificates to the trust store.  This means that &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; websites that use TLS will continue to load without errors.&lt;/li&gt;
  &lt;li&gt;The NUMS HPKP pin will silently stop having any effect.  This means that Namecoin’s TLS security will degrade to that of the CA system.  A malicious CA that is trusted by Windows will be able to issue certificates for &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; websites, and Chromium will accept these certificates as valid even when they don’t match the blockchain.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Astute readers will note that this is the 4th instance of a browser update breaking Namecoin TLS in some way.  (The previous 3 cases were Firefox breaking Convergence, Firefox breaking nczilla, and Firefox breaking XPCOM.)  In this case, we’re reasonably well-prepared.  Unlike the Convergence breakage (which Mozilla considered to be a routine binary-size optimization) and the nczilla breakage (which Mozilla considered to be a security patch), HPKP is a sufficiently non-niche functionality that we’re finding out well in advance (much like the XPCOM deprecation).  As part of my routine work at Namecoin, I make a habit of studying how TLS certificate verification works in various common implementations, and regularly make notes on ways we could hack them in the future to use Namecoin.  Based on a cursory review of my notes, there are at least 7 possible alternatives to Chromium’s HPKP support that I could investigate for the purpose of restoring Namecoin’s TLS security protections in Chromium.  3 of them would be likely to qualify for NLnet funding, if we decided to divert funding from currently-planned NLnet-funded tasks.  (It’s not clear to me whether we actually will divert any funding at this point, but we do have the flexibility to do so if it’s needed.)  None of those 7 alternative approaches are quite as nice as our NUMS HPKP approach (which is why we’ve been using NUMS HPKP up until now), but such is life.&lt;/p&gt;

&lt;p&gt;In conclusion, while this news does highlight the maintenance benefits of using officially approved API’s rather than hacks (which, it should be noted, is my current approach for Firefox), at this time there is no reason for Namecoin to drop TLS support for Chromium.  I’m continuing to evaluate what our best options are, and I’ll report back when I have more information.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Nov 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/11/05/chromium-hpkp-deprecation.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/11/05/chromium-hpkp-deprecation.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin TLS for Firefox: Phase 5 (Moving the Override Cache to C++)</title>
        <description>&lt;p&gt;In &lt;a href=&quot;/2017/10/11/firefox-tls-threads.html&quot;&gt;Phase 4&lt;/a&gt; of Namecoin TLS for Firefox, I mentioned that more optimization work remained (despite the significant latency improvements I discussed in that post).  Optimization work has continued, and I’ve now moved the override cache from JavaScript to C++, with rather dramatic latency improvement as a result.&lt;/p&gt;

&lt;p&gt;Prior to this optimization, my C++ code would synchronously call the WebExtensions Experiment to retrieve override decisions, and the Experiment would block until the WebExtension had returned an override decision.  At this point the decision would be added to the cache within the Experiment, and then the C++ code’s call to the Experiment would return.  I had long suspected that this was a major latency bottleneck, for 2 reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;JavaScript generally is inefficient.&lt;/li&gt;
  &lt;li&gt;After Firefox’s built-in certificate verification completed, control had to flow from C++ to JavaScript (which adds some latency) and then from JavaScript back to C++ (which adds latency as well).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With my latest changes, the control flow changes a lot:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The synchronous API for the C++ code to get positive override decisions from the Experiment is removed.&lt;/li&gt;
  &lt;li&gt;The override decision cache in the Experiment is removed.&lt;/li&gt;
  &lt;li&gt;An override decision cache is added to the C++ code.&lt;/li&gt;
  &lt;li&gt;An API is added to the C++ code for the Experiment to notify when an override decision has just been received from the WebExtension.  This API adds the decision to the C++ override decision cache.&lt;/li&gt;
  &lt;li&gt;The C++ code that gets a positive override now simply blocks until an override decision has appeared in the cache; it doesn’t make any calls to JavaScript of any kind.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The advantages of this are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A lot of inefficient JavaScript code is removed from the latency-critical code paths, in favor of more efficient C++.&lt;/li&gt;
  &lt;li&gt;Control never flows from C++ to JavaScript in order to retrieve the override decision (saves latency), and the flow from JavaScript to C++ can occur in parallel with Firefox’s built-in certificate verification (saves latency as well).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I was originally hoping to use a thread-safe data structure for the C++ override decision cache, and noticed that Mozilla’s wiki mentioned such a data structure.  However, I couldn’t actually find that data structure in Mozilla’s source code.  After a few hours of grepping and no luck figuring out what the wiki was referring to, I asked on Mozilla’s IRC, and was told that the wiki was out of date and that the thread-safety features of that data structure were long ago removed.  So, the cache is only accessible from the main thread, and cross-thread C++ calls will still be needed to access it from outside the main thread.  This isn’t really a disaster; cross-thread C++ calls aren’t massively bad.&lt;/p&gt;

&lt;p&gt;Since I wrote up some really nice scripts for measuring latency for Phase 4, I reused them for Phase 5 to see how things have improved.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/webextensions-latency/2017-10-19/raw-data_html_e7e6307c38d1bb1a.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/data/webextensions-latency/2017-10-19/raw-data_html_4abcef16d0d9da8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a quite drastic speedup.  The gradual speedup over time has vanished, which suggests that I was right about it being attributable to the JavaScript JIT warming up.  (However, it should be noted that this time I did a single batch of 45 certificate verifications, so this may be an artifact of that change too.)  More importantly, based on the fact that uncached and cached overrides are indistinguishable in the vast majority of cases, it can be inferred that the Experiment’s decision usually enters the C++ code’s decision cache before Firefox’s built-in certificate verification even finishes.  (The occasional spikes in uncached latency seem to correspond to cases where that’s false.)&lt;/p&gt;

&lt;p&gt;The raw data is available &lt;a href=&quot;/data/webextensions-latency/2017-10-19/raw-data.ods&quot;&gt;in OpenDocument spreadsheet format&lt;/a&gt; or &lt;a href=&quot;/data/webextensions-latency/2017-10-19/raw-data.html&quot;&gt;in HTML format&lt;/a&gt; as before.  The median uncached latency for positive overrides has decreased from 375 microseconds in Phase 4 to 29 microseconds in Phase 5.&lt;/p&gt;

&lt;p&gt;It should be noted that negative overrides haven’t yet been converted to use the C++ override decision cache.  I expect them to be slightly slower than these figures, because negative overrides will have 1 extra cross-thread C++ call.&lt;/p&gt;

&lt;p&gt;The same disclaimer as before applies: this data is not intended to be scientifically reproducible; there are likely to be differences between setups that could impact the latency significantly, and I made no effort to control for or document such differences.  That said, it’s likely to be a useful indicator of how well we’re doing.&lt;/p&gt;

&lt;p&gt;At this point, I am fully satisfied with the performance that I’m getting in these tests of positive overrides.  Converting negative overrides to work similarly is expected to be easy.  Of course, performance will probably be noticeably worse once the WebExtension is calling ncdns, so there’s a good chance that after ncdns is integrated with the WebExtension, I’ll be coming back to optimization.&lt;/p&gt;

&lt;p&gt;For the short-term though, I’ll be focusing on integrating the WebExtension with ncdns.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Oct 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/10/29/firefox-tls-moving-cache-cpp.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/10/29/firefox-tls-moving-cache-cpp.html</guid>
        
        <category>News</category>
        
        
      </item>
    
  </channel>
</rss>
