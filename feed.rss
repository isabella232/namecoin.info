<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>https://www.namecoin.org//</link>
    <atom:link href="https://www.namecoin.org//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 09 Dec 2019 02:40:45 +0000</pubDate>
    <lastBuildDate>Mon, 09 Dec 2019 02:40:45 +0000</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>Stream Isolation for Namecoin Name Lookups</title>
        <description>&lt;p&gt;The documentation for using Namecoin for name lookups with Tor (via ncprop279) includes a warning about stream isolation.  Specifically, it states that while TCP connections issued by the application (e.g. Tor Browser) will be stream-isolated as usual, stream isolation will &lt;em&gt;not&lt;/em&gt; be applied to whatever network traffic might be induced by the Namecoin lookup.  As a result, our documentation recommends against using Electrum-NMC with ncprop279, since Electrum-NMC will produce network traffic on each lookup.  Our documentation instead recommends Namecoin Core or ConsensusJ-Namecoin’s leveldbtxcache mode, neither of which produce any network traffic per lookup.  However, this situation is non-ideal; Electrum-NMC has some very real advantages, and it’s a shame that we can’t recommend it for this purpose.  Can we do better?&lt;/p&gt;

&lt;p&gt;For background, stream isolation is a little-known but highly important feature in Tor, which prevents different TCP connections from different activities from sharing a single Tor circuit.  Imagine if this weren’t the case.  Keith, who runs an exit relay (or wiretaps one) could easily observe that Ed visited a website of a restaurant in Hawaii, and also visited the website of the WikiLeaks submission system.  Keith doesn’t need to know who Ed is or what his real IP address is; Keith has learned that someone in Hawaii is likely a WikiLeaks source, which is valuable information.  In other words, Ed has only achieved &lt;em&gt;pseudonymity&lt;/em&gt;, i.e. his real name and IP address are hidden, but all of his activities are linkable to a single pseudonym.  Stream isolation unlinks these activities, so that Keith instead sees that someone accessed a Hawaiian restaurant’s website and also sees that someone accessed WikiLeaks’s submission system, but doesn’t have any idea if they are the same person.  Stream isolation enables users to be &lt;em&gt;anonymous&lt;/em&gt; rather than &lt;em&gt;pseudonymous&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;How does stream isolation work in Tor?  Applications can decide which TCP connections can share a circuit without leaking private information, and they communicate this to Tor by setting the SOCKS5 username and password fields.  Tor makes sure that any two TCP connections that have different SOCKS5 username+password values will never share a circuit.  (Technically I’m oversimplifying here; I’ll come back to this.)  So, in order for this to work properly with Namecoin, we need to make sure that the Namecoin software is able to access the SOCKS5 username and password that the application used when talking to Tor, and pass this (or derivative data, see below) through to Tor when Electrum-NMC is doing lookups.  In practice, this means that every piece of software in the chain (starting with Tor’s control port, which talks to StemNS, and ending with aiorpcX, which is the library used by Electrum-NMC to open the TCP connections via Tor’s SOCKS port) must be patched to preserve the SOCKS5 username and password that the application used, and pass it through to the next piece of software in the chain.&lt;/p&gt;

&lt;p&gt;So, let’s look at how we handled this, starting at the end of the chain and working backwards to the beginning.&lt;/p&gt;

&lt;h2 id=&quot;aiorpcx&quot;&gt;aiorpcX&lt;/h2&gt;

&lt;p&gt;aiorpcX is the network library used by Electrum.  It has its own SOCKS5 implementation, which already supports username/password authentication, so you might think there’s nothing to patch here.  However, observing Bitcoin Core’s behavior yields a hint for how we can improve aiorpcX.&lt;/p&gt;

&lt;p&gt;Bitcoin Core (and, by extension, Namecoin Core) open each peer connection using a random SOCKS5 username and password.  The effect is that each peer connection will go over its own Tor circuit.  This has several advantages.  It improves Sybil-resistance (by making it impossible for a single malicious Tor exit relay to control a Bitcoin node’s view of the blockchain).  It also avoids situations where a malicious user gets a Tor exit banned by most of the Bitcoin network, and then other users who end up on that Tor exit can’t connect.  These advantages are beneficial even without worrying about privacy specifically.&lt;/p&gt;

&lt;p&gt;I submitted a patch to aiorpcX that allows applications to request that a random SOCKS5 username+password be used per connection.  This makes things quite a bit cleaner.  The patch has been merged by Neil.&lt;/p&gt;

&lt;h2 id=&quot;electrum-nmc&quot;&gt;Electrum-NMC&lt;/h2&gt;

&lt;p&gt;Patching Electrum-NMC to use the above aiorpcX feature was fairly straightforward.  However, I also needed to add an RPC argument to &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt;, so that the caller can specify a “stream isolation ID”, which has a similar role as the SOCKS5 username+password in the Tor SOCKS port.  Electrum-NMC executes &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; with a different server connection for each unique stream isolation ID that it is passed.&lt;/p&gt;

&lt;p&gt;You may be wondering why we’re not just passing through the stream isolation ID to aiorpcX’s SOCKS5 username; why go through the trouble of randomizing the username and then maintaining a mapping inside Electrum-NMC?  The reason is that Electrum-NMC needs to preemptively open server connections before &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; is called.  Otherwise, each name lookup would be delayed by an Electrum protocol handshake, which would be an unacceptable latency penalty.&lt;/p&gt;

&lt;p&gt;These patches are also useful for non-Namecoin use cases, and accordingly I’ve also sent them upstream to Electrum, where they’re awaiting review.&lt;/p&gt;

&lt;h2 id=&quot;btcd&quot;&gt;btcd&lt;/h2&gt;

&lt;p&gt;btcd is best-known as an alternate implementation of a Bitcoin full node, but it’s also the primary implementation of a Bitcoin RPC client in Go.  Up until recently, ncdns used an ancient 2015 fork of btcd to talk to Namecoin Core and Electrum-NMC.  This fork dealt with the arguments to &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt;.  I wasn’t really fond of piling more and more hacks onto an ancient fork, so I looked into what would be needed to use modern btcd with Namecoin.  There were only 2 features missing from current btcd that we needed: extensible commands (so that we could add &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; as an RPC method) and cookie authentication (so that the user doesn’t need to set up RPC passwords manually).  Both of these were pretty easy to implement, and I’ve sent patches for both to the btcd developers.  They’re both undergoing review.&lt;/p&gt;

&lt;p&gt;With that out of the way, I was able to get the Namecoin &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; command working with current btcd (I’m currently maintaining a fork of btcd until the above 2 patches are merged), via the new &lt;code class=&quot;highlighter-rouge&quot;&gt;ncbtcjson&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ncrpcclient&lt;/code&gt; packages.  These packages now support passing a stream isolation ID to Namecoin Core and Electrum-NMC.  (Namecoin Core ignores it, since it doesn’t generate any network traffic per lookup.)&lt;/p&gt;

&lt;p&gt;I also needed to hack Electrum-NMC a bit to make the new btcd’s stream isolation ID argument work with it.  This is because Electrum, by convention, expects optional arguments to be passed in a slightly different way than Bitcoin Core, and since the stream isolation ID is an optional argument, I needed to rig Electrum-NMC to also recognize the Namecoin Core style.&lt;/p&gt;

&lt;h2 id=&quot;ncdns&quot;&gt;ncdns&lt;/h2&gt;

&lt;p&gt;Rewriting ncdns’s integration with btcd was quite enjoyable, because modern btcd is much simpler to use than the ancient 2015 fork we were using previously.  This meant that I got to rip out quite a lot of code that was no longer needed.  Adding a stream isolation ID argument to ncdns’s lookup code that gets passed through to btcd was pretty easy, but there’s another important thing that was necessary.  ncdns caches responses for performance reasons, and it’s important to isolate the cache based on the stream isolation ID.  So, now ncdns creates a new cache for each new stream isolation ID that it sees.&lt;/p&gt;

&lt;h2 id=&quot;madns&quot;&gt;madns&lt;/h2&gt;

&lt;p&gt;madns is the authoritative DNS library that ncdns uses.  Even though ncprop279 doesn’t include a DNS server, it uses madns to handle various DNS protocol functionality (e.g. wildcard domains) that one would expect a naming system to handle.  Making madns pass a stream isolation ID to ncdns was pretty easy (though it required breaking the madns stable API).  But where would madns get the stream isolation ID from, since usually it receives requests via the DNS wire protocol?&lt;/p&gt;

&lt;p&gt;The solution Hugo and I found was to use EDNS0, which is a protocol extension mechanism in the DNS wire protocol.  I created an EDNS0 extension that allows DNS clients to specify a stream isolation ID; madns then passes it to ncdns.&lt;/p&gt;

&lt;p&gt;This has other interesting implications.  For example, a method of supporting stream isolation in the DNS wire protocol would be interesting to explore for the Tor DNS port, as well as Unbound and other locally-run DNS servers.&lt;/p&gt;

&lt;h2 id=&quot;ncprop279&quot;&gt;ncprop279&lt;/h2&gt;

&lt;p&gt;Modifying ncprop279 to pass a stream isolation ID to madns via EDNS0 was straightforward.  I also had to modify the Prop279 protocol a bit so that ncprop279 knows what stream isolation ID to use.  This was pretty easy.&lt;/p&gt;

&lt;h2 id=&quot;stemns&quot;&gt;StemNS&lt;/h2&gt;

&lt;p&gt;Making StemNS pass a stream isolation ID to ncprop279 was pretty easy.  But how to calculate the stream isolation ID?  Alas, simply using the SOCKS5 username+password wasn’t going to fly.  Remember how I said I was oversimplifying how Tor decides which connections to isolate?  In reality, there are a variety of different data fields associated with a connection made through Tor besides the SOCKS5 username/password.  Other fields that are relevant include the source IP (useful if you have multiple VM’s that access a common Tor instance and you want each VM to be stream-isolated) and the destination IP/port (useful if you have an application that talks to multiple servers via Tor’s Trans port and you want each server to be stream-isolated).  Additionally, Tor can be configured to enable or disable stream isolation for each of these fields independently.  And did I mention that Tor can run multiple listener ports, and each of these ports can have independent stream isolation settings?&lt;/p&gt;

&lt;p&gt;Trying to reliably compress this data into some kind of hash that we could use as a stream isolation ID seemed error-prone, so I instead copied Nick Mathewson’s English description of the logic that Tor itself uses to decide whether two given Tor streams can go over the same circuit, and I made StemNS store the relevant raw data.  StemNS deletes this data every time Tor cycles to a new identity (typically every 10 minutes, though this can vary by settings, and also happens immediately if the user clicks the New Identity button), so it shouldn’t eat up too much memory.  Whenever StemNS finds that a newly requested stream isn’t compatible with any of the streams previously assigned to a stream isolation ID, it makes up a new stream isolation ID and assigns the stream to that one.  Not too bad.&lt;/p&gt;

&lt;h2 id=&quot;tor&quot;&gt;Tor&lt;/h2&gt;

&lt;p&gt;StemNS talks to Tor via the control port protocol.  Unfortunately, quite a few of the relevant fields (including the SOCKS username/password) weren’t actually available via the control port’s &lt;code class=&quot;highlighter-rouge&quot;&gt;STREAM&lt;/code&gt; event, which is the event we need to hook in order to do name resolution.  The control port &lt;em&gt;does&lt;/em&gt; make the SOCKS username/password available via other events, but those events don’t fire until it’s too late to do name resolution.&lt;/p&gt;

&lt;p&gt;So I ended up patching Tor to make all of those fields available over the control port.  Because the control port protocol follows a spec, that also meant patching the spec.  After a few revisions of the spec and code as per review, Nick from Tor merged my patches.  Nightly builds of Tor now support the necessary control port features for StemNS to handle stream isolation properly.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Getting this implemented across the stack was an interesting and nontrivial endeavor, due to the large number of codebases involved, many of which involve third parties.  But I think it was worth it.  New release tags of the relevant codebases will hopefully be coming soon, which means we’ll finally be able to get rid of the scary warning against using Electrum-NMC with ncprop279.  Considering that Electrum-NMC syncs by far the quickest of any Namecoin name lookup client, which is a big deal given Tor’s bandwidth constraints, this is a major UX win.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/12/09/stream-isolation-for-namecoin-name-lookups.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/12/09/stream-isolation-for-namecoin-name-lookups.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>DNSSEC-HSTS v0.0.2 for Google Chrome Released</title>
        <description>&lt;p&gt;We’ve released DNSSEC-HSTS v0.0.2 for Google Chrome.  v0.0.2 is identical to v0.0.1 except for Chrome-related compatibility fixes; we are therefore not releasing v0.0.2 binaries for Firefox.&lt;/p&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#dnssec-hsts&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/11/25/dnssec-hsts-v0.0.2-chrome-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/11/25/dnssec-hsts-v0.0.2-chrome-released.html</guid>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>Building Electrum in rbm</title>
        <description>&lt;p&gt;As I’ve &lt;a href=&quot;/2019/08/25/fixing-a-gzip-reproducibility-bug-in-tor-browser-and-rbm.html&quot;&gt;discussed before&lt;/a&gt;, Namecoin is using Tor’s rbm-based build system for our various Go projects, such as ncdns and ncp11, in order to reduce the risk of supply-chain attacks.  I’m now looking into building Electrum in rbm as well.  Upstream Electrum’s Python tarball binaries aren’t reproducible at all, and their Windows binaries’ reproducible builds are heavily dependent on sketchy dependencies that I’d prefer not to trust.  rbm offers a potential solution.&lt;/p&gt;

&lt;p&gt;At this time, I’ve successfully gotten rbm to build an Electrum-NMC Python tarball that behaves pretty much the same as the standard build method (including the dependency bundling) – except that it should be substantially more reproducible.  The only two components that aren’t being built by my rbm descriptor are the Protobuf definition for the Payment Protocol (should be fixable easily, since I’m already building the Protobuf compiler) and the locales folder (hopefully easy to handle, I just haven’t looked at it yet).&lt;/p&gt;

&lt;p&gt;Building the Windows binaries in rbm is something I intend to look into later, though it’s not at the top of my priority queue.  Obviously, the intent is to contribute all of this work upstream to Electrum.&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/11/24/building-electrum-in-rbm.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/11/24/building-electrum-in-rbm.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC v3.3.8 Released</title>
        <description>&lt;p&gt;We’ve released Electrum-NMC v3.3.8.  This release includes a large number of improvements, mostly focused on performance (both initial syncup speed and name lookup latency) and anonymity (in particular support for Tor stream isolation).  Here’s what’s new since v3.3.7:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;From upstream Electrum:
    &lt;ul&gt;
      &lt;li&gt;fix some bugs with recent bump fee (RBF) improvements (#5483, #5502)&lt;/li&gt;
      &lt;li&gt;fix #5491: watch-only wallets could not bump fee in some cases&lt;/li&gt;
      &lt;li&gt;appimage: URLs could not be opened on some desktop environments (#5425)&lt;/li&gt;
      &lt;li&gt;faster tx signing for segwit inputs for really large txns (#5494)&lt;/li&gt;
      &lt;li&gt;A few other minor bugfixes and usability improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Namecoin-specific:
    &lt;ul&gt;
      &lt;li&gt;Fix signature creation for P2SH and SegWit names (Namecoin mainnet now supports P2SH and SegWit; these features should now work in Electrum-NMC, including in name transactions).  (Patch by Daniel Kraft.)&lt;/li&gt;
      &lt;li&gt;Fix an error that occurred when displaying the Manage Names tab if the blockchain is empty but the wallet is not.  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/2019/04/08/electrum-merkle-checkpoints.html&quot;&gt;Merkle checkpoints&lt;/a&gt; (improves initial syncup speed).  (Patch by Jeremy Rand; based on a patch by Roger Taylor.)&lt;/li&gt;
      &lt;li&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt; archive (improves binary download size).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Use random SOCKS authentication for stream isolation of connections to servers (improves performance and anonymity).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;stream_id&lt;/code&gt; argument to network RPC methods for stream isolation (improves performance and anonymity).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Building Electrum-NMC without wallet functionality, GUI functionality, and BIP70 functionality is now supported (improves binary download size).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Support a Namecoin-Core-style &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; argument in &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; RPC method (fixes compatibility with latest ncdns).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Retry name lookups with different server if NXDOMAIN returned (improves censorship resistance).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Download blockchain from different servers in parallel (improves initial syncup speed).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;from_coins&lt;/code&gt; argument to wallet RPC methods (improves anonymity).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Avoid returning outdated &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; results while the blockchain is still syncing (improves security of key revocations).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Avoid broadcasting &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; failed (improves reliability of name registration).  (Bug reported by DogHunter; patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Avoid &lt;code class=&quot;highlighter-rouge&quot;&gt;NotEnoughFunds&lt;/code&gt; error in CoinChooser if zero buckets are sufficient (fixes a spurious error during name registration).  (Bug reported by DogHunter; patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  (Patches by Daniel Kraft and Jeremy Rand.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#electrum-nmc&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/11/14/electrum-nmc-v3.3.8-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/11/14/electrum-nmc-v3.3.8-released.html</guid>
        
        <category>Releases</category>
        
        <category>Electrum Releases</category>
        
        
      </item>
    
      <item>
        <title>Namecoin will be at Oklahoma City Fall Peace Festival 2019</title>
        <description>&lt;p&gt;Namecoin will have a table at the &lt;a href=&quot;https://peacehouseok.org/outreach/fall-peace-festival/&quot;&gt;Oklahoma City Fall Peace Festival 2019&lt;/a&gt;.  The festival is Saturday, November 9, 2019, 10 AM - 4 PM, in the Downtown Civic Center Hall of Mirrors.  If you happen to be near the Oklahoma City area, feel free to come by and say hello.  I &lt;em&gt;might&lt;/em&gt; even have some cool demos of upcoming features.&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/11/06/namecoin-at-oklahoma-city-fall-peace-festival-2019.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/11/06/namecoin-at-oklahoma-city-fall-peace-festival-2019.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Matching tor-browser-build Conventions in ncdns-repro</title>
        <description>&lt;p&gt;As I’ve &lt;a href=&quot;/2019/08/25/fixing-a-gzip-reproducibility-bug-in-tor-browser-and-rbm.html&quot;&gt;discussed before&lt;/a&gt;, Namecoin is using Tor’s rbm-based build system for our various Go projects, such as ncdns and ncp11, in order to reduce the risk of supply-chain attacks.  Namecoin’s relevant Git repository, ncdns-repro, is heavily based on a Tor repo, tor-browser-build.  As we gained more experience with using rbm, it became more clear that even trivial deviations from upstream tor-browser-build can cause interoperability headaches.  So, I’ve been bringing ncdns-repro more in line with tor-browser-build conventions.  In particular, two noticeable changes have been made.&lt;/p&gt;

&lt;p&gt;First off, rbm divides the build scripts into “projects”.  For example, in Tor Browser, OpenSSL is a project, as is Tor, as is Firefox, as is GCC, etc.  Projects can depend on each other (for example, Tor depends on OpenSSL, and OpenSSL, Tor, and Firefox all depend on GCC).  When ncdns-repro was initially created, we didn’t really think much about the project names, and on a whim decided to the projects written in Go names that reflected their full package path.  For example, the Go package &lt;code class=&quot;highlighter-rouge&quot;&gt;golang.org/x/crypto&lt;/code&gt; was given an rbm project name of &lt;code class=&quot;highlighter-rouge&quot;&gt;golang.org,x,crypto&lt;/code&gt; in ncdns-repro.  In contrast, upstream tor-browser-build gives their Go-based projects abbreviated names, e.g. the aforementioned package was given an rbm project name of &lt;code class=&quot;highlighter-rouge&quot;&gt;goxcrypto&lt;/code&gt; [1].  Unfortunately, we figured out via experience that this causes problems, especially when ncdns-repro pulls in data from tor-browser-build (or vice versa) as a Git submodule, because it means that if a project from one repo wants to pull in a project from another repo as a dependency, the project names will be inconsistent.&lt;/p&gt;

&lt;p&gt;Second, ncdns-repro stored all of the Git hashes for its projects in a root-directory-level file called &lt;code class=&quot;highlighter-rouge&quot;&gt;hashlist&lt;/code&gt;, whereas upstream tor-browser-build stores them in the configuration file in each project’s directory.  The intent on our end was to make it easier to enumerate all of the Git hashes, but again, experience showed that this causes problems when Git submodules are used to let tor-browser-build and ncdns-repro share configuration data.&lt;/p&gt;

&lt;p&gt;As of now, ncdns-repro uses the same project naming conventions as tor-browser-build, and no longer uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;hashlist&lt;/code&gt; file.  This should improve interoperability of ncdns-repro with tor-browser-build going forward.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;

&lt;p&gt;[1] Insert snarky reference to Mark Karpeles here.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/11/05/matching-tor-browser-build-conventions-in-ncdns-repro.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/11/05/matching-tor-browser-build-conventions-in-ncdns-repro.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Porting DNSSEC-HSTS to Chrome</title>
        <description>&lt;p&gt;As was discussed in my 35C3 slides, DNSSEC-HSTS is a WebExtension that prevents sslstrip attacks by using DNSSEC.  DNSSEC-HSTS is already available for Firefox, but (as a WebExtension) it should be easily portable to Chrome.  Not so fast: Chrome has a number of quirks that make this nontrivial.&lt;/p&gt;

&lt;p&gt;First off, Chrome doesn’t support asynchronous blocking WebRequest, which is a feature that DNSSEC-HSTS uses in order to retrieve DNS data from a native application.  I was able to work around this by converting the native messaging code used in the Firefox version into a standard HTTP request for Chrome.  HTTP is substantially less secure than native messaging, but since the Chrome developers don’t seem to have any interest in security, we have to accept the reality that Chrome users will have less security than Firefox users.&lt;/p&gt;

&lt;p&gt;Second, Chrome doesn’t support SVG images as extension logos, which was causing Chrome to reject the DNSSEC-HSTS extension.  This was quite trivial to work around, since the Namecoin logo is also available as a PNG image.&lt;/p&gt;

&lt;p&gt;Third, Chrome doesn’t support loading unpacked extensions from the system.  (Chromium, as packaged by many GNU/Linux distros, does support this, but Google’s binaries do not.)  I was able to work around this by packaging DNSSEC-HSTS as a CRX file.  Unfortunately, I’m not aware of any existing tools for supporting detached signatures for CRX files, which means that the CRX version of DNSSEC-HSTS will probably not be possible to build reproducibly.  This is unfortunate, but again, we have to accept the reality that the Chrome developers simply don’t care about security, so Chrome users are going to have less security than Firefox users.&lt;/p&gt;

&lt;p&gt;With these changes, DNSSEC-HSTS appears to work on Chrome; the changes will be included in the next release.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/10/23/porting-dnssec-hsts-to-chrome.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/10/23/porting-dnssec-hsts-to-chrome.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC v3.3.7 Released</title>
        <description>&lt;p&gt;We’ve released Electrum-NMC v3.3.7.  Here’s what’s new since v3.3.6.1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;From upstream Electrum:
    &lt;ul&gt;
      &lt;li&gt;The AppImage Linux x86_64 binary and the Windows setup.exe (so now all Windows binaries) are now built reproducibly.&lt;/li&gt;
      &lt;li&gt;Bump fee (RBF) improvements: Implemented a new fee-bump strategy that can add new inputs, so now any tx can be fee-bumped (d0a4366). The old strategy was to decrease the value of outputs (starting with change).  We will now try the new strategy first, and only use the old as a fallback (needed e.g. when spending “Max”).&lt;/li&gt;
      &lt;li&gt;CoinChooser improvements:
        &lt;ul&gt;
          &lt;li&gt;more likely to construct txs without change (when possible)&lt;/li&gt;
          &lt;li&gt;less likely to construct txs with really small change (e864fa5)&lt;/li&gt;
          &lt;li&gt;will now only spend negative effective value coins when beneficial for privacy (cb69aa8)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;fix long-standing bug that broke wallets with &amp;gt;65k addresses (#5366)&lt;/li&gt;
      &lt;li&gt;Windows binaries: we now build the PyInstaller boot loader ourselves, as this seems to reduce anti-virus false positives (1d0f679)&lt;/li&gt;
      &lt;li&gt;Android: (fix) BIP70 payment requests could not be paid (#5376)&lt;/li&gt;
      &lt;li&gt;Android: allow copy-pasting partial transactions from/to clipboard&lt;/li&gt;
      &lt;li&gt;Fix a performance regression for large wallets (c6a54f0)&lt;/li&gt;
      &lt;li&gt;Qt: fix some high DPI issues related to text fields (37809be)&lt;/li&gt;
      &lt;li&gt;Trezor:
        &lt;ul&gt;
          &lt;li&gt;allow bypassing “too old firmware” error (#5391)&lt;/li&gt;
          &lt;li&gt;use only the Bridge to scan devices if it is available (#5420)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;hw wallets: (known issue) on Win10-1903, some hw devices (that also have U2F functionality) can only be detected with Administrator privileges. (see #5420 and #5437)  A workaround is to run as Admin, or for Trezor to install the Bridge.&lt;/li&gt;
      &lt;li&gt;Several other minor bugfixes and usability improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Namecoin-specific:
    &lt;ul&gt;
      &lt;li&gt;Fix issue affecting plugin detection.  If you were encountering hardware wallet bugs, they might be fixed now.&lt;/li&gt;
      &lt;li&gt;Various rebranding fixes.&lt;/li&gt;
      &lt;li&gt;Various code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#electrum-nmc&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/09/27/electrum-nmc-v3.3.7-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/09/27/electrum-nmc-v3.3.7-released.html</guid>
        
        <category>Releases</category>
        
        <category>Electrum Releases</category>
        
        
      </item>
    
      <item>
        <title>Fixing a gzip Reproducibility Bug in Tor Browser and rbm</title>
        <description>&lt;p&gt;As I’ve &lt;a href=&quot;/2019/08/06/decoupling-ncdns-go-versions.html&quot;&gt;discussed before&lt;/a&gt;, Namecoin is using Tor’s rbm-based build system for our various Go projects, such as ncdns and ncp11, in order to reduce the risk of supply-chain attacks.  Naturally, one of the important ways to test a reproducible build system is to build a binary twice in a row and see if the hashes are the same.  If the hashes don’t match, then tools like &lt;a href=&quot;https://diffoscope.org/&quot;&gt;Diffoscope&lt;/a&gt; can be used to figure out what the source of the reproducibility failure is.  Now that Namecoin’s usage of rbm is reasonably stable (i.e. working binaries are produced for most of Namecoin’s software now), it’s a good time to look into how reproducible our binaries are.&lt;/p&gt;

&lt;p&gt;So, I tried building ncdns twice to see if I got matching hashes.  Alas, the hashes did not match.  Plugging the results into Diffoscope yielded the information that the files within the &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; archive were indeed identical, but that the time value embedded in the gzip header was nonreproducible.  Given that this didn’t seem like anything I had screwed up on my end, I tried building a &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; binary from upstream Tor Browser.  Same issue: nonreproducible binaries due to gzip header time values.&lt;/p&gt;

&lt;p&gt;I also observed that &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt; binaries weren’t affected by the issue.  This would explain why upstream Tor hadn’t noticed or fixed the bug on their end – all of their end-user binaries are &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt;; &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; is only used by Tor for intermediate binaries, which probably aren’t tested for reproducibility as thoroughly.  Obviously, Namecoin could work around the issue by switching to &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt; for end-user binaries (I was planning to do this anyway since &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt; archives have much better compression), but since Namecoin likes to be a good neighbor, I figured it was a good idea to report the bug upstream to Tor.&lt;/p&gt;

&lt;p&gt;After some discussion with Nicolas from Tor (lead developer of rbm), we converged on a 2-line patch to rbm that should resolve the issue.  Once this patch is merged upstream, Namecoin binaries will be substantially closer to reproducibility, and as a bonus, the intermediate binaries produced by Tor will probably be reproducible too.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/08/25/fixing-a-gzip-reproducibility-bug-in-tor-browser-and-rbm.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/08/25/fixing-a-gzip-reproducibility-bug-in-tor-browser-and-rbm.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncdns v0.0.9.2 Released</title>
        <description>&lt;p&gt;We’ve released ncdns v0.0.9.2.  List of changes in v0.0.9.2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All platforms:
    &lt;ul&gt;
      &lt;li&gt;New build system based on The Tor Project’s rbm.  This paves the way for reproducible builds.&lt;/li&gt;
      &lt;li&gt;Add an optional mode to &lt;code class=&quot;highlighter-rouge&quot;&gt;generate_nmc_cert&lt;/code&gt; that creates a name-constrained CA cert instead of an end-entity cert.  This mode is required for Tor Browser TLS support.&lt;/li&gt;
      &lt;li&gt;Add “URL list” output format to &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdumpzone&lt;/code&gt;.  This paves the way for a decentralized search engine for Namecoin websites.&lt;/li&gt;
      &lt;li&gt;Make Namecoin RPC timeout configurable.  This improves compatibility with Tor Browser.&lt;/li&gt;
      &lt;li&gt;Move &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; to its own repo.  This improves compatibility with Tor Browser.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows:
    &lt;ul&gt;
      &lt;li&gt;Automatically re-run &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrictnss&lt;/code&gt; when NSS is updated; this improves TLS support for Firefox.&lt;/li&gt;
      &lt;li&gt;Upgrade dnssec-keygen to v9.13.3.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;New projects:
    &lt;ul&gt;
      &lt;li&gt;DNSSEC-HSTS v0.0.1: A WebExtension that prevents sslstrip attacks for Namecoin websites that support TLS.  See my 35C3 slides for more details.&lt;/li&gt;
      &lt;li&gt;ncp11 v0.0.1: Enables Namecoin TLS in browsers that support PKCS#11, such as Tor Browser.  See my 35C3 slides for more details.&lt;/li&gt;
      &lt;li&gt;ncprop279 v0.0.1: Enables Namecoin resolution in Tor; somewhat smaller and more efficient than dns-prop279.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Code quality improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#ncdns&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/08/15/ncdns-v0.0.9.2-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/08/15/ncdns-v0.0.9.2-released.html</guid>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
  </channel>
</rss>
