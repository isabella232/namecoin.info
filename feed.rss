<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>https://namecoin.org//</link>
    <atom:link href="https://namecoin.org//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 24 Nov 2018 22:12:41 +0000</pubDate>
    <lastBuildDate>Sat, 24 Nov 2018 22:12:41 +0000</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>ConsensusJ WalletAppKit Support Merged by Upstream; ConsensusJ-Namecoin v0.3.2.1 Released</title>
        <description>&lt;p&gt;One of the main reasons that ConsensusJ-Namecoin is still in the &lt;a href=&quot;/download/betas/&quot;&gt;Beta Downloads section&lt;/a&gt; of Namecoin.org is that it carries several patches against upstream ConsensusJ that haven’t yet been upstreamed.  This presents two resultant issues:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;There are fewer eyes on the ConsensusJ-Namecoin code.&lt;/li&gt;
  &lt;li&gt;ConsensusJ-Namecoin takes some extra time to benefit from new code from upstream, because I need to manually rebase against that new code (and fix whatever conflicts might show up).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each of these issues reduces the security of ConsensusJ-Namecoin, which means we should fix them by getting our patches upstreamed.  We’ve been making some progress on this recently, and last month we saw some additional progress, as I’ve submitted the WalletAppKit support from ConsensusJ-Namecoin to upstream, and upstream has merged it.  &lt;em&gt;Mommy, what’s a WalletAppKit?&lt;/em&gt;  The BitcoinJ library, on which ConsensusJ is based, includes quite a few different modes of operation.  The most well-known mode is a mode that downloads blockchain headers and does SPV validation of them.  A lesser-known mode simply opens P2P connections to other Bitcoin nodes and lets the user figure out what to do with those P2P connections.  The latter mode (known as PeerGroup) is utilized as a component of the former mode (known as WalletAppKit).  Prior to my pull request, upstream ConsensusJ’s daemons (&lt;code class=&quot;highlighter-rouge&quot;&gt;bitcoinj-daemon&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;namecoinj-daemon&lt;/code&gt;) used PeerGroup mode, and simply assumed (for the purposes of the &lt;code class=&quot;highlighter-rouge&quot;&gt;bitcoind&lt;/code&gt;-style RPC API) that the peers they’ve connected to are telling the truth.  ConsensusJ-Namecoin, meanwhile, uses WalletAppKit mode, so that we can be reasonably confident (within SPV’s threat model [1]) that the name transactions we’re given are actually from the chain with the most work.&lt;/p&gt;

&lt;p&gt;As expected, upstream ConsensusJ developer Sean Gilligan noticed some things that could be improved as part of the code review process (which is exactly why we want to get this stuff upstreamed).  I made the relevant changes, and the code is merged.  Now that WalletAppKit is merged, the most likely next candidate for upstreaming will be the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; RPC call, and associated backend code.  It’s likely that the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; upstreaming will focus on &lt;code class=&quot;highlighter-rouge&quot;&gt;leveldbtxcache&lt;/code&gt; mode, for a few reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;leveldbtxcache&lt;/code&gt; mode is by far the most secure SPV mode for Namecoin name lookups (substantially more secure than any SPV clients that exist in the Bitcoin world).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;leveldbtxcache&lt;/code&gt; mode has much faster lookups than the other &lt;code class=&quot;highlighter-rouge&quot;&gt;libdohj-namecoin&lt;/code&gt; name lookup methods, which use an API server.&lt;/li&gt;
  &lt;li&gt;The API server that &lt;code class=&quot;highlighter-rouge&quot;&gt;libdohj-namecoin&lt;/code&gt; uses by default when not in &lt;code class=&quot;highlighter-rouge&quot;&gt;leveldbtxcache&lt;/code&gt; mode is WebBTC, which has been down for maintenance for quite a while.  Also, WebBTC is problematic due to its lack of consensus safety (it re-implements the consensus rules instead of relying on Namecoin Core’s consensus implementation, and this has caused it to chainfork from the Bitcoin chain before).&lt;/li&gt;
  &lt;li&gt;The API-server security model isn’t actually a bad one (it’s a lot easier to Sybil the P2P network than to impersonate an API server), but I tend to think that Electrum is a better (and more standardized) approach to the API-server security model than the &lt;code class=&quot;highlighter-rouge&quot;&gt;libdohj-namecoin&lt;/code&gt; implementation.  It’s conceivable that we could combine the two approaches in the future (maybe make &lt;code class=&quot;highlighter-rouge&quot;&gt;libdohj-namecoin&lt;/code&gt; query an Electrum instance in addition to the P2P network?), but this is not exactly a high priority for our R&amp;amp;D budget given that &lt;code class=&quot;highlighter-rouge&quot;&gt;leveldbtxcache&lt;/code&gt; mode isn’t in any immediate danger of encountering scaling problems.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully we’ll see more progress on this front in the near future.  In the meantime, I’ve released ConsensusJ-Namecoin v0.3.2.1 (on the &lt;a href=&quot;/download/betas/#consensusj-namecoin&quot;&gt;Beta Downloads&lt;/a&gt; page as usual), which incorporates the latest improvements from upstream ConsensusJ (including Sean’s code review of my WalletAppKit support).&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;

&lt;p&gt;[1] The SPV threat model makes a security assumption that the chain with the most work is also a valid chain.  This is, of course, not guaranteed to be a correct assumption, although there are some game-theoretic reasons to believe that as long as an economically strong fraction of the network is using full nodes, then SPV is safe for everyone else.  You should definitely run a full node for your Namecoin resolution if you have the ability to do so; you’ll be more secure yourself, and you’ll also be making the network more secure for anyone who’s using an SPV node.&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/11/24/consensusj-walletappkit-merged-upstream-v0.3.2.1-released.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/11/24/consensusj-walletappkit-merged-upstream-v0.3.2.1-released.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin's Jeremy Rand will be a speaker at Internet Governance Forum 2018</title>
        <description>&lt;p&gt;I (Jeremy Rand) will be a speaker at &lt;a href=&quot;https://www.intgovforum.org/multilingual/&quot;&gt;Internet Governance Forum 2018&lt;/a&gt;, November 12 - November 14, in Paris (chartered by the UN and hosted at the UNESCO headquarters).  I’ll be speaking on the &lt;a href=&quot;https://www.intgovforum.org/multilingual/content/igf-2018-ws-408-dns-enhancements-and-alternatives-for-the-future-internet&quot;&gt;“DNS enhancements and alternatives for the Future Internet” panel&lt;/a&gt; at 9:00 AM - 10:30 AM (local time) on Monday, November 12.  Huge thanks to Chiara Petrioli from Università degli Studi di Roma La Sapienza for inviting me!&lt;/p&gt;

&lt;p&gt;While I’m in Paris, I’ll also be on an &lt;a href=&quot;https://www.eventbrite.com/e/internet-of-trust-tickets-51945113232?aff=ebdssbdestsearch&quot;&gt;“Internet of Trust” panel&lt;/a&gt; at 6:30 PM - 8:30 PM (local time) on Tuesday, November 13, hosted by Jean-Christophe Finidori.  Thanks to Jean-Christophe for inviting me!&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/11/09/internet-governance-forum-2018.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/11/09/internet-governance-forum-2018.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Decentralized Web Summit 2018 Summary</title>
        <description>&lt;p&gt;As was &lt;a href=&quot;/2018/07/23/decentralized-web-summit-2018.html&quot;&gt;previously announced&lt;/a&gt;, I (Jeremy Rand) represented Namecoin at &lt;a href=&quot;https://decentralizedweb.net/&quot;&gt;Decentralized Web Summit 2018&lt;/a&gt; in San Francisco.&lt;/p&gt;

&lt;p&gt;This time, the focus of my attendance was less on giving talks and more about talking with other attendees about possible collaborations.  As usual, I won’t be publicly disclosing the content of those conversations, because I want people to be able to talk to me at conferences without worrying that off-the-cuff comments will be broadcast to the public.&lt;/p&gt;

&lt;p&gt;That said, I did give a lightning talk.  You can view the &lt;a href=&quot;https://decentralizedweb.net/videos/lightning-talks-new-discoveries-session-1/&quot;&gt;official recording page&lt;/a&gt; (JavaScript required, yuck!), or you can view &lt;a href=&quot;https://ia801508.us.archive.org/11/items/dweb-8_1_18_HyperRoom_lightningTalksNewDiscoveries-1/8_1_18_HyperRoom_lightning%20Talks%20New%20Discoveries-1.mp4&quot;&gt;the video file itself&lt;/a&gt; (no JavaScript required; my lightning talk is at 24:15 - 32:08).&lt;/p&gt;

&lt;p&gt;Thanks to Internet Archive for inviting me, we’re looking forward to the next event!&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/11/02/decentralized-web-summit-2018-summary.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/11/02/decentralized-web-summit-2018-summary.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>New York Times' Allegation of Saudi Intelligence Targeting Namecoin Developer Is Consistent with 2013 Reporting by Moxie Marlinspike</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.nytimes.com/2018/10/20/us/politics/saudi-image-campaign-twitter.html&quot;&gt;The New York Times published what appears to be a highly interesting scoop&lt;/a&gt; on October 20, 2018.  The New York Times article alleges that the government behind the State Sponsored Actors attack on circa 40 Twitter users (most of whom, including me, were free software developers and privacy activists) was none other than Saudi Arabia.  Those of us who were &lt;a href=&quot;https://www.state-sponsored-actors.org/&quot;&gt;notified of the attack in 2015&lt;/a&gt; have been trying to find out more ever since, with no luck until now.&lt;/p&gt;

&lt;p&gt;As a precaution against censorship risk, the relevant subsection of the article is reproduced below:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Suspected Mole Inside Twitter&lt;/p&gt;

  &lt;p&gt;Twitter executives first became aware of a possible plot to infiltrate user accounts at the end of 2015, when Western intelligence officials told them that the Saudis were grooming an employee, Ali Alzabarah, to spy on the accounts of dissidents and others, according to five people briefed on the matter. They requested anonymity because they were not authorized to speak publicly.&lt;/p&gt;

  &lt;p&gt;Mr. Alzabarah had joined Twitter in 2013 and had risen through the ranks to an engineering position that gave him access to the personal information and account activity of Twitter’s users, including phone numbers and I.P. addresses, unique identifiers for devices connected to the internet.&lt;/p&gt;

  &lt;p&gt;The intelligence officials told the Twitter executives that Mr. Alzabarah had grown closer to Saudi intelligence operatives, who eventually persuaded him to peer into several user accounts, according to three of the people briefed on the matter.&lt;/p&gt;

  &lt;p&gt;Caught off guard by the government outreach, the Twitter executives placed Mr. Alzabarah on administrative leave, questioned him and conducted a forensic analysis to determine what information he may have accessed. They could not find evidence that he had handed over Twitter data to the Saudi government, but they nonetheless fired him in December 2015.&lt;/p&gt;

  &lt;p&gt;Mr. Alzabarah returned to Saudi Arabia shortly after, taking few possessions with him. He now works with the Saudi government, a person briefed on the matter said.&lt;/p&gt;

  &lt;p&gt;A spokesman for Twitter declined to comment. Mr. Alzabarah did not respond to requests for comment, nor did Saudi officials.&lt;/p&gt;

  &lt;p&gt;On Dec. 11, 2015, Twitter sent out safety notices to the owners of a few dozen accounts Mr. Alzabarah had accessed. Among them were security and privacy researchers, surveillance specialists, policy academics and journalists. A number of them worked for the Tor project, an organization that trains activists and reporters on how to protect their privacy. Citizens in countries with repressive governments have long used Tor to circumvent firewalls and evade government surveillance.&lt;/p&gt;

  &lt;p&gt;“As a precaution, we are alerting you that your Twitter account is one of a small group of accounts that may have been targeted by state-sponsored actors,” the emails from Twitter said.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before I go any further, it’s important to remember that the New York Times’s source for these claims appears to be anonymous intelligence officials, and caution is warranted when evaluating claims by anonymous intelligence officials (&lt;em&gt;cough cough Iraq cough cough&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;That said, let’s assume for the purpose of argument that the New York Times’s allegation is correct, and Saudi Arabia was behind the attack.  What’s the motive?  It’s certainly plausible that Saudi Arabia would have an interest in Tor developers, but how did I get targeted?  Between 2013 and 2015 (when Alzabarah allegedly worked at Twitter), there were three main things I was spending my time on:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Console game hacking research for my undergraduate honors thesis.  Highly unlikely that Saudi Arabia would care about this.&lt;/li&gt;
  &lt;li&gt;Machine learning, ranking, and privacy research for the YaCy search engine, which would later evolve into my master’s thesis.  I suppose it’s technically possible that Saudi Arabia would find this interesting (since censorship resistance and privacy are known to annoy the Saudi government), but this work was relatively low-profile (it was only discussed within my classes at my university, a couple of IRC channels with small audiences, and a couple of posts on the YaCy forum).  Furthermore, no code was publicly available during this time period (which probably decreased any possible Saudi interest), and YaCy was simply too immature to credibly be considered a threat at that time (and probably even now).&lt;/li&gt;
  &lt;li&gt;TLS PKI research for Namecoin.  Specifically, my fork of Moxie Marlinspike’s Convergence (a tool for customizing TLS certificate validation in Firefox) was created in 2013, my TLS PKI research with Namecoin continued through the present day, and this research received a decent amount of public attention (including being presented at a poster session at Google’s New York office in 2013, and being the subject of a fundraising campaign in 2014).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yeah, about that last one.  It’s pretty clearly the one that would be most likely to attract attention from a state-sponsored actor (since it prevents state actors from compromising TLS certificate authorities in order to intercept encrypted communications), but why Saudi Arabia?  I had been previously speculating that the involved state might be Iran, seeing as they’ve been publicly accused of compromising TLS certificate authorities in the past.  I was not aware of any similar cases where Saudi Arabia was caught doing this.&lt;/p&gt;

&lt;p&gt;However, then I ran across &lt;a href=&quot;https://moxie.org/blog/saudi-surveillance/&quot;&gt;a highly interesting article from the aforementioned Moxie Marlinspike&lt;/a&gt; dated May 13, 2013.  Again, as a precaution against censorship risk, the relevant parts are reproduced below:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Last week I was contacted by an agent of Mobily, one of two telecoms operating in Saudi Arabia, about a surveillance project that they’re working on in that country. Having published two reasonably popular MITM tools, it’s not uncommon for me to get emails requesting that I help people with their interception projects. I typically don’t respond, but this one (an email titled “Solution for monitoring encrypted data on telecom”) caught my eye.&lt;/p&gt;

  &lt;p&gt;I was interested to know more about what they were up to, so I wrote back and asked. After a week of correspondence, I learned that they are organizing a program to intercept mobile application data, with specific interest in monitoring:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Mobile Twitter&lt;/li&gt;
    &lt;li&gt;Viber&lt;/li&gt;
    &lt;li&gt;Line&lt;/li&gt;
    &lt;li&gt;WhatsApp&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;I was told that the project is being managed by Yasser D. Alruhaily, Executive Manager of the Network &amp;amp; Information Security Department at Mobily. The project’s requirements come from “the regulator” (which I assume means the government of Saudi Arabia). The requirements are the ability to both monitor and block mobile data communication, and apparently they already have blocking setup.&lt;/p&gt;

  &lt;p&gt;[snip]&lt;/p&gt;

  &lt;p&gt;One of the design documents that they volunteered specifically called out compelling a CA in the jurisdiction of the UAE or Saudi Arabia to produce SSL certificates that they could use for interception.&lt;/p&gt;

  &lt;p&gt;[snip]&lt;/p&gt;

  &lt;p&gt;Their level of sophistication didn’t strike me as particularly impressive, and their existing design document was pretty confused in a number of places, but Mobily is a company with over 5 billion in revenue, so I’m sure that they’ll eventually figure something out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, let’s look at some things that I found notable about this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Saudi Arabia &lt;strong&gt;was&lt;/strong&gt; interested in doing TLS interception via a malicious CA.  There’s your motive.&lt;/li&gt;
  &lt;li&gt;The email exchange between Mobily and Moxie about interest in doing TLS interception was in 2013, the same year that Alzabarah allegedly began working for Twitter.&lt;/li&gt;
  &lt;li&gt;I don’t know how long it’s expected to take a “confused” and “[not] particularly impressive” development team at a well-funded telecom to design TLS interception infrastructure, but it seems totally plausible that this Mobily project, or related projects at other Saudi telecoms or the Saudi government, continued through a significant portion of Alzabarah’s alleged employment at Twitter, possibly as late as when Alzabarah allegedly obtained access to user data in his engineering position at Twitter.&lt;/li&gt;
  &lt;li&gt;Moxie is the original author of Convergence, but stopped maintaining it in 2012.  My fork was created in 2013, and by 2014 my fork was the only maintained fork (after Mike Kazantsev stopped maintaining his Convergence-Extra fork).  So anyone who was interested in Moxie’s work with TLS may very well have also been aware of me.&lt;/li&gt;
  &lt;li&gt;Surveillance of Twitter is specifically mentioned in the email exchange between Mobily and Moxie.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, as far as I can tell, the New York Times’s allegation that Saudi intelligence targeted my Twitter account seems to be quite consistent with the 2013 reporting by Moxie.&lt;/p&gt;

&lt;p&gt;That said, there is an unexplained loose end.  Most major browsers implemented TLS certificate pinning since 2013, and certificate pinning would probably have made it quite obvious if Saudi Arabia were using rogue TLS certificates to intercept communications with a large site like Twitter.  Ditto for certificate transparency.  So, even if Saudi intelligence was pursuing this project in 2013, it would be surprising if they’re still doing so.&lt;/p&gt;

&lt;p&gt;If anyone has further information about the State Sponsored Actors attack, I strongly encourage you to share it with journalists.  In particular, anonymously sending primary source documents to WikiLeaks would be a highly beneficial action.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/11/01/nytimes-allegation-saudi-targeting-namecoin-moxie.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/11/01/nytimes-allegation-saudi-targeting-namecoin-moxie.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>cross_sign_name_constraint_tool v0.0.3 and tlsrestrict_nss_tool v0.0.3 Released</title>
        <description>&lt;p&gt;We’ve released &lt;code class=&quot;highlighter-rouge&quot;&gt;cross_sign_name_constraint_tool&lt;/code&gt; v0.0.3 and &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; v0.0.3.  Here’s what’s new:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Both &lt;code class=&quot;highlighter-rouge&quot;&gt;cross_sign_name_constraint_tool&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt;:
    &lt;ul&gt;
      &lt;li&gt;Properly handle input CA’s that don’t have a CommonName.&lt;/li&gt;
      &lt;li&gt;Code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; only:
    &lt;ul&gt;
      &lt;li&gt;Compatibility fixes for Windows:
        &lt;ul&gt;
          &lt;li&gt;Stop using &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; to enable CKBI visibility, since no such command exists on Windows.&lt;/li&gt;
          &lt;li&gt;Pass cert nicknames in NSS &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; batch files instead of as command-line args, because Windows doesn’t handle Unicode command-line args correctly.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Error when CKBI appears to be empty; this is usually a symptom of missing libraries.&lt;/li&gt;
      &lt;li&gt;Communicate with &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; via PEM instead of DER; this should reduce the risk of concatenated certs not having a clearly defined boundary.&lt;/li&gt;
      &lt;li&gt;Fix compatibility with Go 1.11 and higher.&lt;/li&gt;
      &lt;li&gt;Fix cert deletion on Fedora 28 and higher (and probably various other platforms too).&lt;/li&gt;
      &lt;li&gt;Partial support for bundling both 32-bit and 64-bit &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; on Windows.&lt;/li&gt;
      &lt;li&gt;Partial support for continuously syncing an NSS DB on Windows whenever CKBI is updated (not yet ready for use; will be included in a future ncdns release).&lt;/li&gt;
      &lt;li&gt;Code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#cross_sign_name_constraint_tool&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Oct 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/10/31/cross-sign-name-constraint-tlsrestrict-nss-tools-v0.0.3-released.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/10/31/cross-sign-name-constraint-tlsrestrict-nss-tools-v0.0.3-released.html</guid>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>Namecoin's Daniel Kraft will be a speaker at Malta Blockchain Summit 2018</title>
        <description>&lt;p&gt;Namecoin’s Chief Scientist Daniel Kraft will be a speaker at &lt;a href=&quot;https://maltablockchainsummit.com/&quot;&gt;Malta Blockchain Summit 2018&lt;/a&gt;, October 31 - November 3.  Daniel is on the “Permissioned vs Permissionless Blockchains” panel at 9:30-9:50 on November 2.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/10/29/malta-blockchain-summit-2018.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/10/29/malta-blockchain-summit-2018.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ElectrumX: Name Script Support Merged by Upstream</title>
        <description>&lt;p&gt;A few months ago I wrote about &lt;a href=&quot;/2018/07/15/electrumx-name-scripts.html&quot;&gt;name script support in ElectrumX&lt;/a&gt;.  Neil from ElectrumX has now merged that code into ElectrumX master branch.  I’ve also notified the operator of the public ElectrumX Namecoin instance, so hopefully soon it will be possible to use Electrum-NMC’s name script support with the default public ElectrumX instance.  Kudos to Neil for accepting the pull request!&lt;/p&gt;

&lt;p&gt;(This is probably a good time to remind readers that we need more ElectrumX instances… please consider running one if you have a server with spare resources!)&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs and NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/10/25/electrumx-name-scripts-merged.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/10/25/electrumx-name-scripts-merged.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC: Name Registration GUI</title>
        <description>&lt;p&gt;Now that &lt;a href=&quot;/2018/10/09/electrum-nmc-name-update-gui.html&quot;&gt;Electrum-NMC GUI support for updating names&lt;/a&gt; is a thing, it’s time to advance to name registration GUI support.&lt;/p&gt;

&lt;p&gt;Whereas the &lt;code class=&quot;highlighter-rouge&quot;&gt;Renew Name&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Configure Name...&lt;/code&gt; buttons each map directly to a single sequence of two console commands (&lt;code class=&quot;highlighter-rouge&quot;&gt;name_update&lt;/code&gt; followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;broadcast&lt;/code&gt;), which makes their implementation relatively straightforward, &lt;em&gt;registering&lt;/em&gt; a name is more complicated, due to the two-step procedure in which a salted commitment (&lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt;) is broadcast 12 blocks before the name registration itself (&lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt;) in order to prevent frontrunning attacks.  Given that the name registration procedure was going to be a bit complicated, it seemed like a good idea to create a new console command for this purpose, so that the GUI can maintain a simple mapping to console commands.&lt;/p&gt;

&lt;p&gt;In fact, I ended up creating a few different console commands.  The first console command (&lt;code class=&quot;highlighter-rouge&quot;&gt;queuetransaction&lt;/code&gt;) is used for storing transactions in the wallet that are intended to be broadcasted in the future once a trigger condition has occurred.  An entry in the transaction queue consists of:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Either a transaction ID or a name identifier&lt;/li&gt;
  &lt;li&gt;A depth (in blocks)&lt;/li&gt;
  &lt;li&gt;A raw transaction&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When the specified transaction ID (or the most recent transaction for the specified name identifier) attains sufficient confirmations in the blockchain, the raw transaction will be broadcasted.  In order to register a name, the following transaction queue entry would be used:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Transaction ID of &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Depth of 12 blocks&lt;/li&gt;
  &lt;li&gt;Raw transaction of &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are some other use cases for the transaction queue, such as automatically renewing names when they’re approaching expiration, or automatically registering a name if/when its previous owner lets them expire.  For now, we’ll focus on name registration.&lt;/p&gt;

&lt;p&gt;Next up was a console command &lt;code class=&quot;highlighter-rouge&quot;&gt;updatequeuedtransactions&lt;/code&gt;, which examines each of the transaction queue entries, and broadcasts and unqueues each of the entries whose trigger condition has been achieved.  This wasn’t too complicated, although I did do some deliberating on when exactly to unqueue a transaction.  In theory, an ElectrumX server could claim to have broadcasted a transaction but not actually do so, and if Electrum-NMC unqueues a transaction in this case, then the transaction will never actually get mined.  A sledgehammer-style workaround here would be to try to re-broadcast each block until Electrum-NMC sees an SPV proof indicating that the transaction has, say, 12 confirmations (indicating that it very likely did get broadcasted and mined).  However, I ended up deciding that this kind of attack is simply out of scope for the transaction queue, since the attack can apply equally well to arbitrary other transactions that get broadcasted.  Solving this attack is probably something better done in upstream Electrum than by whatever hacky and poorly peer-reviewed approach we’d take in Electrum-NMC.  So, we unqueue the transaction as soon as it’s broadcast.  Easy enough.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;updatequeuedtransactions&lt;/code&gt; is cool, but we want this to happen every block, automatically.  So the next step was to add a hook that calls &lt;code class=&quot;highlighter-rouge&quot;&gt;updatequeuedtransactions&lt;/code&gt; whenever a new block arrives.  This should have been simple, but I quickly noticed that whenever this hook resulted in broadcasting a transaction, an assertion error would get logged, and the transaction would never broadcast.  A quick inspection showed that the &lt;code class=&quot;highlighter-rouge&quot;&gt;broadcast&lt;/code&gt; console command should never be called from the network thread, and the hook was indeed being called from the network thread (where the incoming block event came from).  After a little bit of tinkering, I determined that the simplest approach was just to re-emit the incoming block event to the GUI thread, and then call &lt;code class=&quot;highlighter-rouge&quot;&gt;updatequeuedtransactions&lt;/code&gt; from the GUI thread’s event.&lt;/p&gt;

&lt;p&gt;Okay, so the groundwork is laid, now to actually implement a console command for name registration.  In theory, this should be easy: it should consist of &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;broadcast&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;queuetransaction&lt;/code&gt;, right?  Actually, things are a lot more complicated, because if any of the currency inputs to the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; transaction get spent in the 12-block interval before it gets broadcasted, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; will be rejected as a double-spend.  Hypothetically, I could have fixed this by abusing the address-freezing functionality of Electrum, but there’s a better way: pure name transactions.&lt;/p&gt;

&lt;p&gt;Pure name transactions are a highly interesting form of Namecoin transaction, where currency is embedded inside a name instead of being kept in a separate input/output.  This works because the 0.01 NMC cost of registering a name is actually enforced as a &lt;em&gt;minimum&lt;/em&gt; amount of a name output, not an &lt;em&gt;exact&lt;/em&gt; amount.  You can put, for example, 0.03 NMC into a name output, and you can later withdraw the excess 0.02 NMC by spending that name output.  As long as the amount never drops below the 0.01 NMC minimum, the Namecoin consensus rules don’t care.  There are two major use cases for pure name transactions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Reducing transaction size.  Obviously, 1 input and 1 output will yield a smaller transaction than 2 inputs and 2 outputs, which reduces blockchain bloat and transaction fees.  (As far as I know, this use case was first described in a discussion at ICANN58 about Namecoin scalability.)&lt;/li&gt;
  &lt;li&gt;Keeping coins organized.  If you’ve ever tried to renew more than 25 names in Namecoin Core at once, you might have noticed that you got an error about a long chain of unconfirmed transactions.  This happens because each renewal uses a currency input that’s the currency output of the previous renewal, forming a long chain of transactions.  The Namecoin Core error happens because Namecoin Core considers it risky to have a chain of more than 25 unconfirmed transactions (if the first one never got confirmed, all the others would be stuck too).  However, with pure name transactions, each name has its own currency coins, which are temporarily earmarked for use with that name, so operations with different names can’t interfere with each other.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The latter use case is what we’ll use here.  We create a &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; transaction with no currency outputs, but whose name output has an extra 0.005 NMC attached to it.  When we create the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; transaction, we instruct Electrum-NMC’s coin selection algorithm to only use the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; input, and to pay any fees out of the extra 0.005 NMC.  (Coincidentally, I’m pretty sure that Mikhail’s Namecoin-Qt client, from the era before Namecoin Core, did the same thing.)  As a result, we can be confident that no accidental double-spends will occur, because we definitely won’t be spending the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; output before we broadcast the &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; transaction.  Interestingly, making this work actually needed some minor changes to the Electrum-NMC coin selection algorithm, because parts of the coin selector are not designed to work properly with zero currency inputs being selected.  (Which is understandable, since such a transaction would never be possible in Bitcoin.)&lt;/p&gt;

&lt;p&gt;With that, we have a single console command, &lt;code class=&quot;highlighter-rouge&quot;&gt;name_autoregister&lt;/code&gt;, which does what we want, so now it’s time to create a GUI for it.  This was relatively uneventful, but it’s notable that I decided to have a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;Buy Names&lt;/code&gt; tab instead of putting the registration widgets on the existing &lt;code class=&quot;highlighter-rouge&quot;&gt;Manage Names&lt;/code&gt; tab.  The reasoning for this is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Buy Names&lt;/code&gt; tab is a convenient place to show other widgets that don’t exist yet, such as giving you the opportunity to atomically trade NMC for a name if the name you want is already registered.&lt;/p&gt;

&lt;p&gt;And now, here’s your regular fix of screenshots:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/electrum-nmc/2018-10-17-Buy-Name-Entry.png&quot; alt=&quot;A screenshot of entering a name on the Electrum-NMC Buy Names tab.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/electrum-nmc/2018-10-17-Buy-Name-Available.png&quot; alt=&quot;A screenshot of a name available for registration on the Electrum-NMC Buy Names tab.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/electrum-nmc/2018-10-17-Buy-Name-Taken.png&quot; alt=&quot;A screenshot of a name already taken on the Electrum-NMC Buy Names tab.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs and NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/10/21/electrum-nmc-name-registration-gui.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/10/21/electrum-nmc-name-registration-gui.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>NSS certutil Windows/macOS rbm Build Scripts Merged by The Tor Project</title>
        <description>&lt;p&gt;As I mentioned earlier, &lt;a href=&quot;/2018/09/27/certutil-windows-rbm-submitted-tor-project.html&quot;&gt;I submitted some patches&lt;/a&gt; to The Tor Project for building NSS certutil binaries for Windows and macOS as part of Tor Browser’s rbm build scripts.  I’m happy to report that after a (quite well-justified) delay, and after some (quite reasonable) mild edits were requested and made, the Tor developers have merged my patches.&lt;/p&gt;

&lt;p&gt;This has benefits to multiple parties.  It benefits Namecoin since it means we get trustworthy certutil binaries for our Namecoin TLS releases [1].  It benefits the broader NSS ecosystem on Windows and macOS, since (among other things) it means that Firefox users on Windows and macOS won’t need to download random binaries linked from StackExchange or forums, or self-compile NSS, just in order to add certificates to their trust store from the command line.  (Based on the number of such forum threads I found via a cursory web search, there are a lot of such users.)  It benefits Tor, since it means that users who wouldn’t otherwise be interacting with the Tor ecosystem will now have a reason to do so, which gives Tor some free publicity.  And it benefits the reproducible build ecosystem, because many users who previously assumed they’d either have to risk downloading malware or build from source will now be learning about the benefits of reproducible builds for the first time (and will hopefully start demanding similar security guarantees from the developers of other software they use).&lt;/p&gt;

&lt;p&gt;This is why, at Namecoin, we try to get our work upstreamed as much as possible – we aim for maximum public benefit across the ecosystem, rather than maintaining forks of software for our own limited use cases.  Kudos to the Tor devs for the excellent code review experience.  I’m looking forward to getting more patches upstreamed to Tor in the future.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;

&lt;p&gt;[1] Of course, this is partially negated by the fact that some ongoing R&amp;amp;D happening at Namecoin suggests that we may be able to ditch the certutil dependency, in favor of some other approaches with less attack surface.  But I’ll save that for another post.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/10/15/certutil-rbm-merged-tor-project.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/10/15/certutil-rbm-merged-tor-project.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC: Name Update GUI</title>
        <description>&lt;p&gt;I previously wrote about &lt;a href=&quot;/2018/10/06/electrum-nmc-name-transaction-creation.html&quot;&gt;creating name transactions in the Electrum-NMC console&lt;/a&gt;.  Next up, adding GUI support.&lt;/p&gt;

&lt;p&gt;The new &lt;code class=&quot;highlighter-rouge&quot;&gt;Renew Name&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Configure Name...&lt;/code&gt; buttons use the previously discussed &lt;code class=&quot;highlighter-rouge&quot;&gt;name_update&lt;/code&gt; command as their backend, which makes implementation relatively simple, since it’s not difficult for GUI functions to access console commands.  I facilitated the &lt;code class=&quot;highlighter-rouge&quot;&gt;Renew Name&lt;/code&gt; command by making the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; parameter of &lt;code class=&quot;highlighter-rouge&quot;&gt;name_update&lt;/code&gt; optional; if not supplied, it will be set to the current value of the name.&lt;/p&gt;

&lt;p&gt;However, this introduces an interesting attack scenario: if an ElectrumX server falsely reports the current value of a name you own and you click the Renew button, you would be tricked into signing a &lt;code class=&quot;highlighter-rouge&quot;&gt;name_update&lt;/code&gt; transaction that contains the malicious value.  Therefore, to mitigate this scenario, &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; is only optional if the latest transaction for the name has at least 12 confirmations.  I can’t picture any way that this mitigation would cause real-world UX problems; presumably no one wants to renew a name that was already last updated fewer than 12 blocks ago.&lt;/p&gt;

&lt;p&gt;One nice UX improvement in Electrum-NMC compared to Namecoin-Qt is that you can renew multiple names at once: just select more than one name in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Manage Names&lt;/code&gt; tab, and then click &lt;code class=&quot;highlighter-rouge&quot;&gt;Renew Name&lt;/code&gt;.  Implementing this was a bit tricky, because Electrum’s coin selection algorithm doesn’t normally notice that a coin has been spent until it receives a copy from the ElectrumX server, which is usually a few seconds after we broadcast it to the ElectrumX server.  As a result, the coin selection algorithm would try to double-spend the same currency input for each name renewal.  I fixed this by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;addtransaction(tx)&lt;/code&gt; (which adds a transaction to the wallet) immediately after &lt;code class=&quot;highlighter-rouge&quot;&gt;broadcast(tx)&lt;/code&gt; returns success, before moving on to the the next name to renew.&lt;/p&gt;

&lt;p&gt;It should be noted that renewing multiple names at once will probably reveal to blockchain deanonymizers that the affected names have common ownership.  So, while this feature is potentially useful, it should be used with care.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Configure Name...&lt;/code&gt; button and associated dialog were relatively uneventful in terms of bugs.  That said, it did occur to me that it might be better to re-use Namecoin-Qt’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.ui&lt;/code&gt; form files for this purpose instead of re-implementing the dialog in Python.  Unfortunately, Namecoin-Qt’s form files are a bit too specific to Bitcoin Core (e.g. they incorporate widgets that only exist in Bitcoin Core, which have different implementations in Electrum).  I think it would be plausible to improve the abstraction of Namecoin-Qt’s form files so that we could re-use them in Electrum-NMC and save on duplicated GUI effort; hopefully something will happen there after higher-priority tasks are dealt with in the Namecoin-Qt codebase.&lt;/p&gt;

&lt;p&gt;And now, screenshots!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/electrum-nmc/2018-10-06-Manage-Names-Tab.png&quot; alt=&quot;A screenshot of the &amp;quot;Renew Name&amp;quot; and &amp;quot;Configure Name...&amp;quot; buttons visible in the Electrum-NMC Manage Names tab.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screenshots/electrum-nmc/2018-10-06-Configure-Name-Dialog.png&quot; alt=&quot;A screenshot of the &amp;quot;Configure Name&amp;quot; dialog in Electrum-NMC.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs and NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/10/09/electrum-nmc-name-update-gui.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/10/09/electrum-nmc-name-update-gui.html</guid>
        
        <category>News</category>
        
        
      </item>
    
  </channel>
</rss>
