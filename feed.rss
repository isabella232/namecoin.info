<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>https://namecoin.org//</link>
    <atom:link href="https://namecoin.org//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 11 Mar 2018 11:27:17 +0000</pubDate>
    <lastBuildDate>Sun, 11 Mar 2018 11:27:17 +0000</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>Negative Certificate Overrides for p11-kit</title>
        <description>&lt;p&gt;Fedora stores its TLS certificates via a highly interesting software package called &lt;a href=&quot;https://p11-glue.github.io/p11-glue/trust-module.html&quot;&gt;p11-kit&lt;/a&gt;.  p11-kit is designed to act as “glue” between various TLS libraries, so that (for example) Firefox, Chromium, and OpenSSL all see the same trust anchors.  p11-kit is useful from Namecoin’s perspective, since it means that if we can implement Namecoin support for p11-kit, we get support for all the trust stores that p11-kit supports for free.  I’ve just implemented a proof-of-concept of negative Namecoin overrides for p11-kit.&lt;/p&gt;

&lt;p&gt;As you may recall, the way our Chromium negative overrides currently work is by &lt;del&gt;abusing&lt;/del&gt; utilizing HPKP such that public CA’s can’t sign certificates for the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; TLD.  p11-kit doesn’t support key pinning (it’s on their roadmap though!), but there is another fun mechanism we can use to achieve a similar result: name constraints.  Name constraints are a feature of the x509 certificate specification that allows a CA certificate to specify constraints on what domain names it can issue certificates for.  There are a few standard use cases for name constraints:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A large organization who wants to create a lot of certificates might buy a name-constrained CA certificate from a public CA, and then use that name-constrained CA to issue more certificates for their organization.  This reduces the overhead of asking a public CA to issue a lot of certificates on-demand, and doesn’t introduce any security issues because the name constraint prevents the organization from issuing certificates for domain names that they don’t control.&lt;/li&gt;
  &lt;li&gt;A corporate intranet might create a name-constrained root CA that’s only valid for domain names that are internal to the corporate intranet.  This way, employees can install the name-constrained root CA in order to access internal websites, and they don’t have to worry that the IT department might be MITM’ing their connections to the public Internet.&lt;/li&gt;
  &lt;li&gt;A public CA might have a name constraint in their CA certificate that disallows them from issuing certificates for TLD’s that have unique regulatory requirements.  For exampe, the Let’s Encrypt CA &lt;a href=&quot;https://community.letsencrypt.org/t/why-is-there-a-certificate-name-constraint-for-mil/10130&quot;&gt;has (or at one point had) a name constraint disallowing &lt;code class=&quot;highlighter-rouge&quot;&gt;.mil&lt;/code&gt;&lt;/a&gt;, presumably because the U.S. military has their own procedures for issuing certificates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The 1st use case is rarely ever used; I suspect that this is because it poses a risk to commercial CA’s’ business model.  The 2nd use case is also rarely ever used; I suspect this is because many corporate IT departments &lt;em&gt;want to&lt;/em&gt; MITM all their employees’ traffic, and most employees don’t have much negotiating power on this topic.  But the 3rd case is quite interesting… if Let’s Encrypt uses a name constraint blacklisting &lt;code class=&quot;highlighter-rouge&quot;&gt;.mil&lt;/code&gt;, could this be used for &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Unfortunately, we obviously can’t expect all of the public CA’s to have any interest in opting into a name constraint disallowing &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; in the way that Let’s Encrypt opted into disallowing &lt;code class=&quot;highlighter-rouge&quot;&gt;.mil&lt;/code&gt;.  However, there is a fun trick that can solve this: cross-signed certificates.  It turns out that it is possible to transform a public root CA certificate into an intermediate CA certificate, and sign that intermediate CA certificate with a root CA that we can create locally (this is called &lt;em&gt;cross-signing&lt;/em&gt;).  We can then remove the original root CA from the cert store, add our local root CA and the cross-signed CA to the cert store, and everything will work just like it did before.  This is helpful because any name constraints that a CA certificate contains will apply to any CA certificate that it cross-signs.&lt;/p&gt;

&lt;p&gt;Technically, &lt;a href=&quot;https://tools.ietf.org/html/rfc5280#section-4.2.1.10&quot;&gt;the RFC 5280 specification says&lt;/a&gt; that root CA’s can’t have name constraints.  That’s not really a problem though: it just means that we have to create a local intermediate CA (signed by the local root CA) that has the name constraint, and cross-sign the public CA with the name-constrained local intermediate CA.  So the cert chain looks like this:&lt;/p&gt;

&lt;p&gt;Local root CA (no name constraint) –&amp;gt; Local intermediate CA (name constraint blacklisting .bit) –&amp;gt; Cross-signed public CA –&amp;gt; (everything past here is unaffected).&lt;/p&gt;

&lt;p&gt;Huge thanks to Crypt32 and davenpcj from Server Fault for first &lt;a href=&quot;https://serverfault.com/questions/670725/is-it-possible-to-restrict-the-use-of-a-root-certificate-to-a-domain&quot;&gt;cluing me in&lt;/a&gt; that this approach would work.  Unfortunately, Crypt32 didn’t provide any sample code, and the sample code from davenpcj didn’t work as-is for me (OpenSSL kept returning various errors when I tried to cross-sign, most of which seemed to be because OpenSSL didn’t like the fact that the public CA hadn’t signed an authorization for me to cross-sign their CA).  I eventually managed to cobble together a Bash script using OpenSSL that did work, but I don’t think OpenSSL’s command-line tool is really the right tool for the job (OpenSSL tends to rewrite large parts of the cross-signed certificate in ways that are likely to cause compatibility and security problems).  I’m probably going to rewrite this as a Go program.&lt;/p&gt;

&lt;p&gt;Anyway, with my Bash script, I decided to apply a name constraint to &lt;code class=&quot;highlighter-rouge&quot;&gt;DST Root CA X3&lt;/code&gt;, which is the root CA that Let’s Encrypt uses.  The name constraint I applied blacklists the &lt;code class=&quot;highlighter-rouge&quot;&gt;.org&lt;/code&gt; TLD (obviously I can’t use &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; for testing this, since no public CA’s are known to have issued a certificate for a &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domain).  And… it works!  The Bash script installed the local root CA as a trust anchor for p11-kit, installed the intermediate and cross-signed CA’s as trust-neutral certificates for p11-kit, and installed a copy of the original &lt;code class=&quot;highlighter-rouge&quot;&gt;DST Root CA X3&lt;/code&gt; certificate to the p11-kit blacklist.  As a result, both Chromium and Firefox still work fine with Let’s Encrypt for &lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt; websites such as &lt;a href=&quot;https://tehnoetic.com/&quot;&gt;Technoethical&lt;/a&gt;, but return an error for &lt;code class=&quot;highlighter-rouge&quot;&gt;.org&lt;/code&gt; websites such as &lt;a href=&quot;https://www.namecoin.org/&quot;&gt;Namecoin.org&lt;/a&gt; – exactly the behavior we want.&lt;/p&gt;

&lt;p&gt;I also made a modified version of my Bash script that installs the modified CA’s into a standard NSS sqlite3 database (without p11-kit), and confirmed that this works with both Firefox and Chromium on GNU/Linux.  So p11-kit probably won’t be a hard dependency of this approach, meaning that this approach is likely to work for Firefox on all OS’s, Chromium on all GNU/Linux distros, and anything else that uses NSS.&lt;/p&gt;

&lt;p&gt;This code needs a lot of cleanup before it’s ready for release; among the ToDos are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Port the certificate handling code to a Go program instead of OpenSSL’s command line.&lt;/li&gt;
  &lt;li&gt;Automatically detect which root CA’s exist in p11-kit, and apply the name constraint to all of them, instead of only using &lt;code class=&quot;highlighter-rouge&quot;&gt;DST Root CA X3&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Automatically detect when a public root CA is deleted from p11-kit (e.g. WoSign), and remove the name-constrained CA that corresponds to it.&lt;/li&gt;
  &lt;li&gt;Preserve p11-kit’s attached attributes for trust anchors.&lt;/li&gt;
  &lt;li&gt;Make the procedure idempotent.&lt;/li&gt;
  &lt;li&gt;Test whether this works as intended for other p11-kit-supported libraries (Firefox and Chromium use NSS; p11-kit also supports OpenSSL, Java, and GnuTLS among others).&lt;/li&gt;
  &lt;li&gt;Test whether a similar approach with name constraints can work for CryptoAPI (this would be relevant for most non-Mozilla browsers on Windows).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m hopeful that this work will allow us to continue supporting Chromium on GNU/Linux after Chromium removes HPKP, and that it will nicely complement the Firefox positive override support that I added to &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdumpzone&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It should be noted that this approach definitely will not work on most non-Mozilla macOS browsers, because macOS’s TLS implementation does not support name constraints.  I’m not aware of any practical way to do negative overrides on macOS (besides the deprecated HPKP support in Chromium), so there’s a chance that when we get around to macOS support, we’ll just not do negative overrides for macOS (meaning that while Namecoin certificates would work on macOS without errors, malicious public CA’s would still be able to do MITM attacks against macOS users just like they can for DNS domain names).  Firefox on macOS shouldn’t have this problem, since Firefox doesn’t use the OS for certificate verification.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/03/11/p11-kit-negative-overrides.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/03/11/p11-kit-negative-overrides.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Adding a Firefox TLS Mode to ncdumpzone</title>
        <description>&lt;p&gt;Firefox stores its list of certificate overrides in a text file.  While it’s not feasible to edit this text file while Firefox is running (Firefox only loads it on startup) I’ve experimentally found that it is completely feasible to create positive overrides if you shut off Firefox while the override is being created.  But is this a reasonable expectation for Namecoin?  Actually yes.  Here’s how we’re doing it:&lt;/p&gt;

&lt;p&gt;Note that most Namecoin users are doing name lookups via one of the following clients:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Namecoin Core (in full node mode)&lt;/li&gt;
  &lt;li&gt;Namecoin Core (in pruned mode)&lt;/li&gt;
  &lt;li&gt;libdohj-namecoin (in &lt;code class=&quot;highlighter-rouge&quot;&gt;leveldbtxcache&lt;/code&gt; mode)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These have an important feature in common: they all keep track of the UNO (unspent name output) set locally.  That means that you don’t need to wait for a DNS lookup to be hooked before you process a TLSA record from the blockchain – you can process TLSA records in advance, before Firefox even boots!&lt;/p&gt;

&lt;p&gt;Note that the above is not true for the following cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;libdohj-namecoin (in API server mode)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains that are delegated to a DNSSEC server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, what we need is a tool that walks the entire Namecoin UNO set, processes each name, and writes out some data about the TLSA records.  Coincidentally, this is very similar to what &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdumpzone&lt;/code&gt; does.  &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdumpzone&lt;/code&gt; is a utility distributed with ncdns.  It exports a DNS zonefile of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; zone, which is intended for users who for some reason want to use BIND as an authoritative nameserver instead of using ncdns directly.  However, with some minimal tweaking, we can make &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdumpzone&lt;/code&gt; export the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; zone in some other format… such as a Firefox certificate override list format.&lt;/p&gt;

&lt;p&gt;For example, this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./ncdumpzone --format=firefox-override --rpcuser=user --rpcpass=pass &amp;gt; firefox.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Resulted in the following file being saved:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nf.bit:443	OID.2.16.840.1.101.3.4.2.1	13:E7:03:D6:A2:70:1E:77:41:21:F5:84:6D:3E:0B:FD:5F:00:B7:6B:47:96:82:E3:A2:B0:54:A0:25:76:0A:1A	U	AAAAAAAAAAAAAAAAAAAAAA==
test.veclabs.bit:443	OID.2.16.840.1.101.3.4.2.1	66:86:29:37:ED:53:B3:CE:2B:9B:A5:30:4D:59:83:35:4C:EC:80:9A:1F:39:DC:37:87:6E:00:4B:AF:08:3E:BA	U	AAAAAAAAAAAAAAAAAAAAAA==
www.aoeu2code.bit:443	OID.2.16.840.1.101.3.4.2.1	13:E3:2D:1B:05:B5:DC:57:94:3D:17:EC:99:25:3F:AF:54:87:7E:62:FC:51:18:06:B7:F4:87:51:62:3A:3B:1C	U	AAAAAAAAAAAAAAAAAAAAAA==
markasoftware.bit:443	OID.2.16.840.1.101.3.4.2.1	43:B4:EA:FC:FF:25:CC:85:A9:3D:CE:75:55:31:C9:DB:60:AF:06:C3:65:E5:28:62:08:20:DD:62:F4:70:0E:7D	U	AAAAAAAAAAAAAAAAAAAAAA==
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These 4 lines correspond to the only 4 TLSA records that exist in the Namecoin blockchain right now.  Obviously, the first part of each line is the domain name and port of the website.  &lt;code class=&quot;highlighter-rouge&quot;&gt;OID.2.16.840.1.101.3.4.2.1&lt;/code&gt; signifies that the fingerprint uses the SHA256 algorithm.  (This is the only one that Firefox has ever supported, but Firefox is designed to be future-proof in case a newer hash function becomes necessary.)  Next comes the fingerprint itself, in uppercase colon-delimited hex.  &lt;code class=&quot;highlighter-rouge&quot;&gt;U&lt;/code&gt; indicates that the positive override is capable of overriding an “untrusted” error (it can’t override validity period or domain name mismatch errors).  The interesting part is &lt;code class=&quot;highlighter-rouge&quot;&gt;AAAAAAAAAAAAAAAAAAAAAA==&lt;/code&gt;, which Mozilla’s source code refers to as a &lt;code class=&quot;highlighter-rouge&quot;&gt;dbKey&lt;/code&gt;.  Mozilla’s source code always calculates this using the issuer and serial number of the certificate.  However, empirically it works just fine if I instead use all 0’s (in the same base64 encoding).  Looking at the Mozilla source code, the dbKey isn’t actually utilized in the process of checking whether an override exists.  I’m not certain exactly what Mozilla is using it for (it seems to be used in a code path that’s related to enumerating all the overrides that exist).  Since the issuer and serial number aren’t always derivable from TLSA records (you generally need either a dehydrated certficate or a full certificate for this; my goal here is to work even if only the SHA256 fingerprint of a cert is known), we just set it to all 0’s.&lt;/p&gt;

&lt;p&gt;Copying the above output into Firefox’s cert override file, and then starting up Firefox, I was able to access &lt;a href=&quot;https://nf.bit/&quot;&gt;the Namecoin forum’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domain&lt;/a&gt; without any TLS errors.  I’ve submitted a PR to ncdns.&lt;/p&gt;

&lt;p&gt;While I was writing this code, I noticed that ncdns was actually calculating TLSA records incorrectly.  One of the bugs in TLSA record calculation was already known (&lt;a href=&quot;https://github.com/namecoin/ncdns/issues/59&quot;&gt;Jefferson Carpenter reported it last month&lt;/a&gt;), while the other was unnoticed (the TLSA records contained a rehydrated certificate that accidentally included a FQDN as the domain name; the erroneous trailing period caused the signatures and fingerprints to fail verification).  The fact that these bugs in my TLSA code remained unnoticed for about a year seems to be evidence that no one is actually using TLSA over DNS with Namecoin in the real world; the only Namecoin TLS users are using ncdns’s &lt;code class=&quot;highlighter-rouge&quot;&gt;certinject&lt;/code&gt; feature, which did not have this bug.&lt;/p&gt;

&lt;p&gt;It should be noted that this approach isn’t secure in the sense that Namecoin TLS with Chromium is, because it doesn’t provide negative overrides (meaning that a public CA could issue a malicious &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; certificate that wouldn’t be blocked by this method).  However, positive and negative overrides are mostly orthogonal goals in terms of implementation, so this is huge progress while we wait for proper WebExtensions support for TLS overrides.  I also think it’s likely to be feasible to implement negative overrides using NSS, in a way that Firefox will honor.  More on that in a future post.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/02/20/ncdumpzone-firefox.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/02/20/ncdumpzone-firefox.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Positive TLS Certificate Overrides for NSS</title>
        <description>&lt;p&gt;NSS is the TLS implementation used by various applications, including Chromium on GNU/Linux and Firefox on all platforms.  I’ve finished initial support for positive cert overrides in NSS, and have submitted a PR that is now awaiting review.&lt;/p&gt;

&lt;p&gt;I had previously written a WIP PR that implemented positive overrides for NSS, but it worked by using an NSS database directory that was auto-detected based on the active user’s home directory.  This seemed like a clever usability trick, but it had 2 severe disadvantages:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Some applications don’t use the shared NSS database, but instead use their own.  Firefox is one of these applications.&lt;/li&gt;
  &lt;li&gt;For security reasons, we want ncdns to run as its own user with restricted permissions.  This would break the database directory auto-detection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The new PR has explicit configuration options for which NSS database directory is used.  For example, the following command line config:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./ncdns -ncdns.namecoinrpcusername=user -ncdns.namecoinrpcpassword=pass -certstore.nss -certstore.nsscertdir=&quot;$(pwd)&quot;/certs -certstore.nssdbdir=/home/user/.pki/nssdb -xlog.severity=DEBUG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Allowed &lt;a href=&quot;https://nf.bit/&quot;&gt;the Namecoin Forum’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domain&lt;/a&gt; to load in Chromium in my Fedora VM without any TLS errors.  Obviously, this would need to be combined with the negative override functionality provided by the &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_chromium_tool&lt;/code&gt; program (included with ncdns) in order to actually have reasonable security (otherwise, public TLS CA’s could issue &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; certs that would still be accepted by Chromium).&lt;/p&gt;

&lt;p&gt;Some remaining challenges:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NSS’s &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; is extremely slow, due to failure to properly batch operations into sqlite transactions.  I’ve filed a bug about this with Mozilla.  Until this is fixed, expect an extra ~800ms of latency when accessing Namecoin HTTPS websites.  Possible future workarounds:
    &lt;ul&gt;
      &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; sometime before the DNS hook, so that 800ms of latency isn’t actually noticeable for the user.  (More on this in a future post.)&lt;/li&gt;
      &lt;li&gt;Do some highly horrifying &lt;code class=&quot;highlighter-rouge&quot;&gt;LD_PRELOAD&lt;/code&gt; witchcraft in order to fix the crappy sqlite usage.&lt;/li&gt;
      &lt;li&gt;Use a different pkcs11 backend instead of NSS’s sqlite3 backend.  (Yes, NSS uses pkcs11 behind the scenes.  More on this in a future post.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Firefox doesn’t actually respect NSS’s trust anchors when the trust anchor is an end-entity certificate.  Possible future workarounds:
    &lt;ul&gt;
      &lt;li&gt;Use a Firefox-specific positive override mechanism.  (More on this in a future post; also see the WebExtensions posts.)&lt;/li&gt;
      &lt;li&gt;Inject CA certs rather than end-entity certs.  (More on this in a future post.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Some NSS applications don’t use the sqlite backend, but instead use BerkeleyDB as a backend.  BerkeleyDB can’t be opened concurrently by multiple applications, so ncdns can’t inject certs while another application is open.  Possible future workarounds:
    &lt;ul&gt;
      &lt;li&gt;Use an environment variable to force sqlite usage.&lt;/li&gt;
      &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; while the database isn’t open.&lt;/li&gt;
      &lt;li&gt;Use a different pkcs11 backend.&lt;/li&gt;
      &lt;li&gt;Wait for those applications to switch to sqlite.  (Firefox switched in Firefox 58, and it appears more applications may follow suit.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That said, despite the need for future work, this PR makes Namecoin TLS fully functional in Chromium on GNU/Linux.  (Until negative overrides stop working due to HPKP being removed… more on potential fixes in a future post.)&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/02/18/positive-tls-overrides-for-nss.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/02/18/positive-tls-overrides-for-nss.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin TLS for Firefox: Phase 6 (Negative Override Cache in C++, WebExtension Aggregation, and Coordination with Mozilla)</title>
        <description>&lt;p&gt;In &lt;a href=&quot;/2017/10/29/firefox-tls-moving-cache-cpp.html&quot;&gt;Phase 5&lt;/a&gt; of Namecoin TLS for Firefox, I discussed the performance benefits of moving the positive override cache from JavaScript to C++.  I’ve now implemented preliminary work on doing the same for negative overrides.&lt;/p&gt;

&lt;p&gt;The code changes for negative overrides’ C++ cache are analogous to those for positive overrides, so there’s not much to cover in this post about those changes.  However, I did take the chance to refactor the API between the C++ code and the JavaScript code a bit.  Previously, only 1 WebExtension was able to perform overrides; if multiple WebExtensions registered for the API, whichever replied first would be the only one that had any effect.  Now, each WebExtension replies separately to the Experiment, and the Experiment passes those replies on to the C++ code.  The Experiment also notifies the C++ code when all of the WebExtensions have replied.  Although this does add some extra API overhead, it has the benefit of allowing an override to take place immediately if a single WebExtension has determined that it should take place, even if the other (irrelevant) WebExtensions are still evaluating the certificate.&lt;/p&gt;

&lt;p&gt;Unfortunately, at this point I merged upstream changes from Mozilla into my Mercurial repository, only to find that there was now a compile error.  I’m still figuring out exactly why this compile error is happening.  It looks like it’s unrelated to any of the files that my patch touches; I suspect that it’s due to my general lack of competence with Mercurial (Mozilla’s codebase is the first time I’ve used Mercurial) or my similar general lack of competence with Mozilla’s build system.&lt;/p&gt;

&lt;p&gt;So, until I actually get the code to build, I won’t be able to do performance evaluations of these changes.  Hence why there are no pretty graphs in this post.&lt;/p&gt;

&lt;p&gt;Meanwhile, I reached out to Mozilla to get some feedback on the general approach I was taking.  (I had previously discussed high-level details with Mozilla, but this time I provided a WIP code patch, so that it would be easier to evaluate whether I was doing anything with the code that would be problematic.)  This resulted in a discussion about what methods should be used to prevent malicious or buggy extensions from causing unexpected damage to user security.  This is definitely a legitimate concern: messing with certificate verification is dangerous when done improperly, and it’s important that users understand what they’re getting when they install a WebExtension that might put them at risk.  That discussion is still ongoing, and it’s not clear yet what the consensus will arrive at.&lt;/p&gt;

&lt;p&gt;(It should be noted that there are some alternative approaches to Firefox support for Namecoin TLS underway as well, which will be covered in a future post.)&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/02/13/firefox-tls-negative-cache.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/02/13/firefox-tls-negative-cache.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Pruning of Non-scriptPubKey Data in libdohj</title>
        <description>&lt;p&gt;Our lightweight SPV client’s &lt;code class=&quot;highlighter-rouge&quot;&gt;leveldbtxcache&lt;/code&gt; mode is the most secure of the various Namecoin lightweight SPV modes.  Its storage requirements aren’t too bad either (129.1 MB at the moment for Namecoin mainnet).  However, while 129.1 MB of storage isn’t a dealbreaker, it’s still a bit borderline on mobile devices.  We can do better.&lt;/p&gt;

&lt;p&gt;First, a reminder of how &lt;code class=&quot;highlighter-rouge&quot;&gt;leveldbtxcache&lt;/code&gt; currently works.  Initially, the IBD (initial blockchain download) proceeds the same way a typical lightweight SPV Bitcoin client (such as Schildbach’s Android Bitcoin Wallet) would work: it downloads blockchain headers, aiming for the chain with the most work.  However, at the point when the IBD has reached 1 year ago in the blockchain, it begins downloading full blocks instead of block headers.  The full blocks aren’t saved; they’re used temporarily for 2 purposes: verifying consistency with the block headers’ Merkle root (thus ensuring that no transactions have been censored), and adding any &lt;code class=&quot;highlighter-rouge&quot;&gt;name_anyupdate&lt;/code&gt; transactions to a LevelDB database that allows quick lookup of names.  After those 2 things have been processed, the full blocks are discarded.  The 129.1 MB storage figure is as low as it is because we’re only storing name transactions from the last year (plus block headers, which are negligible in size).&lt;/p&gt;

&lt;p&gt;However, there’s a lot of data in name transactions that we don’t actually need in order to look up names: currency data, signatures, and transaction metadata.&lt;/p&gt;

&lt;p&gt;Currency data exists in name transactions because name operations cost a transaction fee, so there will typically be a currency input and a currency output in any name transaction.  We don’t need this information in order to look up names.  Signatures are used for verifying new transactions, but are not needed to look up previously accepted transaction data.  Transaction metadata, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;nVersion&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;nLockTime&lt;/code&gt;, is also not needed to look up names.  There may be other sources of unwanted data too.&lt;/p&gt;

&lt;p&gt;To improve the situation, I’ve just modified &lt;code class=&quot;highlighter-rouge&quot;&gt;leveldbtxcache&lt;/code&gt; so that, instead of storing full name transactions in LevelDB, it only stores the &lt;code class=&quot;highlighter-rouge&quot;&gt;scriptPubKey&lt;/code&gt; of the name output.  This includes the name’s identifier and value, as well as the Bitcoin-compatible &lt;code class=&quot;highlighter-rouge&quot;&gt;scriptPubKey&lt;/code&gt; that can be used to verify future signatures.  It’s a relatively straightforward change to the code, although it does break backward-compatibility with existing name databases (so you’ll need to delete your blockchain and resync after updating).&lt;/p&gt;

&lt;p&gt;So, how does this fare?&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Full Transactions&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Only &lt;code class=&quot;highlighter-rouge&quot;&gt;scriptPubKey&lt;/code&gt;&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Storage Used after IBD&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;129.1 MB&lt;/td&gt;
      &lt;td&gt;63.7 MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Time Elapsed for IBD&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;~9 Minutes&lt;/td&gt;
      &lt;td&gt;~6 minutes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Not bad, and we even got a faster IBD as a bonus.  (This suggests that the bottleneck, at least on my laptop running Qubes with an HDD, was storage I/O.)&lt;/p&gt;

&lt;p&gt;I’ve just submitted this change to upstream libdohj.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/02/11/libdohj-pruning-scriptpubkey.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/02/11/libdohj-pruning-scriptpubkey.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Core 0.15.99-name-tab-beta1 Released</title>
        <description>&lt;p&gt;Namecoin Core 0.15.99-name-tab-beta1 has been released on the &lt;a href=&quot;/download/betas/#namecoin-core&quot;&gt;Beta Downloads page&lt;/a&gt;.  Changes since 0.13.99-name-tab-beta1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New features:
    &lt;ul&gt;
      &lt;li&gt;GUI
        &lt;ul&gt;
          &lt;li&gt;Significant rewrite of name GUI.  (Patch by brandonrobertz.)  &lt;strong&gt;In particular, please torture-test the following&lt;/strong&gt;:
            &lt;ul&gt;
              &lt;li&gt;Full flow for registering names.&lt;/li&gt;
              &lt;li&gt;Full flow for updating and renewing names.&lt;/li&gt;
              &lt;li&gt;State display in the names list.&lt;/li&gt;
              &lt;li&gt;The above with mainnet, testnet, and regtest networks.&lt;/li&gt;
              &lt;li&gt;The above with encrypted locked, encrypted unlocked, and unencrypted wallets.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;RPC
        &lt;ul&gt;
          &lt;li&gt;Remove name operation from &lt;code class=&quot;highlighter-rouge&quot;&gt;createrawtransaction&lt;/code&gt; RPC method; add &lt;code class=&quot;highlighter-rouge&quot;&gt;namerawtransaction&lt;/code&gt; RPC method.  This paves the way for various future improvements to the name GUI, including coin control, anonymity, fee control, registration without unlocking the wallet twice, and decreased transaction size.  You’ll need to update your scripts if you currently use the raw transaction API for name transactions.  (Reported by JeremyRand, patch by domob1812.)&lt;/li&gt;
          &lt;li&gt;Restore &lt;code class=&quot;highlighter-rouge&quot;&gt;getblocktemplate&lt;/code&gt; RPC method.  This improves workflow for software used by Bitcoin mining pools.  (Reported by DrHaribo, patch by domob1812.)&lt;/li&gt;
          &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;createauxblock&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;submitauxblock&lt;/code&gt; RPC methods.  This improves workflow for software used by Bitcoin mining pools.  (Patch by bitkevin.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Fixes:
    &lt;ul&gt;
      &lt;li&gt;GUI
        &lt;ul&gt;
          &lt;li&gt;Fix pending name registration bug, where the GUI requests a wallet unlock over and over and then errors with name registered.  (Patch by brandonrobertz.)&lt;/li&gt;
          &lt;li&gt;Fix bug where names weren’t showing up in the Manage Names list properly until client had been restarted.  (Patch by brandonrobertz.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;P2P
        &lt;ul&gt;
          &lt;li&gt;Update seed nodes.  This should decrease likelihood of getting stuck without peers.  (Patch by JeremyRand.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;RPC
        &lt;ul&gt;
          &lt;li&gt;Fix crash when user attempts to broadcast an invalid raw transaction containing multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;name_update&lt;/code&gt; outputs.  (Reported by maxweisspoker, patch by domob1812.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Improvements from upstream Bitcoin Core.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, Windows and macOS builds are broken in this release, so only GNU/Linux binaries are available.  We expect Windows and macOS builds to be restored for the 0.15.99-name-tab-beta2 release, which is coming soon.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/02/01/namecoin-core-0-15-99-name-tab-beta1.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/02/01/namecoin-core-0-15-99-name-tab-beta1.html</guid>
        
        <category>Releases</category>
        
        <category>Namecoin Core Releases</category>
        
        
      </item>
    
      <item>
        <title>Recent Reports of Ransomware Using Namecoin are Missing the Real Story</title>
        <description>&lt;p&gt;Some reports are making the rounds that a new ransomware strain, “GandCrab”, is using Namecoin for C&amp;amp;C.  While this may sound interesting, as far as I can tell these reports are missing the real story.&lt;/p&gt;

&lt;p&gt;Looking at the &lt;a href=&quot;https://www.bleepingcomputer.com/news/security/gandcrab-ransomware-distributed-by-exploit-kits-appends-gdcb-extension/&quot;&gt;report on Bleeping Computer&lt;/a&gt;, we see these quotes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Another interesting feature is GandCrab’s use of the NameCoin .BIT top-level domain.  .BIT is not a TLD that is recognized by the Internet Corporation for Assigned Names and Numbers (ICANN), but is instead managed by &lt;a href=&quot;https://namecoin.org/&quot;&gt;NameCoin’s&lt;/a&gt; decentralized domain name system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The developers of GandCrab are using NameCoin’s DNS as it makes it harder for law enforcement to track down the owner of the domain and to take the domains down.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This doesn’t make much sense, since Namecoin isn’t anonymous (so tracking down the owner of the domain is relatively straightforward for law enforcement).  But more to the point, most Internet users don’t have Namecoin installed, and it would be rather odd for ransomware to bundle a Namecoin name lookup client.  This confusion is explained by Bleeping Computer (to their credit):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This means that any software that wishes to resolve a domain name that uses the .BIT tld, must use a DNS server that supports it. GandCrab does this by making dns queries using the a.dnspod.com DNS server, which is accessible on the Internet and can also  be used to resolve .bit domains.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yep, if this is to be believed, GandCrab isn’t actually using Namecoin, they’re using a centralized DNS server (&lt;code class=&quot;highlighter-rouge&quot;&gt;a.dnspod.com&lt;/code&gt;) which nominally claims to mirror the namespace of Namecoin.  This means that, if law enforcement wants to censor the C&amp;amp;C &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains, they don’t need to censor Namecoin (which would be rather difficult), they simply need to look up who owns &lt;code class=&quot;highlighter-rouge&quot;&gt;dnspod.com&lt;/code&gt; (under ICANN policy, looking this up is straightforward for law enforcement) and send them a court order to censor the C&amp;amp;C domains.&lt;/p&gt;

&lt;p&gt;However, Bleeping Computer is actually substantially wrong on this point.  Why?  Take a look in the Namecha.in block explorer at &lt;a href=&quot;https://namecha.in/name/d/bleepingcomputer&quot;&gt;the Namecoin value of &lt;code class=&quot;highlighter-rouge&quot;&gt;bleepingcomputer.bit&lt;/code&gt;&lt;/a&gt;, which is one of the alleged C&amp;amp;C domains:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;ns&quot;:[&quot;A.DNSPOD.COM&quot;,&quot;B.DNSPOD.COM&quot;]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First off, note that this is actually a completely invalid Namecoin configuration, because &lt;a href=&quot;https://help.directadmin.com/item.php?id=541&quot;&gt;the trailing period is missing&lt;/a&gt; from the authoritative nameserver addresses, so any DNS software that tries to process that Namecoin domain will return &lt;code class=&quot;highlighter-rouge&quot;&gt;SERVFAIL&lt;/code&gt;.  Second, note that the authoritative nameservers listed are… the &lt;code class=&quot;highlighter-rouge&quot;&gt;dnspod.com&lt;/code&gt; nameservers.  This makes it pretty clear that &lt;code class=&quot;highlighter-rouge&quot;&gt;a.dnspod.com&lt;/code&gt; isn’t actually a Namecoin DNS inproxy.  If it were, and even if the trailing-period fail were corrected in the Namecoin value, the inproxy would end up in a recursion loop.  &lt;code class=&quot;highlighter-rouge&quot;&gt;a.dnspod.com&lt;/code&gt; is actually just a random authoritative nameserver that happens to be serving records for a domain name that ends in &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt;.  &lt;strong&gt;Namecoin isn’t used anywhere by GandCrab, and killing the Namecoin domain wouldn’t have any effect on GandCrab.&lt;/strong&gt;  Of course, this raises questions about why exactly that domain name is even registered in Namecoin.  The simplest explanations are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The GandCrab developers are massively incompetent, and have potentially deanonymized themselves by registering a Namecoin domain despite not ever using that Namecoin domain for their ransomware.&lt;/li&gt;
  &lt;li&gt;Someone unrelated to GandCrab has registered that Namecoin domain for the purpose of trolling security researchers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s conceivable that &lt;code class=&quot;highlighter-rouge&quot;&gt;dnspod.com&lt;/code&gt;’s nameservers will only allow a &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domain’s records to be served from their systems if that &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domain’s Namecoin data points to &lt;code class=&quot;highlighter-rouge&quot;&gt;dnspod.com&lt;/code&gt;’s namservers, and it’s further possible that their systems are misconfigured to not notice that the trailing period is missing.  However, this seemed rather unlikely to me.  Why?  Well, first, take a look at the WHOIS data for &lt;code class=&quot;highlighter-rouge&quot;&gt;dnspod.com&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Registrar URL: http://www.dnspod.cn
Registrar: DNSPod, Inc.
Registrar IANA ID: 1697
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So DNSPod is apparently an ICANN-accredited DNS registrar, with a primary domain name in China.  Which of these scenarios fits better with Occam’s Razor:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A DNS registrar located in China (which is not exactly known for its government’s respect for Namecoin’s values of free speech), which is accredited by ICANN (which doesn’t recognize Namecoin as either a DNS TLD or a special-use TLD), is doing special processing of domain names that they host in order to respect the authority of Namecoin.  They’ve also never contacted the Namecoin developers to inform us that they’re doing this, nor are any of their technical people active in the Namecoin community.&lt;/li&gt;
  &lt;li&gt;DNSPod simply doesn’t care what domains their customers host on their nameservers, since if DNSPod’s nameservers aren’t authorized by a domain’s NS record in the DNS, nothing bad will happen anyway (DNSPod simply won’t receive any requests for that domain).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In addition, if DNSPod had such a policy, it’s not clear how exactly their customers would be able to switch their Namecoin domains to DNSPod nameservers without encountering downtime while DNSPod was waiting for the Namecoin transaction to propagate.&lt;/p&gt;

&lt;p&gt;However, since empiricism is informative, Ryan Castellucci tested this with an account on DNSPod, and confirmed that no such validation occurs:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dig +tcp jeremyrandissomesortofhumanperson.bit @a.dnspod.com

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.5-9+deb8u14-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; +tcp jeremyrandissomesortofhumanperson.bit @a.dnspod.com
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 23586
;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 3, ADDITIONAL: 1
;; WARNING: recursion requested but not available

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;jeremyrandissomesortofhumanperson.bit. IN A

;; ANSWER SECTION:
jeremyrandissomesortofhumanperson.bit. 600 IN A 255.255.255.255

;; AUTHORITY SECTION:
jeremyrandissomesortofhumanperson.bit. 600 IN NS b.dnspod.com.
jeremyrandissomesortofhumanperson.bit. 600 IN NS c.dnspod.com.
jeremyrandissomesortofhumanperson.bit. 600 IN NS a.dnspod.com.

;; Query time: 595 msec
;; SERVER: 101.226.79.205#53(101.226.79.205)
;; WHEN: Wed Jan 31 03:04:24 UTC 2018
;; MSG SIZE  rcvd: 160
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Ryan doesn’t own &lt;code class=&quot;highlighter-rouge&quot;&gt;jeremyrandissomesortofhumanperson.bit&lt;/code&gt;.)  Ryan also did the same for &lt;code class=&quot;highlighter-rouge&quot;&gt;bleepingcomputer.iq&lt;/code&gt;, implying that DNSPod isn’t verifying ownership of DNS domain names either:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dig +tcp bleepingcomputer.iq @a.dnspod.com A

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.5-9+deb8u14-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; +tcp bleepingcomputer.iq @a.dnspod.com A
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 50149
;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 3, ADDITIONAL: 1
;; WARNING: recursion requested but not available

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;bleepingcomputer.iq.           IN      A

;; ANSWER SECTION:
bleepingcomputer.iq.    600     IN      A       8.8.8.8

;; AUTHORITY SECTION:
bleepingcomputer.iq.    600     IN      NS      a.dnspod.com.
bleepingcomputer.iq.    600     IN      NS      b.dnspod.com.
bleepingcomputer.iq.    600     IN      NS      c.dnspod.com.

;; Query time: 5758 msec
;; SERVER: 101.226.79.205#53(101.226.79.205)
;; WHEN: Wed Jan 31 03:00:39 UTC 2018
;; MSG SIZE  rcvd: 142
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ryan tried registering a &lt;code class=&quot;highlighter-rouge&quot;&gt;.onion&lt;/code&gt; domain and &lt;code class=&quot;highlighter-rouge&quot;&gt;bleepingcomputer.malware&lt;/code&gt; on DNSPod as well, but these were rejected as invalid TLD’s.  Ryan and I have no clue why &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; is on DNSPod’s TLD whitelist while &lt;code class=&quot;highlighter-rouge&quot;&gt;.onion&lt;/code&gt; isn’t – probably because a customer asked for it and DNSPod just doesn’t care.&lt;/p&gt;

&lt;p&gt;Ryan isn’t aware of any prior cases where a malware C&amp;amp;C was set up in a random free authoritative DNS provider such as DNSPod, with the DNS servers hardcoded in the malware.  It’s an interesting strategy for malware authors, since authoritative DNS providers usually don’t bother to confirm domain name ownership.  Entertainingly, Ryan found that DNSPod isn’t verifying ownership of the email addresses used to register accounts either.&lt;/p&gt;

&lt;p&gt;So in conclusion: while this is a rather interesting case of a possible hilarious opsec fail by a ransomware author (which very well might get them arrested), and the strategy of using authoritative DNS hosting providers for malware C&amp;amp;C is fascinating as well, the ransomware itself is fully irrelevant to Namecoin.&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/01/30/recent-reports-ransomware-using-namecoin-missing-real-story.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/01/30/recent-reports-ransomware-using-namecoin-missing-real-story.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>34C3 Summary</title>
        <description>&lt;p&gt;As was &lt;a href=&quot;/2017/12/23/34c3.html&quot;&gt;previously announced&lt;/a&gt;, Jonas Ostman and I (Jeremy Rand) represented Namecoin at &lt;a href=&quot;https://events.ccc.de/congress/2017/wiki/index.php/Main_Page&quot;&gt;34C3&lt;/a&gt; in Leipzig, Germany.  This was our first Congress, so we didn’t quite know what to expect, but we were pretty confident that it would be awesome.  We were not disappointed.  The CCC community is well-known for being friendly and welcoming to newcomers, and we greatly enjoyed talking to everyone there.&lt;/p&gt;

&lt;p&gt;Namecoin gave 3 talks, all of which were hosted by the Monero Assembly and the Chaos West Stage.  I expect 2 of those talks to have videos posted sometime later this month.  Unfortunately, 1 of the talks suffered an audio issue in the recording, so it won’t have a video posted (but I will post the slides of that talk, as well as the other talks’ slides).  The talks’ titles are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Namecoin as a Decentralized Alternative to Certificate Authorities for TLS&lt;/li&gt;
  &lt;li&gt;Namecoin for Tor Onion Service Naming (And Other Darknets) &lt;em&gt;(No video will be posted due to audio recording technical issues)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;A Blueprint for Making Namecoin Anonymous&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual for conferences that we attend, we engaged in a large number of conversations with other attendees.  Also as usual, I won’t be publicly disclosing the content of those conversations, because I want people to be able to talk to me at conferences without worrying that off-the-cuff comments will be broadcast to the public.  That said, I can say that a lot of very promising discussions happened regarding future collaboration with allied projects, and we’ll make any relevant announcements when/if such collaborations are formalized.&lt;/p&gt;

&lt;p&gt;Huge thank you to the following groups who facilitated our participation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://events.ccc.de/congress/2017/wiki/index.php/Assembly:Monero_Assembly&quot;&gt;The Monero Assembly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://events.ccc.de/congress/2017/wiki/index.php/Assembly:Chaos_West&quot;&gt;The Chaos West Assembly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tehnoetic.com/&quot;&gt;Technoethical&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We definitely intend to return for 35C3 in December 2018.  Until then, &lt;em&gt;Tuwat!&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/01/03/34c3-summary.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/01/03/34c3-summary.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin's Jeremy Rand and Jonas Ostman will be at 34C3</title>
        <description>&lt;p&gt;Namecoin developers Jeremy Rand and Jonas Ostman will attend &lt;a href=&quot;https://events.ccc.de/congress/2017/wiki/index.php/Main_Page&quot;&gt;34C3 (the 34th Chaos Communication Congress)&lt;/a&gt; in Leipzig, December 27-30.  There’s a good chance that the 34C3 Monero Assembly will host some Namecoin talks.  We’re looking forward to the congress!&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Dec 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/12/23/34c3.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/12/23/34c3.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Lightweight SPV Lookup Client 0.2.7 Beta 1 Source Code Available</title>
        <description>&lt;p&gt;Version 0.2.7 Beta 1 of the Namecoin Lightweight SPV Lookup Client has had its source code released.  &lt;a href=&quot;/docs/bitcoinj-name-lookups/&quot;&gt;Build instructions are here (it’s the “bleeding-edge branch”).&lt;/a&gt;  Binaries will be made available later.  Meanwhile, the former bleeding-edge branch (the branch that introduced leveldbtxcache mode) has graduated to partially-stable.  The former partially-stable branch has been deprecated.&lt;/p&gt;

&lt;p&gt;Happily, the 0.2.7 Beta 1 release is using an unmodified upstream libdohj, since Ross Nicoll from Dogecoin has merged all of my changes.  I’m still working to get the relevant ConsensusJ (formerly bitcoinj-addons) code merged upstream.  &lt;strong&gt;As usual, the SPV client is experimental.  Namecoin Core is still substantially more secure against most threat models.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/11/30/spv-lookup-0.2.7-beta-1.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/11/30/spv-lookup-0.2.7-beta-1.html</guid>
        
        <category>Releases</category>
        
        <category>libdohj Releases</category>
        
        
      </item>
    
  </channel>
</rss>
