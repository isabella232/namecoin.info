<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>https://www.namecoin.org//</link>
    <atom:link href="https://www.namecoin.org//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 25 Aug 2019 20:06:01 +0000</pubDate>
    <lastBuildDate>Sun, 25 Aug 2019 20:06:01 +0000</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>Fixing a gzip Reproducibility Bug in Tor Browser and rbm</title>
        <description>&lt;p&gt;As I’ve &lt;a href=&quot;/2019/08/06/decoupling-ncdns-go-versions.html&quot;&gt;discussed before&lt;/a&gt;, Namecoin is using Tor’s rbm-based build system for our various Go projects, such as ncdns and ncp11, in order to reduce the risk of supply-chain attacks.  Naturally, one of the important ways to test a reproducible build system is to build a binary twice in a row and see if the hashes are the same.  If the hashes don’t match, then tools like &lt;a href=&quot;https://diffoscope.org/&quot;&gt;Diffoscope&lt;/a&gt; can be used to figure out what the source of the reproducibility failure is.  Now that Namecoin’s usage of rbm is reasonably stable (i.e. working binaries are produced for most of Namecoin’s software now), it’s a good time to look into how reproducible our binaries are.&lt;/p&gt;

&lt;p&gt;So, I tried building ncdns twice to see if I got matching hashes.  Alas, the hashes did not match.  Plugging the results into Diffoscope yielded the information that the files within the &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; archive were indeed identical, but that the time value embedded in the gzip header was nonreproducible.  Given that this didn’t seem like anything I had screwed up on my end, I tried building a &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; binary from upstream Tor Browser.  Same issue: nonreproducible binaries due to gzip header time values.&lt;/p&gt;

&lt;p&gt;I also observed that &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt; binaries weren’t affected by the issue.  This would explain why upstream Tor hadn’t noticed or fixed the bug on their end – all of their end-user binaries are &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt;; &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; is only used by Tor for intermediate binaries, which probably aren’t tested for reproducibility as thoroughly.  Obviously, Namecoin could work around the issue by switching to &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt; for end-user binaries (I was planning to do this anyway since &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt; archives have much better compression), but since Namecoin likes to be a good neighbor, I figured it was a good idea to report the bug upstream to Tor.&lt;/p&gt;

&lt;p&gt;After some discussion with Nicolas from Tor (lead developer of rbm), we converged on a 2-line patch to rbm that should resolve the issue.  Once this patch is merged upstream, Namecoin binaries will be substantially closer to reproducibility, and as a bonus, the intermediate binaries produced by Tor will probably be reproducible too.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/08/25/fixing-a-gzip-reproducibility-bug-in-tor-browser-and-rbm.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/08/25/fixing-a-gzip-reproducibility-bug-in-tor-browser-and-rbm.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncdns v0.0.9.2 Released</title>
        <description>&lt;p&gt;We’ve released ncdns v0.0.9.2.  List of changes in v0.0.9.2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All platforms:
    &lt;ul&gt;
      &lt;li&gt;New build system based on The Tor Project’s rbm.  This paves the way for reproducible builds.&lt;/li&gt;
      &lt;li&gt;Add an optional mode to &lt;code class=&quot;highlighter-rouge&quot;&gt;generate_nmc_cert&lt;/code&gt; that creates a name-constrained CA cert instead of an end-entity cert.  This mode is required for Tor Browser TLS support.&lt;/li&gt;
      &lt;li&gt;Add “URL list” output format to &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdumpzone&lt;/code&gt;.  This paves the way for a decentralized search engine for Namecoin websites.&lt;/li&gt;
      &lt;li&gt;Make Namecoin RPC timeout configurable.  This improves compatibility with Tor Browser.&lt;/li&gt;
      &lt;li&gt;Move &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; to its own repo.  This improves compatibility with Tor Browser.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows:
    &lt;ul&gt;
      &lt;li&gt;Automatically re-run &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrictnss&lt;/code&gt; when NSS is updated; this improves TLS support for Firefox.&lt;/li&gt;
      &lt;li&gt;Upgrade dnssec-keygen to v9.13.3.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;New projects:
    &lt;ul&gt;
      &lt;li&gt;DNSSEC-HSTS v0.0.1: A WebExtension that prevents sslstrip attacks for Namecoin websites that support TLS.  See my 35C3 slides for more details.&lt;/li&gt;
      &lt;li&gt;ncp11 v0.0.1: Enables Namecoin TLS in browsers that support PKCS#11, such as Tor Browser.  See my 35C3 slides for more details.&lt;/li&gt;
      &lt;li&gt;ncprop279 v0.0.1: Enables Namecoin resolution in Tor; somewhat smaller and more efficient than dns-prop279.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Code quality improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#ncdns&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/08/15/ncdns-v0.0.9.2-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/08/15/ncdns-v0.0.9.2-released.html</guid>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>Killing Namecoin's Fork of Conformal's btcd</title>
        <description>&lt;p&gt;One of the lesser-known dirty secrets of the ncdns codebase [1] is that it relies on an unmaintained fork of Conformal’s btcd, which dates back to 2015.  Specifically, ncdns uses a fork of the JSON-RPC client from btcd in order to query Namecoin Core, ConsensusJ-Namecoin, or Electrum-NMC.  Why did Namecoin not find upstream btcd to be sufficient?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;btcd’s RPC client expected a modern Bitcoin Core codebase to be used, and in 2015 Namecoin was somewhat behind upstream Bitcoin Core.  Thus Hugo needed to add a patch to avoid compatibility issues.&lt;/li&gt;
  &lt;li&gt;btcd’s RPC client expected JSON-RPC 1.0 to be used, and errored when it encountered JSON-RPC 2.0.  Both ConsensusJ-Namecoin and Electrum-NMC use JSON-RPC 2.0, so I had to add a patch to avoid that error.&lt;/li&gt;
  &lt;li&gt;btcd’s RPC client didn’t support cookie authentication, and Namecoin Core is easiest to set up when cookie authentication is in use.  Thus Hugo had to implement cookie authentication.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To make matters more complicated, Conformal decided to rewrite btcd’s JSON-RPC client from scratch a few months after Namecoin forked it; the rewrite has a completely different API, so it wasn’t a drop-in replacement.  This was yet further complicated by the fact that one of the features in the original btcd JSON-RPC client’s API allowed adding custom RPC methods for altcoins (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_scan&lt;/code&gt;), which ncdns relied on; the rewrite’s API doesn’t expose that functionality nearly as cleanly.&lt;/p&gt;

&lt;p&gt;We’ve been throwing around the idea of using upstream Conformal’s btcd package for a while, but finally I decided to start implementing it.  Happily, Conformal includes example code for using the new API, so it wasn’t hard to get it to talk to Namecoin Core.  I submitted a patch to Conformal that exposes the API features needed for custom RPC methods (the patch was pretty easy to write, and hopefully will be merged soon).  I also implemented &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_scan&lt;/code&gt; for btcd.  (ncdns also includes support for &lt;code class=&quot;highlighter-rouge&quot;&gt;name_filter&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_sync&lt;/code&gt;, but these methods weren’t actually used for anything and aren’t even included in current Namecoin Core releases, so I didn’t bother implementing them.)  Happily, issues (1) and (2) are no longer relevant, because ancient versions of Namecoin Core have long ago been phased out, and upstream btcd now supports JSON-RPC 2.0 without erroring.  Conveniently, the new API looks very similar to a custom high-level API that ncdns had implemented itself, so I was able to kill off quite a lot of glue code in ncdns as well.&lt;/p&gt;

&lt;p&gt;Finally, I ported Hugo’s cookie authentication code to btcd.  This wasn’t particularly difficult, since most of the relevant code could be copied from ncdns into btcd without major changes.  (ncdns is GPLv3+-licensed, while btcd is ISC-licensed, but Hugo is the only developer who’s touched the relevant code, and he’s authorized re-licensing that code to both MIT and ISC licenses, so licensing concerns aren’t an issue.)&lt;/p&gt;

&lt;p&gt;Killing off the legacy Namecoin fork of btcd will be an important step toward making Namecoin more secure, since unmaintained code is a potential source of bugs and vulnerabilities.  It also means we’ll benefit from whatever features Conformal has added since 2015, and whatever features they add in the future.  Now we just wait for Conformal to review the patches.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;

&lt;p&gt;[1] Of course, nothing is really secret in the ncdns codebase, since it’s free software.  That said, it’s rare for people to actually thoroughly check the dependency tree of free software they work with, which makes it a bit of a de facto secret.&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/08/14/killing-namecoin-fork-of-conformal-btcd.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/08/14/killing-namecoin-fork-of-conformal-btcd.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Decoupling ncdns Versions from Go Compiler Versions</title>
        <description>&lt;p&gt;One of the many pieces of witchcraft that Namecoin’s TLS interoperability requires is the ability to splice a signature into an X.509 certificate without otherwise modifying the certificate.  Unfortunately, while the Go standard crypto library is generally quite pleasant to use (and is certainly better-designed than most other crypto libraries such as OpenSSL), the functions relevant to splicing a signature are not exported.  This is understandable, since it’s not functionality that most users have any need for.  However, since Namecoin &lt;em&gt;does&lt;/em&gt; need that functionality, my only option back when this code was being written was to fork the &lt;code class=&quot;highlighter-rouge&quot;&gt;crypto/x509&lt;/code&gt; package from Go’s standard library.&lt;/p&gt;

&lt;p&gt;I didn’t want to be responsible for maintaining or distributing a fork of Go’s library, though.  So, the best option I could come up with was to use &lt;code class=&quot;highlighter-rouge&quot;&gt;go generate&lt;/code&gt;, which is a fun feature in Go’s build system.  In Namecoin’s case, the ncdns build process uses &lt;code class=&quot;highlighter-rouge&quot;&gt;go generate&lt;/code&gt; to copy the source code from the official &lt;code class=&quot;highlighter-rouge&quot;&gt;crypto/x509&lt;/code&gt; package into the &lt;code class=&quot;highlighter-rouge&quot;&gt;github.com/namecoin/ncdns/x509&lt;/code&gt; package, which (when combined with the single existing source code file, &lt;code class=&quot;highlighter-rouge&quot;&gt;x509_splice.go&lt;/code&gt;), produces a package that’s identical to upstream &lt;code class=&quot;highlighter-rouge&quot;&gt;crypto/x509&lt;/code&gt; but with an extra exported function (&lt;code class=&quot;highlighter-rouge&quot;&gt;CreateCertificateWithSplicedSignature&lt;/code&gt;) that calls out to the unexported upstream functions in order to do what we want.  The benefit here is that whenever those unexported upstream functions are updated in a new Go release, Namecoin’s forked package will automatically inherit those changes without the Namecoin developers needing to do anything.  In fact, in theory the same forked package will work unmodified with arbitrary versions of the Go standard library, without us needing to do anything special.&lt;/p&gt;

&lt;p&gt;Alas, theory does not always equal practice.  The most obvious scenario in which this theory will fall apart is if the unexported functions called by &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateCertificateWithSplicedSignature&lt;/code&gt; change their API.  Upstream is well within their rights to do this, of course: they’re not exported functions, so there’s no reason to expect a stable API.  However, in practice, this API changes quite rarely.  The more common issue I’ve been encountering, surprisingly, is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;go generate&lt;/code&gt; script has trouble &lt;em&gt;finding and copying&lt;/em&gt; the upstream library, because upstream seems to keep changing the details of where this library and its dependencies (some of which are internal-only libraries) can be found.  The result is that I’ve had to rebase our fork against upstream every couple of major Go releases to keep things working well.&lt;/p&gt;

&lt;p&gt;The problem here is that this has the effect of coupling a specific commit hash of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdns&lt;/code&gt; repository to a specific range of Go compiler versions.  If Namecoin rebases against a new Go standard library version, and then issues an ncdns bug fix that’s unrelated to our &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; fork, everyone who’s downstream of us needs to update their Go compiler in order to get the bug fix.  This is generally problematic since lots of downstream distributors have other considerations for when they update their compiler.  It was specifically causing me problems for getting ncdns to build in Tor’s rbm-based build system, because Tor is not likely to update their Go compiler exactly when Namecoin does.&lt;/p&gt;

&lt;p&gt;So, what to do?  Well, note that there’s no fundamentally important reason for the &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; package to be a subpackage of ncdns.  It ended up there by default because it was initially only used by ncdns and there wasn’t an obvious reason to create a new Git repo, but now we have a good reason to move it to its own repo: if the Git commit hash of ncdns and &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; are independent, then downstream distributors can pick the version of ncdns with whatever bug fixes they want, and independently choose the version of &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; that supports whatever Go compiler version they want.  I’ve now done this.  &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; now lives at &lt;a href=&quot;https://github.com/namecoin/x509-signature-splice/tree/master/x509&quot;&gt;github.com/namecoin/x509-signature-splice/x509&lt;/a&gt; , and branches are available for every version of the Go compiler that we’ve ever supported, ranging from Go 1.5.x all the way through Go 1.13.x.  (Note that the Go 1.12.x and Go 1.13.x support is new, as both of those Go releases required rebases in order for &lt;code class=&quot;highlighter-rouge&quot;&gt;go generate&lt;/code&gt; to run without errors.  So if you use one of those Go versions, you’ll find this work especially useful.)&lt;/p&gt;

&lt;p&gt;The two final steps here are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Removing &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; from the ncdns repo and switching over to the new repo; this has now been merged.&lt;/li&gt;
  &lt;li&gt;Updating ncdns-repro to use the new ncdns version; this will happen soon.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/08/06/decoupling-ncdns-go-versions.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/08/06/decoupling-ncdns-go-versions.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>OpenNIC does the right thing: listens to security concerns and shuts down its centralized Namecoin inproxy</title>
        <description>&lt;p&gt;In September 2018, I published &lt;a href=&quot;/2018/09/24/how-centralized-inproxies-make-everyone-less-safe-case-study.html&quot;&gt;a case study&lt;/a&gt; about centralized inproxies and how they can cause security dangers even to competent users who think they’re using a decentralized system.  Although my article wasn’t targeted at any particular entity (like all case studies, it uses a specific entity to make generalizations about a wider field), the case study used OpenNIC’s inproxy as an example.  (The fact that OpenNIC ended up as the example isn’t due to any fault of OpenNIC, it’s simply that the sysadmin mentioned in the case study happened to be an OpenNIC user.)  In December 2018, &lt;a href=&quot;https://prism-break.org/&quot;&gt;PRISM Break&lt;/a&gt; maintainer Yegor Timoshenko (who is a friend of Namecoin) independently raised similar security concerns about OpenNIC’s Namecoin inproxy, commenting in PRISM Break’s Matrix channel “i’m not too happy we recommend dns servers that resolve .bit for users, it seems to be nearly as much helpful as resolving .onion” and subsequently proposing that PRISM Break avoid recommending DNS services that include that kind of functionality.&lt;/p&gt;

&lt;p&gt;Guess what?  OpenNIC listened to the concerns of Yegor and myself, and has decided to shut down their centralized Namecoin inproxy.  This was probably not an easy decision, as OpenNIC’s Namecoin inproxy had been a significant usage draw for OpenNIC, and it is likely that a significant portion of OpenNIC users (who were using OpenNIC solely for its Namecoin inproxy) will move to decentralized methods and leave OpenNIC’s other TLD’s behind.  Most corporate actors probably wouldn’t have done this.  But it was the right decision.&lt;/p&gt;

&lt;p&gt;I’d like to thank OpenNIC for taking Yegor’s and my concerns seriously.  I regularly recommend OpenNIC (the non-&lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; TLD’s) to users who don’t need Namecoin’s security model but who want a regulatory environment that isn’t subject to ICANN policies; I will continue to do so.  If you happen to hang around the OpenNIC community, I encourage you to thank OpenNIC for this decision as well.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This news post was intended to be posted near the beginning of July 2019, but was delayed because I was busy attending the Tor developer meeting in Stockholm.  I apologize for the delay.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/07/30/opennic-does-right-thing-shuts-down-centralized-inproxy.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/07/30/opennic-does-right-thing-shuts-down-centralized-inproxy.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Core 0.18.0 Released, Softfork Incoming at Mainnet Block Height 475,000</title>
        <description>&lt;p&gt;Namecoin Core 0.18.0 has been released on the &lt;a href=&quot;/download/#namecoin-core-client-stable-release&quot;&gt;Downloads page&lt;/a&gt;.  This release schedules a softfork for block height 475,000 on mainnet.  Contained in the softfork are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;P2SH&lt;/li&gt;
  &lt;li&gt;CSV&lt;/li&gt;
  &lt;li&gt;SegWit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All three of these softfork components are already active in Bitcoin, and should be uncontroversial.  We had originally discussed lowering the block weight limit as part of this softfork, but we decided to defer block weight discussion for a later date, as the extra review procedures involved in changing the block weight limit would have delayed the release, and we wanted to get the softfork activated as soon as feasible.  So, for this softfork, the block weight limit is the same as that of Bitcoin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Due to the softfork, we strongly recommend that miners, exchanges, registrars, explorers, ElectrumX servers, and all other service providers upgrade as soon as possible.&lt;/strong&gt;  End users who do not need the name management GUI are also strongly encouraged to upgrade.&lt;/p&gt;

&lt;p&gt;At this time, the estimated activation date of the softfork is 82 days from now.  However, this may vary depending on hashrate fluctuations, so do not wait until the last minute to upgrade.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/namecoin/namecoin-core/issues/239&quot;&gt;#239&lt;/a&gt; for more details on the softfork.&lt;/p&gt;

&lt;p&gt;Also included in this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Windows binaries are available again.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; argument for &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_update&lt;/code&gt; can now be used to specify per-RPC encodings for names and values by setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;nameEncoding&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;valueEncoding&lt;/code&gt; fields, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name_scan&lt;/code&gt; now accepts an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; argument, which can be used to specify filtering conditions (based on number of confirmations, prefix and regexp matches of a name).  See &lt;a href=&quot;https://github.com/namecoin/namecoin-core/issues/237&quot;&gt;#237&lt;/a&gt; for more details.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name_filter&lt;/code&gt; has been removed.  Instead, &lt;code class=&quot;highlighter-rouge&quot;&gt;name_scan&lt;/code&gt; with the newly added filtering options can be used.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ismine&lt;/code&gt; is no longer added to RPC results if no wallet is associated to an RPC call.&lt;/li&gt;
  &lt;li&gt;Numerous improvements from upstream Bitcoin Core.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/07/05/namecoin-core-0.18.0-released-softfork-incoming-475000.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/07/05/namecoin-core-0.18.0-released-softfork-incoming-475000.html</guid>
        
        <category>Alerts</category>
        
        <category>Namecoin Core Alerts</category>
        
        <category>Releases</category>
        
        <category>Namecoin Core Releases</category>
        
        
      </item>
    
      <item>
        <title>ncp11 Now Works in Tor Browser for Windows</title>
        <description>&lt;p&gt;ncp11 is now working (both positive and negative TLS certificate overrides) in Tor Browser for Windows.  It turned out that the only things keeping it from working properly once it &lt;a href=&quot;/2019/06/15/ncp11-now-builds-for-windows.html&quot;&gt;built without errors&lt;/a&gt; were a couple of GNU/Linux-specific file path assumptions, both of which were quite easy to fix.&lt;/p&gt;

&lt;p&gt;Actually testing it was mildly tricky, due to the fact that I was trying to use StemNS (a fork I made of meejah’s TorNS tool) for the DNS resolution in Tor Browser, and it turns out that there was a bug in both upstream TorNS and StemNS that caused the Prop279 implementation to launch with an empty set of environment variables.  In GNU/Linux, this is harmless, but (surprise, surprise) in Windows this causes a variety of horrible effects, chief among which is that cryptographic software will be unable to generate random numbers and thus will crash.  I was going to find that out anyway once the Tor community started messing with StemNS, so probably a good thing that I found it early.  (I wish it hadn’t taken me quite so long to figure out why things were crashing, but alas, that’s life.)  StemNS now has a fix for that bug, and I’ve submitted a fix upstream to TorNS as well.&lt;/p&gt;

&lt;p&gt;So, my estimate of what remains before we can release Tor Browser TLS support:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get the remaining PR’s merged to the relevant repos (in particular, ncdns-repro has a few pending PR’s that are needed for this).&lt;/li&gt;
  &lt;li&gt;Tag a release and build/upload binaries.&lt;/li&gt;
  &lt;li&gt;Write some documentation (should be easy to adapt from the 35C3 workshop notes).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Meanwhile, I also tried ncp11 in Firefox for Windows (same installation method as in Tor Browser), and ran into some severe trouble there.  As far as I can tell, the ncp11 library is failing very early in the boot process: it doesn’t even get as far as running the &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; functions in the Go code.  Firefox gives a relatively useless “library failure” error, which is presumably a different code path from the “library failure” error that I’m getting in Debian when loading ncp11 into Firefox via a totally different installation method from the Tor Browser method.&lt;/p&gt;

&lt;p&gt;Inspecting Mozilla’s CKBI library and ncp11 with the &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; commmand yielded 2 noticeable differences in file format:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CKBI’s PE metadata is set to use the GUI subsystem, while ncp11 is set to use the console subsystem.&lt;/li&gt;
  &lt;li&gt;CKBI isn’t stripped, while ncp11 is stripped.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Difference 1 was ruled out by switching ncp11’s PE metadata to use the GUI subsystem; it didn’t help.  Difference 2 is certainly a possible explanation, and I’ll spend some time later checking what happens if ncp11 isn’t built with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt; linker flag.  That said, I suspect that the best way to figure out what’s going wrong is to patch in some debug output to Firefox and NSS so that I can figure out what code path the “library failure” error is happening in.&lt;/p&gt;

&lt;p&gt;However, as curious as I am to see what’s failing in Firefox, it should be noted that ncp11’s current funding from NLnet is contingent on Tor Browser support, not Firefox support, which means that I’m unlikely to spend a lot of time debugging the Firefox failure in the near future (especially since the “TLS for Tor Browser” milestone for NLnet has already gone severely over-budget due to the unexpectedly large amount of R&amp;amp;D needed to produce ncp11).  I’ll probably resume the Firefox debugging after we’ve secured more funding for this effort.&lt;/p&gt;

&lt;p&gt;In the meantime, Namecoin TLS support for Tor Browser is likely to be released very soon.  Yay!&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/06/18/ncp11-now-works-in-tor-browser-for-windows.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/06/18/ncp11-now-works-in-tor-browser-for-windows.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncp11 Now Builds for Windows Targets</title>
        <description>&lt;p&gt;ncp11 (our next-gen Namecoin TLS interoperability software for Firefox, Tor Browser, and other NSS-based software) now builds without errors for Windows targets, including rbm descriptors.  Getting it to build was a little bit more involved than just tweaking the rbm end of things, because the PKCS#11 spec requires that structs be packed on Windows, while Go doesn’t support packed structs.  So, some minor hackery was needed (I wrote a C function that converts between packed and unpacked structs).  Kudos to Miek Gieben (author of the Go pkcs11 package) for his useful sample code, which made this fix quite easy to code up.&lt;/p&gt;

&lt;p&gt;Meanwhile, qlib (our Go library for DNS queries, based on Miek’s q command-line tool) has also been fixed to build in rbm for Windows targets.  This was just a matter of fixing some sloppiness that snuck into the rbm descriptors, which happened to not be causing any problems on GNU/Linux targets due to dumb luck.  All of our rbm projects that depend on qlib (specifically, certdehydrate-dane-rest-api and dnssec-hsts-native) also now build for Windows targets.&lt;/p&gt;

&lt;p&gt;It should be noted that ncp11 probably doesn’t actually &lt;em&gt;work&lt;/em&gt; as intended on Windows and macOS targets yet.  I already fixed a couple of GNU/Linux-specific assumptions in ncp11’s codebase yesterday, and there are likely to be more that will need fixing before ncp11 will actually be usable on Windows and macOS targets.  Presumably these will be teased out with further testing.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/06/15/ncp11-now-builds-for-windows.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/06/15/ncp11-now-builds-for-windows.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>More rbm Projects Added: DNSSEC-HSTS, certdehydrate-dane-rest-api, Dependencies, and macOS Support</title>
        <description>&lt;p&gt;A few days ago I &lt;a href=&quot;/2019/06/12/ncp11-now-builds-in-rbm-gnu-linux-64-bit-and-32-bit.html&quot;&gt;mentioned &lt;/a&gt; that ncp11 now builds in rbm.  As you may recall, rbm is the build system used by Tor Browser; it facilitates reproducible builds, which improves the security of the build process against supply-chain attacks.  I’ve now added several new projects/targets to Namecoin’s rbm descriptors:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DNSSEC-HSTS now builds.  For those of you who aren’t familiar with DNSSEC-HSTS, see my &lt;a href=&quot;/2019/05/08/35c3-summary.html&quot;&gt;35C3 slides&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;certdehydrate-dane-rest-api now builds.  This is a backend tool that’s used by both ncp11 and DNSSEC-HSTS.&lt;/li&gt;
  &lt;li&gt;Dependencies of the above, including:
    &lt;ul&gt;
      &lt;li&gt;qlib (a library for flexible DNS queries, based on Miek Gieben’s excellent q CLI tool).&lt;/li&gt;
      &lt;li&gt;crosssign (a library for cross-signing X.509 certificates).&lt;/li&gt;
      &lt;li&gt;safetlsa (a library for converting DNS TLSA records into certificates that are safe to import into a TLS trust store, using dehydrated certificates and name constraints).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ncdns can now be built as a library, not just as an executable.  This was needed in order to build certdehydrate-dane-rest-api.&lt;/li&gt;
  &lt;li&gt;ncdns now builds for macOS.&lt;/li&gt;
  &lt;li&gt;Several library dependencies were updated; this fixes a number of bugs that existed due to accidentally using outdated dependencies.  (Chief among them was a bug that broke ncdns’s ability to talk to ConsensusJ-Namecoin and Electrum-NMC.)  Thanks to grringo for catching this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve also submitted a patch to upstream Tor that will hopefully allow us to make our rbm descriptors a lot cleaner.  Specifically, upstream Tor has a special template for building Go libraries, but it doesn’t work for Go executables, so Go executable projects need to have a bunch of boilerplate.  My patch allows the Go library template to work with executable projects as well.  That patch is currently awaiting review.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/06/13/more-rbm-projects-dnssec-hsts-certdehydrate-dane-rest-api-macos.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/06/13/more-rbm-projects-dnssec-hsts-certdehydrate-dane-rest-api-macos.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncp11 Now Builds in rbm for GNU/Linux (64-bit and 32-bit)</title>
        <description>&lt;p&gt;ncp11 is the next-gen Namecoin TLS interoperability project that Aerth and I have been cooking up in the Namecoin R&amp;amp;D lab for a while.  (See my &lt;a href=&quot;/2019/05/08/35c3-summary.html&quot;&gt;35C3 slides and workshop notes&lt;/a&gt; for more info on it if you haven’t heard about it yet.)  Last month, I &lt;a href=&quot;/2019/05/16/ncdns-rbm-linux32-win64-win32.html&quot;&gt;mentioned&lt;/a&gt; that I intended to get ncp11 building in rbm.  I now have ncp11 building in rbm for GNU/Linux 64-bit and 32-bit x86 targets.  32-bit support involved fixing a bug in ncdns’s usage of PKCS#11 (specifically, ncp11 was making type assumptions that are only valid on 64-bit targets, which produced a build error on 32-bit targets).  I’ve tested the resulting 64-bit binary in a Debian Buster VM, and it works fine when used as a drop-in replacement for NSS’s CKBI library.  (It looks like there are issues when loaded alongside CKBI, which I’ll need to debug when I have some free time, but this isn’t a release blocker, and the same issues are reproducible with the non-rbm binary I used at 35C3.)&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/06/12/ncp11-now-builds-in-rbm-gnu-linux-64-bit-and-32-bit.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/06/12/ncp11-now-builds-in-rbm-gnu-linux-64-bit-and-32-bit.html</guid>
        
        <category>News</category>
        
        
      </item>
    
  </channel>
</rss>
