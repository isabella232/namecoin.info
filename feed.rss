<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>https://namecoin.org//</link>
    <atom:link href="https://namecoin.org//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 28 May 2018 21:26:47 +0000</pubDate>
    <lastBuildDate>Mon, 28 May 2018 21:26:47 +0000</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>Electrum-NMC: Code Review and Rebase</title>
        <description>&lt;p&gt;Last year, Ahmed &lt;a href=&quot;/2017/06/17/progress-electrum-nmc.html&quot;&gt;posted about his progress&lt;/a&gt; porting Electrum to Namecoin.  Electrum-NMC has been on the back burner for me lately, due to the TLS and BitcoinJ efforts taking up most of my time.  However, today I found time to inspect Ahmed’s branch.&lt;/p&gt;

&lt;p&gt;Three main things were on my agenda:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Code review of the existing changes.  Generally I don’t like to move code to the GitHub Namecoin organization unless I’ve actually reviewed it for sanity.  I made a few tweaks and bugfixes to Ahmed’s code, but for the most part the code review went smoothly.&lt;/li&gt;
  &lt;li&gt;Rebase against current master branch of Electrum.  This actually went surprisingly well, given that Ahmed’s branch is about 11 months old.  The vast majority of the merge conflicts were due to the &lt;code class=&quot;highlighter-rouge&quot;&gt;electrum&lt;/code&gt; package being renamed to &lt;code class=&quot;highlighter-rouge&quot;&gt;electrum-nmc&lt;/code&gt;, which causes unfortunate merge conflicts every time upstream messes with the &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; statements at the top of a Python file.  Unfortunately I don’t know of any way around this, and a cursory check of altcoin Electrum ports shows that they do the same thing, so I guess we’re going to live with it.  The good news is that those types of merge conflicts are very easy to manually resolve.&lt;/li&gt;
  &lt;li&gt;Additional rebranding beyond what Ahmed’s branch does.  In particular, I swapped out the ElectrumX Bitcoin server addresses and replaced them with ElectrumX Namecoin server addresses.  (Right now there’s only 1 public ElectrumX Namecoin server.  We need more of them — if you’d like to help us, please consider starting up an ElectrumX Namecoin server and sending a PR to ElectrumX that adds your server to the public list.)  I also swapped out the Bitcoin block explorers and replaced them with Namecoin explorers.  (I also gave the Namecoin explorers names that include scary warnings for the subset of explorers that are wiretapped by CloudFlare, discriminate against Tor users, don’t support names, or are non-libre.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The resulting code &lt;a href=&quot;https://github.com/namecoin/electrum-nmc&quot;&gt;is now on GitHub&lt;/a&gt;.  I’ve successfully sent some coins from Namecoin Core to Electrum-NMC and back without any difficulty.&lt;/p&gt;

&lt;p&gt;Regarding next steps, I’ll defer to Ahmed’s post:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On the roadmap now are:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Extend electrumX NMC Support to allow for full veritification of AuxPow&lt;/li&gt;
    &lt;li&gt;Modify new electrum client to verify the new AuxPow&lt;/li&gt;
    &lt;li&gt;Add Name handling support to electrum&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hopefully these won’t be incredibly difficult.  I might post binaries of the current codebase before I try to tackle these (but note that I’m not familiar with the Electrum packaging scripts yet, so there’s a good chance that I’ll break something and/or find something that I broke earlier).&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/05/28/electrum-nmc-code-review-rebase.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/05/28/electrum-nmc-code-review-rebase.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>More Fun with tlsrestrict_nss_tool on Windows</title>
        <description>&lt;p&gt;Last episode: When we last left our hero, tlsrestrict_nss_tool &lt;a href=&quot;/2018/05/20/testing-tlsrestrict-nss-tool-windows.html&quot;&gt;had a few unfixed bugs&lt;/a&gt; that made it unusable on Windows.  Everyone believed those bugs would be the final ones.  Were they?  And now, the conclusion to our 2-part special:&lt;/p&gt;

&lt;p&gt;Spoiler alert: no, of course they weren’t the final bugs!  Obviously Murphy needs to keep showing up, otherwise life as an engineer would be boring, right?&lt;/p&gt;

&lt;p&gt;Anyway, so I fixed the 3 known bugs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use of &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;No warning when CKBI is empty.&lt;/li&gt;
  &lt;li&gt;Broken Unicode in nicknames.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And at this point, things &lt;em&gt;almost&lt;/em&gt; worked.  Specifically, I could apply a name constraint that blacklisted &lt;code class=&quot;highlighter-rouge&quot;&gt;.org&lt;/code&gt;, and accordingly &lt;a href=&quot;https://www.namecoin.org/&quot;&gt;the Namecoin website&lt;/a&gt; showed an error, while &lt;a href=&quot;https://tehnoetic.com/&quot;&gt;Technoethical&lt;/a&gt; still worked.  Seems good enough, right?  I certainly thought so, at least enough to announce on #namecoin-dev that I believed it was working.  Except then I had that insane urge to try to torture-test it a bit more.  So I ran tlsrestrict_nss_tool a 2nd time against the same NSS DB and the same CKBI library.  The expected behavior is that it will examine the CKBI and NSS DB, and decide that no additional cross-signing is needed.  Unfortunately, I instead was treated to a fatal error due to an ASN.1 parse error, specifically due to trailing data.&lt;/p&gt;

&lt;p&gt;I’ve seen this error before, and it’s usually triggered by an NSS quirk.  NSS doesn’t actually keep track of each certificate uniquely.  If you put 2 certificates in an NSS DB that have the same Subject, and you ask certutil to give you one of them (doesn’t matter which), certutil will actually give you &lt;em&gt;both of them&lt;/em&gt;, concatenated.  This happens regularly in our usage, because the cross-signed CA and the (distrusted) original CA have the same Subject (by design).&lt;/p&gt;

&lt;p&gt;Further examination of the logs showed that the errors were showing up while trying to handle certs that had a very odd characteristic: their names looked like what you would get from concatenating the Namecoin prefix with an empty string instead of with the name of the certificate.  Given that I had just spent time fixing issues with Unicode encoding of certificate names, this seemed to be a likely culprit.&lt;/p&gt;

&lt;p&gt;So, I made 2 (overdue anyway) changes to the codebase:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Switch from DER to PEM encoding when communicating with certutil.  DER doesn’t have boundaries when you concatenate certificates, while PEM does.  Using PEM should make debugging a lot easier when multiple certs show up with the same name.&lt;/li&gt;
  &lt;li&gt;When dumping a PEM cert from the NSS DB, explicitly check for multiple PEM certs, and if more than one is present, try to guess which one is correct by checking for the Namecoin prefix in its Subject CommonName and Issuer CommonName (this will be unambiguous under typical conditions).  If more than one cert is present that matches the expected prefixes, throw an error and log all of the PEM certs that showed up in the dump.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, with those changes added, I ran it again, and quickly got an error telling me that 9 certs were being returned in a single dump.  How odd.  Conveniently, the log told me what certificate it was trying to dump when this happened: “Namecoin Restricted CKBI Intermediate CA for ePKI Root Certification Authority”.  This didn’t look like a Unicode issue at all – that name is entirely Latin.  So I Googled for “ePKI Root Certification Authority”, and quickly facepalmed.  That root CA &lt;em&gt;doesn’t have a CommonName!&lt;/em&gt;  Suddenly the symptoms made sense.  The root and intermediate CA’s that are created by cross_sign_name_constraint_tool prepend a Namecoin string to the CommonName of the input CA and discard the rest of the input CA’s Subject, meaning that if multiple input CA’s have a blank CommonName, their resulting Namecoin root and intermediate CA’s will end up with colliding Subjects.  Fail.&lt;/p&gt;

&lt;p&gt;The fix, of course, is to append the SHA256 fingerprint of the input CA to the Subject CommonName of the root and intermediate Namecoin CA’s.  This ensures that we’ll get a unique Subject per input certificate.&lt;/p&gt;

&lt;p&gt;And now, it works.  Repeated runs of tlsrestrict_nss_tool work as they should.  Kind of irritating to spend so much time chasing a silly fail like that, but on the bright side the switch to PEM resulted in cleaner code.&lt;/p&gt;

&lt;p&gt;Next, I’ll be integrating tlsrestrict_nss_tool into ncdns.  Hopefully this will expose any remaining weirdness.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/05/21/more-fun-tlsrestrict-nss-tool-windows.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/05/21/more-fun-tlsrestrict-nss-tool-windows.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Testing tlsrestrict_nss_tool on Windows</title>
        <description>&lt;p&gt;Now that we got &lt;a href=&quot;/2018/05/17/reproducible-builds-certutil-cross-compiling-rbm.html&quot;&gt;NSS &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; reproducibly cross-compiled for Windows&lt;/a&gt;, initial testing has begun on &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; for Windows.&lt;/p&gt;

&lt;p&gt;Besides the obvious and rather boring fail that &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; was trying to execute &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt;, which of course isn’t going to work on Windows (that particular code segment is a relic from quick prototyping that wasn’t ever intended to stay in the codebase), two more interesting issues were identified:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;rbm builds &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; with the Visual C++ 2010 runtime, so running &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; without that runtime installed produces an obvious error.  However, in order to properly detect the built-in certificates (“CKBI”) that Firefox ships with, &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; makes &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; load the CKBI module that Firefox distributes (&lt;em&gt;not&lt;/em&gt; the CKBI module that &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; was built with).  This means that, when &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; is asked to load Firefox’s CKBI module, the Visual C++ runtime used by Firefox’s CKBI module also needs to be present.  Which happens to be Visual C++ 2015.  Without that, &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; looks like it’s working – but the moment the Firefox CKBI module is loaded into &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; exits with a missing DLL error.  However, the situation is worsened by the fact that, as far as I can tell, a missing DLL error in Windows doesn’t impact the exit code.  So &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; doesn’t actually know thet &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; encountered an error; it just thinks it succeeded, and happened to produce no output.  What happens if &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; produces no output when dumping the CKBI list?  Well, &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; just figures that you’re using a Firefox build &lt;em&gt;that doesn’t have any default trusted CA’s!&lt;/em&gt;  This is bad enough when you first run &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt;, since it will basically be a no-op.  But even worse, if you &lt;em&gt;did&lt;/em&gt; have the Visual C++ dependency from Firefox, but then Firefox upgraded it, then the next time you try to run &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt;, all of the name constraints that were previously added will get &lt;em&gt;deleted&lt;/em&gt;, because &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; figures that those CA’s have vanished.  How sad.  The fix here is probably to make &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; explicitly error if the CKBI module appears to have 0 certificates in it.  Such a scenario pretty much always indicates that &lt;em&gt;something&lt;/em&gt; has gone horribly wrong involving the CKBI module, and it’s generally best to treat it as an error.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt;’s certificate dumping functions require selecting a certificate by its nickname.  What’s a nickname?  In practice, for the CKBI module it seems to be the CommonName of the certificate.  The nickname is passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; via a command line flag.  What could possibly go wrong here?  Certificate nicknames can be arbitrary text, including Unicode.  What happens when you pass Unicode as a command line argument in Windows?  Nothing good happens, that’s for sure.  In my testing, Windows will corrupt all of the non-ASCII characters, which results in &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; receiving a corrupted nickname to look up (and it correctly replies that no such nickname exists in the database).  The fix here is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt;’s “batch command” feature.  &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; allows you to put a sequence of commands into a &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt; file, and you can pass that &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt; file’s path to &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; with a command line flag; &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; will then run all of those commands.  Since the &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt; file isn’t parsed by Windows’s broken command line text decoder, Unicode inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt; file passes through unharmed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, I haven’t actually &lt;em&gt;fixed&lt;/em&gt; these bugs yet.  But, progress is progress.  Hopefully fixes will be coming very soon.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/05/20/testing-tlsrestrict-nss-tool-windows.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/05/20/testing-tlsrestrict-nss-tool-windows.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Reproducible Builds of NSS certutil via Cross-Compiling with rbm</title>
        <description>&lt;p&gt;In a previous post &lt;a href=&quot;/2018/03/26/integrating-cross-signing-name-constraints-nss.html&quot;&gt;where I introduced &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt;&lt;/a&gt;, I mentioned that NSS’s &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; doesn’t have official binaries for Windows, and that “At some point, we’ll probably need to start cross-compiling NSS ourselves, although I admit I’m not sure I’m going to enjoy that.”  Well, we’ve reached that point, and it was an interesting adventure.&lt;/p&gt;

&lt;p&gt;Initially, I looked at the NSS build docs themselves, and was rather annoyed to find that there’s no documentation about how to cross-compile NSS.  To make matters worse, the only results I could find by Startpaging were people saying that they couldn’t figure out how to cross-compile NSS (including some well-known software projects’ developers).&lt;/p&gt;

&lt;p&gt;However, it just so happens that there’s a very high-profile free software project whom I was certain is definitely cross-compiling NSS: The Tor Project.  Tor cross-compiles Firefox (including NSS) as part of their Tor Browser build scripts, so it seemed near-certain that their build scripts could be modified to build &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt;.  However, Tor’s build scripts are rather nonstandard, since they build everything with rbm.  rbm is a container-based build system that’s superficially similar to the Gitian build system that Bitcoin Core and Namecoin Core use (indeed, The Tor Project used to use Gitian before they migrated to rbm).  I’ve been intending to get my feet wet with rbm for quite a while now, so this seemed like a great excuse to play with rbm a bit.&lt;/p&gt;

&lt;p&gt;First off, I wanted to build Firefox in rbm without any changes.  This was actually quite easy – The Tor Project’s documentation is quite good, and I didn’t run into any snags (besides the issue that I initially assigned too little storage to the VM where I was doing this – The Tor Project should probably document the expected storage requirements).  The build command I used was:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./rbm/rbm build firefox --target nightly --target torbrowser-windows-i686
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, I looked at Tor’s Firefox build script… and I was delighted to see that Tor is &lt;em&gt;already&lt;/em&gt; building &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt;.  In fact, you can &lt;a href=&quot;http://rqef5a5mebgq46y5.onion/torbrowser/&quot;&gt;download &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; binaries from The Tor Project’s download server&lt;/a&gt; right now!  (You want the &lt;code class=&quot;highlighter-rouge&quot;&gt;mar-tools-*.zip&lt;/code&gt; packages.)  Except… their build script discards the &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; binaries for all non-GNU/Linux targets.  How sad.&lt;/p&gt;

&lt;p&gt;Modifying the build script to also output &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; for Windows was reasonably straightforward – rbm even worked without erroring on the first try.  I did, however, need to try for a few iterations to make sure that I was outputting all of the needed &lt;code class=&quot;highlighter-rouge&quot;&gt;.dll&lt;/code&gt; files.  However, once I had all the required &lt;code class=&quot;highlighter-rouge&quot;&gt;.dll&lt;/code&gt; files, a rather odd symptom occurred when I tested it on a Windows machine.  When I ran &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; from a command prompt, it would immediately exit without printing anything.  Stranger, when I double-clicked &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; in Windows Explorer, it didn’t even pop up with a command prompt window before it exited.  In addition, I noticed that if I passed command line arguments to &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; telling it to create a new database, it actually did create the database – but it still didn’t display any output.&lt;/p&gt;

&lt;p&gt;This seemed to indicate that something was wrong not with &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt;’s actual functionality, but with its PE metadata: Windows was probably treating it as a GUI application rather than a console application.  Checking the PE metadata confirmed this: Tor’s build scripts were producing a &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; whose PE metadata was marking it as a GUI application.  Some more quick searching revealed &lt;a href=&quot;https://stackoverflow.com/questions/2435816/how-do-i-poke-the-flag-in-a-win32-pe-that-controls-console-window-display/14806704#14806704&quot;&gt;a StackOverflow post&lt;/a&gt; providing a short Python2 script that could edit that part of the PE metadata.  I ran that script against &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt;… and now &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; works properly.  Yay!&lt;/p&gt;

&lt;p&gt;The lack of &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; binaries was one of the major blockers for releasing negative TLS certificate overrides for Firefox on Windows.  Now that this barrier is behind us, I can get around to testing &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; on Windows, and hopefully do a release (with NSIS installer support).  And as a side bonus, &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil.exe&lt;/code&gt; builds reproducibly, and I’ve now gotten some experience with rbm (meaning that reproducible builds for ncdns and our other Go software may be coming soon).&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/05/17/reproducible-builds-certutil-cross-compiling-rbm.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/05/17/reproducible-builds-certutil-cross-compiling-rbm.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Integrating ncdumpzone's Firefox TLS Mode into ncdns</title>
        <description>&lt;p&gt;I &lt;a href=&quot;/2018/02/20/ncdumpzone-firefox.html&quot;&gt;discussed in a previous post&lt;/a&gt; some experimental work on making ncdumpzone output a Firefox certificate override list.  At that time, the procedure wasn’t exactly user-friendly: you’d need to run ncdumpzone from a terminal, redirect the output to a file, close Firefox, delete whatever existing &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; entries existed in the existing Firefox certificate override file, append the ncdumpzone output to that file, and relaunch Firefox.  I’ve now integrated some code into ncdns that can automate this procedure.&lt;/p&gt;

&lt;p&gt;One of the trickier components of this was detecting whether Firefox was open.  Firefox’s documentation claims that it uses a lockfile, but as far as I can tell Firefox doesn’t actually delete its lockfile when it exits (and I’ve seen similar reports from other people).  Eventually, I decided to just watch the contents of my Firefox profile directory (sorted by Last Modified date) as Firefox opened and closed, and I noticed that Firefox’s sqlite databases produce some temporary files (specifically, files with the &lt;code class=&quot;highlighter-rouge&quot;&gt;.sqlite-wal&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.sqlite-shm&lt;/code&gt; extension) that are only present when Firefox is open.  So that’s a decent hack to detect that Firefox is open.&lt;/p&gt;

&lt;p&gt;Given that, ncdns now creates 2 extra threads: &lt;code class=&quot;highlighter-rouge&quot;&gt;watchZone&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;watchProfile&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;watchZone&lt;/code&gt; dumps the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; zone with ncdumpzone every 10 minutes, and makes that data available to &lt;code class=&quot;highlighter-rouge&quot;&gt;watchProfile&lt;/code&gt;.  (Right now, ncdumpzone is called as a separate process, which isn’t exactly ideal – a future revision will probably refactor ncdumpzone into a library so that we can avoid this inefficiency.)  &lt;code class=&quot;highlighter-rouge&quot;&gt;watchProfile&lt;/code&gt; waits for Firefox to exit (it checks at 1 Hz), and then loads Firefox’s &lt;code class=&quot;highlighter-rouge&quot;&gt;cert_override.txt&lt;/code&gt; into memory, removes any existing &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; lines, appends the data from &lt;code class=&quot;highlighter-rouge&quot;&gt;watchZone&lt;/code&gt;, and writes the result back to Firefox’s &lt;code class=&quot;highlighter-rouge&quot;&gt;cert_override.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These 2 new threads in ncdns are deliberately designed to kill ncdns if they encounter any unexpected errors.  This is because, if we stop syncing the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; zone to the Firefox override list, Firefox will continue trusting &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; certs that might be revoked in Namecoin.  Therefore, it is important that, in such a situation, &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains must stop resolving until the issue is corrected.  Forcing ncdns to exit seems to be the least complex way to reliably achieve this.&lt;/p&gt;

&lt;p&gt;These changes significantly improve the UX of positive TLS certificate overrides for Firefox.  A pull request to ncdns should be coming soon.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/05/14/integrating-ncdumpzone-firefox.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/05/14/integrating-ncdumpzone-firefox.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Fixing DNAME records in madns and dns-prop279</title>
        <description>&lt;p&gt;One of the more obscure DNS record types is &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; (AKA the Namecoin &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;translate&quot;&lt;/code&gt; JSON field), which is basically a DNS redirect for an entire subtree.  For example, currently &lt;code class=&quot;highlighter-rouge&quot;&gt;radio.bit.&lt;/code&gt; has a &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; record pointing to &lt;code class=&quot;highlighter-rouge&quot;&gt;biteater.dtdns.net.&lt;/code&gt;, which means that any subdomain (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;batman.radio.bit.&lt;/code&gt;) becomes a &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; redirect (e.g. to &lt;code class=&quot;highlighter-rouge&quot;&gt;batman.biteater.dtdns.net.&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; is not exactly a favorite of mine in the context of Namecoin, because it’s easy to misuse it in a way that assigns trust for a Namecoin domain name to 3rd party keys whom Namecoin is intended to not trust (e.g. if you &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;radio.bit.&lt;/code&gt; to a DNS domain name, you’re also assigning control of the &lt;code class=&quot;highlighter-rouge&quot;&gt;TLSA&lt;/code&gt; records for &lt;code class=&quot;highlighter-rouge&quot;&gt;_443._tcp.radio.bit.&lt;/code&gt; to whatever DNSSEC keys have the ability to sign for that DNS domain name, which probably includes a DNS registrar, a DNS registry, and the ICANN root key).  That said, &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; is part of the DNS, and so it &lt;em&gt;should&lt;/em&gt; work in Namecoin, even though there aren’t likely to be many good uses for it in Namecoin.&lt;/p&gt;

&lt;p&gt;Which is why I was surprised to notice when I tested &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; today that it wasn’t actually working as intended in ncdns or dns-prop279.  Some digging revealed that madns (the authoritative DNS server library that ncdns utilizes) didn’t actually have any &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; support; the place in the code where it should have gone was just marked “TODO”.  This was a great excuse for me to get my feet wet with the madns codebase (Hugo usually handles that code), so I jumped in.&lt;/p&gt;

&lt;p&gt;In the process of adding &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; support to madns, I got to read &lt;a href=&quot;https://tools.ietf.org/html/rfc6672#section-2.3&quot;&gt;RFC 6672&lt;/a&gt;, and noticed that it very much looks like Namecoin’s &lt;code class=&quot;highlighter-rouge&quot;&gt;d/&lt;/code&gt; (domain names JSON) spec is not quite compliant with the RFC.  Specifically, the &lt;a href=&quot;https://github.com/namecoin/proposals/blob/1b0043a98fe8f4cf1a85ec92fdbe98d38b5886b3/ifa-0001.md#item-suppression-rules&quot;&gt;Namecoin spec&lt;/a&gt; says that a &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; at &lt;code class=&quot;highlighter-rouge&quot;&gt;radio.bit.&lt;/code&gt; suppresses all other records at &lt;code class=&quot;highlighter-rouge&quot;&gt;radio.bit.&lt;/code&gt;, whereas the RFC says that other record types can coexist at &lt;code class=&quot;highlighter-rouge&quot;&gt;radio.bit.&lt;/code&gt;, with the sole exception of &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt; records.  I’ve filed a bug to get the Namecoin spec brought in line with the RFC.&lt;/p&gt;

&lt;p&gt;Once I got madns supporting &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; properly, that meant I could test dns-prop279 with &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt;.  Except testing quickly showed that dns-prop279 was crashing when it encountered a &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt;.  A quick check of the stack trace showed that I had made a minor screw-up in the error checking in dns-prop279 (specifically, dns-prop279 is asking for a &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt;, but doesn’t properly handle the case where it receives both a &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt;).  A quick bugfix later, and dns-prop279 was correctly handling &lt;code class=&quot;highlighter-rouge&quot;&gt;DNAME&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The fixes are expected to be included in the next release of ncdns and dns-prop279.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;

&lt;p&gt;(Side note: some readers might have noticed that I was posting less frequently over the past month or so.  That’s because my master’s thesis defense was on May 3, and as a result I spent most of the last month getting ready for that.  I passed my defense, so things should be back to normal soon.)&lt;/p&gt;
</description>
        <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/05/12/fixing-dname-madns-dns-prop279.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/05/12/fixing-dname-madns-dns-prop279.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>cross_sign_name_constraint_tool v0.0.2 and tlsrestrict_nss_tool v0.0.2 Released</title>
        <description>&lt;p&gt;We’ve released &lt;code class=&quot;highlighter-rouge&quot;&gt;cross_sign_name_constraint_tool&lt;/code&gt; v0.0.2 and &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; v0.0.2.  These implement the functionality described in my previous post on &lt;a href=&quot;/2018/03/26/integrating-cross-signing-name-constraints-nss.html&quot;&gt;Integrating Cross-Signing with Name Constraints into NSS&lt;/a&gt; (and the earlier posts that that post links to).&lt;/p&gt;

&lt;p&gt;With this release, in theory Namecoin TLS negative overrides are supported in anything that uses NSS’s trust store (including Firefox on all OS’s, and Chromium on GNU/Linux, without requiring HPKP).&lt;/p&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#cross_sign_name_constraint_tool&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/04/19/cross-sign-name-constraint-tlsrestrict-nss-tools-v0.0.2-released.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/04/19/cross-sign-name-constraint-tlsrestrict-nss-tools-v0.0.2-released.html</guid>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>ncdns v0.0.6 Released</title>
        <description>&lt;p&gt;We’ve released ncdns v0.0.6.  List of changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Windows installer:
    &lt;ul&gt;
      &lt;li&gt;Bump ConsensusJ-Namecoin dependency to v0.2.7.&lt;/li&gt;
      &lt;li&gt;Bump Dnssec-Trigger dependency to v0.15.  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Bump dnssec-keygen dependency to v9.12.1.  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  (Patch by Hugo Landau; reported by Jeremy Rand.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NetBSD:
    &lt;ul&gt;
      &lt;li&gt;Disable NetBSD/ARM builds due to an upstream bug.  NetBSD/ARM builds will return later.  (Patch by Jeremy Rand.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;All OS’s:
    &lt;ul&gt;
      &lt;li&gt;certinject: Add support for NSS trust stores; this enables positive TLS overrides in Chromium on GNU/Linux (and probably various other software that uses NSS for certificate validation.  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;ncdumpzone: Add &lt;code class=&quot;highlighter-rouge&quot;&gt;cert_override.txt&lt;/code&gt; output format; this enables positive TLS overrides in Firefox (and probably various other software based on Firefox).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Fix TLSA records served over DNS (for the lucky users using software that supports DANE).  (Patch by Jeremy Rand; reported by Jefferson Carpenter.)&lt;/li&gt;
      &lt;li&gt;Bundle miekg’s &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;.  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Bundle &lt;code class=&quot;highlighter-rouge&quot;&gt;dns-prop279&lt;/code&gt;.  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Change default Namecoin RPC host from &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;; should fix some RPC errors on Windows.  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  (Patch by Jeremy Rand.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#ncdns&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Apr 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/04/17/ncdns-v0.0.6-released.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/04/17/ncdns-v0.0.6-released.html</guid>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>ConsensusJ-Namecoin v0.2.7 Binaries Available</title>
        <description>&lt;p&gt;Binaries of ConsensusJ-Namecoin (the Namecoin lightweight SPV lookup client) v0.2.7 are now released on the &lt;a href=&quot;/download/betas/#consensusj-namecoin&quot;&gt;Beta Downloads page&lt;/a&gt; page.  This is based on the source code that was &lt;a href=&quot;/2017/11/30/spv-lookup-0.2.7-beta-1.html&quot;&gt;released earlier&lt;/a&gt;.  Notable new things in this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;leveldbtxcache&lt;/code&gt; mode is merged to upstream libdohj, and has therefore had the benefit of more peer review.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;leveldbtxcache&lt;/code&gt; mode now only stores the name scriptPubKey, not the entire transaction.  This significantly improves syncup time and storage usage.  (Currently, it uses around 65 MB of storage, which includes both the name database and the block headers.)&lt;/li&gt;
  &lt;li&gt;Many dependency version bumps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;As usual, ConsensusJ-Namecoin is experimental.  Namecoin Core is still substantially more secure against most threat models.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/04/03/consensusj-0.2.7-binaries.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/04/03/consensusj-0.2.7-binaries.html</guid>
        
        <category>Releases</category>
        
        <category>libdohj Releases</category>
        
        
      </item>
    
      <item>
        <title>Integrating Cross-Signing with Name Constraints into NSS</title>
        <description>&lt;p&gt;At the end of &lt;a href=&quot;/2018/03/25/cross-signing-name-constraints-go.html&quot;&gt;my previous post about porting cross-signing with name constraints to Go&lt;/a&gt;, I mentioned that the next phase was to automate the procedure of applying the constraints to all root CA’s in NSS, instead of needing to manually dump CA’s one-by-one from NSS, run them through my Go tool (currently named &lt;code class=&quot;highlighter-rouge&quot;&gt;cross_sign_name_constraint_tool&lt;/code&gt;, because I’ve exhausted my witty software naming quota on another project&lt;a href=&quot;#footnote1&quot;&gt;[1]&lt;/a&gt;), and import them back into NSS.  I’m happy to report that this next phase is essentially complete, and in my testing I blacklisted certificates for the &lt;code class=&quot;highlighter-rouge&quot;&gt;.org&lt;/code&gt; TLD regardless of which built-in root CA they chained to (without any impact on other TLD’s).&lt;/p&gt;

&lt;p&gt;My previous post went into quite a bit of technical detail (more so than a typical post of mine), mainly because the details of getting Go to cross-sign with name constraints with minimal attack surface were actually rather illuminating.  In contrast, most of the technical details I could provide for this phase are rather boring (in my opinion, at least), so this post will be more high-level and somewhat shorter than the previous post.  (And no code snippets this time!)&lt;/p&gt;

&lt;p&gt;Early on, I had to make a design decision about how to interact with NSS.  There were 3 main options available:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pipe data through &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Link with the NSS shared libraries via cgo.&lt;/li&gt;
  &lt;li&gt;Do something weird with sqlite.  (This category actually includes a wide variety of strange things, including using sqlite’s command line utility, using sqlite with cgo, and using horrifying &lt;code class=&quot;highlighter-rouge&quot;&gt;LD_PRELOAD&lt;/code&gt; hooks to intercept NSS’s interaction with sqlite.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Given that I haven’t used sqlite in several years, and that I’ve never actually used cgo, but I use &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; on a daily (if not hourly) basis these days, it was pretty clear that option 1 was going to be the most effective usage of my development time.  And it actually came together surprisingly fast, into a command-line tool that I call &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; (note the naming similarity to &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_chromium_tool&lt;/code&gt; – the functionality is analogous).  A few of the more “interesting” things I ended up dealing with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; to retrieve a list of all certificate nicknames in a database looks like it returns an error.  I say “looks like” because there’s actually no error.  The standard output contains all the data I asked for, and the standard error is empty.  But for some reason &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; returns exit code 1 (indicating an error), not exit code 0 (indicating success), for this particular operation.  The exit codes for other operations in &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; don’t exhibit this issue.  I ended up just having my code treat exit code 1 as exit code 0 for this particular operation, which seems to work okay.&lt;/li&gt;
  &lt;li&gt;When an NSS database contains 2 different certificates that contain the same Subject and Public Key, NSS actually can’t keep track of which is which.  The metadata stays consistent, but when you ask for the DER-encoded certificate data for 1 of the certificates, NSS decides to give you &lt;strong&gt;both of them&lt;/strong&gt;.  Concatenated together.  This led to me writing some generally horrifying code that tries to check for the presence of a certificate by doing both a prefix and suffix match against a byte slice (since I don’t have any idea what order the certificates will be concatenated in).  It’s probably somewhat safer to change &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; to use PEM encoding rather than DER, since it’s easier to detect boundaries of concatenated PEM blocks.  I’ll probably do this next time I’m cleaning up the code.&lt;/li&gt;
  &lt;li&gt;I accidentally applied a name constraint excluding &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;.org&lt;/code&gt; the first time it ran successfully, and while trying to undo my mistake, I realized I hadn’t ever considered &lt;strong&gt;how to uninstall&lt;/strong&gt; all of these extra certificates.  Back when I was just dealing with a single CA, it was easy to uninstall them via &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; by hand, but at this scale it’s not feasible to do that.  So I ended up adding an extra uninstall mode.  It turned out to be relatively straightforward – apparently my design was flexible enough that this functionality wasn’t hard to add, even though I had never explicitly thought about how I would do it.  &lt;em&gt;Whew!&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;The big one.  Applying the name constraint to the entire NSS built-in certificate list (starting with a mostly-stock database) took &lt;strong&gt;6 minutes and 48 seconds&lt;/strong&gt;.  I strongly suspect that most of this overhead is because NSS doesn’t support sqlite batching, so for every certificate that gets cross-signed, something like 7 sqlite transactions are issued.  On the bright side, my code is smart enough to not attempt to cross-sign certificates for which an existing cross-signature is already present, so the 2nd time you run it, it only takes 20 seconds (which is mostly spent dumping the existing certificates in order to verify that no changes are needed).  Of course, if the trust bits get changed in the built-in list (or if the DER encoded value of a built-in certificate changes), the old cross-signature will be removed, and a new cross-signature will be added.  (Technically there are probably some interesting race conditions here, and properly fixing that is on my to-do list.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anyway, once the 6 minutes and 48 seconds to run &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; had elapsed, I launched Firefox (this was being done with a Firefox NSS sqlite database on Fedora), and was pleased to see as soon as Firefox booted, I immediately got a certificate error – Firefox’s home page was set to &lt;a href=&quot;https://start.fedoraproject.org/&quot;&gt;https://start.fedoraproject.org/&lt;/a&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;.org&lt;/code&gt; was the excluded domain in the name constraint that I configured for the test.  I tested various &lt;code class=&quot;highlighter-rouge&quot;&gt;.org&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt; websites with a variety of root CA’s, and the result was consistent: all &lt;code class=&quot;highlighter-rouge&quot;&gt;.org&lt;/code&gt; sites showed a certificate error, while &lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt; websites worked fine.  For example, when I looked at the certificate chain for &lt;a href=&quot;https://www.startpage.com/&quot;&gt;StartPage&lt;/a&gt;, Firefox reported that the trust anchor was named &lt;code class=&quot;highlighter-rouge&quot;&gt;Namecoin Restricted CKBI Root CA for COMODO RSA Certification Authority&lt;/code&gt;, indicating that the name constraints had indeed taken effect.&lt;/p&gt;

&lt;p&gt;I think the code is now at the point where I’ll soon be pushing it to GitHub, and maybe doing some binary releases for people who want to &lt;del&gt;brick their NSS database and lose their client certificate private keys&lt;/del&gt; try it out in a VM and report how it works.  All that said, a few interesting caveats remain:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; only applies name constraints to certificates from Mozilla’s CKBI (built-in certificates) module.  If you’re in the business of manually importing extra root CA’s, I’m currently assuming that one of the following is true:
    &lt;ul&gt;
      &lt;li&gt;You’re deliberately intercepting your traffic for debug purposes, and therefore don’t want the name constraint to apply.&lt;/li&gt;
      &lt;li&gt;You’re capable of using &lt;code class=&quot;highlighter-rouge&quot;&gt;cross_sign_name_constraint_tool&lt;/code&gt; to manually add the name constraint before you import a root CA.&lt;/li&gt;
      &lt;li&gt;You’ve read this warning and ignored it, and therefore when you get pwned by Iranian intelligence agencies, I’m not responsible.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; has the side effect of making trust anchors from the CKBI module no longer appear to be from the CKBI module.  Why does this matter?  Many key pinning implementations only enforce key pins against CKBI trust anchors.  (This is actually the trick we were &lt;del&gt;abusing&lt;/del&gt; innovatively utilizing with &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_chromium_tool&lt;/code&gt;, but now it’s working against us rather than in our favor.)  Mitigating factors:
    &lt;ul&gt;
      &lt;li&gt;Chromium-based browsers are &lt;a href=&quot;https://groups.google.com/a/chromium.org/d/topic/blink-dev/he9tr7p3rZ8&quot;&gt;scrapping HPKP soon&lt;/a&gt;, so if your security model is dependent on HPKP working in Chromium, you might want to re-evaluate soon.&lt;/li&gt;
      &lt;li&gt;Chromium’s HPKP was &lt;em&gt;already&lt;/em&gt; completely broken on Fedora &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=707280&quot;&gt;due to a Chromium bug&lt;/a&gt;.  It turns out that p11-kit, which Fedora uses as a drop-in replacement for CKBI, utilizes an NSS feature to indicate that it should be treated as CKBI, but Chromium didn’t use that NSS feature properly, and the Chromium devs had minimal interest in fixing it.  Chromium’s devs explained this decision by saying that HPKP is a best-effort feature, and that HPKP failure is not considered a security issue in Chromium.  (The bug was eventually fixed on December 28, 2017, approximately 9 months after it was reported to Chromium.)  So again, if your security model is dependent on HPKP working in Chromium, you might want to re-evaluate, because the Chromium devs don’t agree with you.&lt;/li&gt;
      &lt;li&gt;Firefox’s HPKP can be &lt;a href=&quot;https://wiki.mozilla.org/SecurityEngineering/Public_Key_Pinning#How_to_use_pinning&quot;&gt;optionally configured via &lt;code class=&quot;highlighter-rouge&quot;&gt;about:config&lt;/code&gt;&lt;/a&gt; to enforce even for non-CKBI trust anchors.  If you’re not deliberately intercepting your own traffic, you probably should enable this mode.&lt;/li&gt;
      &lt;li&gt;It’s arguably an NSS certutil bug that the CKBI-emulating flag that p11-kit uses can’t be read/set by certutil.  Mozilla should probably fix that sometime.&lt;/li&gt;
      &lt;li&gt;Once I port &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_p11_tool&lt;/code&gt; or something like that (i.e. port from NSS to p11-kit), it should be straightforward to mimic CKBI on Fedora, in the same way that p11-kit’s default CA’s mimic CKBI.  This should at least be recognized by Firefox (but not by Chromium, see above).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; requires that you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; binary.  This is easily obtainable in most GNU/Linux distributions (in Fedora, it’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;nss-tools&lt;/code&gt; package), but I have no idea how easy it is to get a &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; binary on Windows and macOS.  (No, the &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; program that Windows includes as part of CryptoAPI is not the same thing.)  Mozilla doesn’t distribute &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; binaries.  At some point, we’ll probably need to start cross-compiling NSS ourselves, although I admit I’m not sure I’m going to enjoy that.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; only works for NSS applications that actually use a certificate database.  Notably, Tor Browser doesn’t use a certificate database, because such a feature forms a fingerprinting risk.  (To my knowledge, Tor Browser exclusively uses the NSS CKBI module.)  Long term, we could probably &lt;del&gt;add a bunch of attack surface&lt;/del&gt; work around this issue by replacing Tor Browser’s CKBI module with p11-kit’s drop-in replacement.  p11-kit is read-only, so in theory it can’t be used as a cookie like NSS’s certificate database can.  But if you customize your CKBI module’s behavior in any significant way, you’re definitely altering your browser fingerprint.  Assuming that all Namecoin users of Tor Browser do this the same way, it’s not really a problem, since the ability to access &lt;code class=&quot;highlighter-rouge&quot;&gt;.bit&lt;/code&gt; domains will already alter your browser fingerprint, and replacing CKBI with p11-kit shouldn’t cause any extra anonymity set partitioning beyond that.  But it’s definitely not something that should be done lightly.&lt;/li&gt;
  &lt;li&gt;Right now, &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrict_nss_tool&lt;/code&gt; only supports sqlite databases in NSS.  The older BerkeleyDB databases might be possible to support in the future, but since everything is moving toward sqlite anyway, adding BerkeleyDB support is not exactly high on my priority list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Despite these minor caveats, this is an excellent step forward for Namecoin TLS on a variety of applications and OS’s.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;

&lt;div id=&quot;footnote1&quot;&gt;

  &lt;p&gt;[1] I &lt;em&gt;might&lt;/em&gt; have written a program late last year for my master’s thesis, given it a name that is simultaneously (1) an obscure Harry Potter joke, (2) an anonymity technology joke, and (3) a Latin and Greek joke, and then devoted about 2-3 pages of my master’s thesis to explaining and elaborating on the compound joke.  I probably didn’t do that though; that might constitute trolling my university, and I &lt;em&gt;certainly&lt;/em&gt; wouldn’t do that, would I?&lt;/p&gt;

&lt;/div&gt;
</description>
        <pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2018/03/26/integrating-cross-signing-name-constraints-nss.html</link>
        <guid isPermaLink="true">https://namecoin.org//2018/03/26/integrating-cross-signing-name-constraints-nss.html</guid>
        
        <category>News</category>
        
        
      </item>
    
  </channel>
</rss>
