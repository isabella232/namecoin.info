<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>https://www.namecoin.org//</link>
    <atom:link href="https://www.namecoin.org//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 24 Nov 2019 12:17:21 +0000</pubDate>
    <lastBuildDate>Sun, 24 Nov 2019 12:17:21 +0000</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>Building Electrum in rbm</title>
        <description>&lt;p&gt;As I’ve &lt;a href=&quot;/2019/08/25/fixing-a-gzip-reproducibility-bug-in-tor-browser-and-rbm.html&quot;&gt;discussed before&lt;/a&gt;, Namecoin is using Tor’s rbm-based build system for our various Go projects, such as ncdns and ncp11, in order to reduce the risk of supply-chain attacks.  I’m now looking into building Electrum in rbm as well.  Upstream Electrum’s Python tarball binaries aren’t reproducible at all, and their Windows binaries’ reproducible builds are heavily dependent on sketchy dependencies that I’d prefer not to trust.  rbm offers a potential solution.&lt;/p&gt;

&lt;p&gt;At this time, I’ve successfully gotten rbm to build an Electrum-NMC Python tarball that behaves pretty much the same as the standard build method (including the dependency bundling) – except that it should be substantially more reproducible.  The only two components that aren’t being built by my rbm descriptor are the Protobuf definition for the Payment Protocol (should be fixable easily, since I’m already building the Protobuf compiler) and the locales folder (hopefully easy to handle, I just haven’t looked at it yet).&lt;/p&gt;

&lt;p&gt;Building the Windows binaries in rbm is something I intend to look into later, though it’s not at the top of my priority queue.  Obviously, the intent is to contribute all of this work upstream to Electrum.&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/11/24/building-electrum-in-rbm.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/11/24/building-electrum-in-rbm.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC v3.3.8 Released</title>
        <description>&lt;p&gt;We’ve released Electrum-NMC v3.3.8.  This release includes a large number of improvements, mostly focused on performance (both initial syncup speed and name lookup latency) and anonymity (in particular support for Tor stream isolation).  Here’s what’s new since v3.3.7:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;From upstream Electrum:
    &lt;ul&gt;
      &lt;li&gt;fix some bugs with recent bump fee (RBF) improvements (#5483, #5502)&lt;/li&gt;
      &lt;li&gt;fix #5491: watch-only wallets could not bump fee in some cases&lt;/li&gt;
      &lt;li&gt;appimage: URLs could not be opened on some desktop environments (#5425)&lt;/li&gt;
      &lt;li&gt;faster tx signing for segwit inputs for really large txns (#5494)&lt;/li&gt;
      &lt;li&gt;A few other minor bugfixes and usability improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Namecoin-specific:
    &lt;ul&gt;
      &lt;li&gt;Fix signature creation for P2SH and SegWit names (Namecoin mainnet now supports P2SH and SegWit; these features should now work in Electrum-NMC, including in name transactions).  (Patch by Daniel Kraft.)&lt;/li&gt;
      &lt;li&gt;Fix an error that occurred when displaying the Manage Names tab if the blockchain is empty but the wallet is not.  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/2019/04/08/electrum-merkle-checkpoints.html&quot;&gt;Merkle checkpoints&lt;/a&gt; (improves initial syncup speed).  (Patch by Jeremy Rand; based on a patch by Roger Taylor.)&lt;/li&gt;
      &lt;li&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt; archive (improves binary download size).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Use random SOCKS authentication for stream isolation of connections to servers (improves performance and anonymity).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;stream_id&lt;/code&gt; argument to network RPC methods for stream isolation (improves performance and anonymity).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Building Electrum-NMC without wallet functionality, GUI functionality, and BIP70 functionality is now supported (improves binary download size).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Support a Namecoin-Core-style &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; argument in &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; RPC method (fixes compatibility with latest ncdns).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Retry name lookups with different server if NXDOMAIN returned (improves censorship resistance).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Download blockchain from different servers in parallel (improves initial syncup speed).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;from_coins&lt;/code&gt; argument to wallet RPC methods (improves anonymity).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Avoid returning outdated &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; results while the blockchain is still syncing (improves security of key revocations).  (Patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Avoid broadcasting &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; failed (improves reliability of name registration).  (Bug reported by DogHunter; patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Avoid &lt;code class=&quot;highlighter-rouge&quot;&gt;NotEnoughFunds&lt;/code&gt; error in CoinChooser if zero buckets are sufficient (fixes a spurious error during name registration).  (Bug reported by DogHunter; patch by Jeremy Rand.)&lt;/li&gt;
      &lt;li&gt;Code quality improvements.  (Patches by Daniel Kraft and Jeremy Rand.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#electrum-nmc&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/11/14/electrum-nmc-v3.3.8-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/11/14/electrum-nmc-v3.3.8-released.html</guid>
        
        <category>Releases</category>
        
        <category>Electrum Releases</category>
        
        
      </item>
    
      <item>
        <title>Namecoin will be at Oklahoma City Fall Peace Festival 2019</title>
        <description>&lt;p&gt;Namecoin will have a table at the &lt;a href=&quot;https://peacehouseok.org/outreach/fall-peace-festival/&quot;&gt;Oklahoma City Fall Peace Festival 2019&lt;/a&gt;.  The festival is Saturday, November 9, 2019, 10 AM - 4 PM, in the Downtown Civic Center Hall of Mirrors.  If you happen to be near the Oklahoma City area, feel free to come by and say hello.  I &lt;em&gt;might&lt;/em&gt; even have some cool demos of upcoming features.&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/11/06/namecoin-at-oklahoma-city-fall-peace-festival-2019.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/11/06/namecoin-at-oklahoma-city-fall-peace-festival-2019.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Matching tor-browser-build Conventions in ncdns-repro</title>
        <description>&lt;p&gt;As I’ve &lt;a href=&quot;/2019/08/25/fixing-a-gzip-reproducibility-bug-in-tor-browser-and-rbm.html&quot;&gt;discussed before&lt;/a&gt;, Namecoin is using Tor’s rbm-based build system for our various Go projects, such as ncdns and ncp11, in order to reduce the risk of supply-chain attacks.  Namecoin’s relevant Git repository, ncdns-repro, is heavily based on a Tor repo, tor-browser-build.  As we gained more experience with using rbm, it became more clear that even trivial deviations from upstream tor-browser-build can cause interoperability headaches.  So, I’ve been bringing ncdns-repro more in line with tor-browser-build conventions.  In particular, two noticeable changes have been made.&lt;/p&gt;

&lt;p&gt;First off, rbm divides the build scripts into “projects”.  For example, in Tor Browser, OpenSSL is a project, as is Tor, as is Firefox, as is GCC, etc.  Projects can depend on each other (for example, Tor depends on OpenSSL, and OpenSSL, Tor, and Firefox all depend on GCC).  When ncdns-repro was initially created, we didn’t really think much about the project names, and on a whim decided to the projects written in Go names that reflected their full package path.  For example, the Go package &lt;code class=&quot;highlighter-rouge&quot;&gt;golang.org/x/crypto&lt;/code&gt; was given an rbm project name of &lt;code class=&quot;highlighter-rouge&quot;&gt;golang.org,x,crypto&lt;/code&gt; in ncdns-repro.  In contrast, upstream tor-browser-build gives their Go-based projects abbreviated names, e.g. the aforementioned package was given an rbm project name of &lt;code class=&quot;highlighter-rouge&quot;&gt;goxcrypto&lt;/code&gt; [1].  Unfortunately, we figured out via experience that this causes problems, especially when ncdns-repro pulls in data from tor-browser-build (or vice versa) as a Git submodule, because it means that if a project from one repo wants to pull in a project from another repo as a dependency, the project names will be inconsistent.&lt;/p&gt;

&lt;p&gt;Second, ncdns-repro stored all of the Git hashes for its projects in a root-directory-level file called &lt;code class=&quot;highlighter-rouge&quot;&gt;hashlist&lt;/code&gt;, whereas upstream tor-browser-build stores them in the configuration file in each project’s directory.  The intent on our end was to make it easier to enumerate all of the Git hashes, but again, experience showed that this causes problems when Git submodules are used to let tor-browser-build and ncdns-repro share configuration data.&lt;/p&gt;

&lt;p&gt;As of now, ncdns-repro uses the same project naming conventions as tor-browser-build, and no longer uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;hashlist&lt;/code&gt; file.  This should improve interoperability of ncdns-repro with tor-browser-build going forward.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;

&lt;p&gt;[1] Insert snarky reference to Mark Karpeles here.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/11/05/matching-tor-browser-build-conventions-in-ncdns-repro.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/11/05/matching-tor-browser-build-conventions-in-ncdns-repro.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Porting DNSSEC-HSTS to Chrome</title>
        <description>&lt;p&gt;As was discussed in my 35C3 slides, DNSSEC-HSTS is a WebExtension that prevents sslstrip attacks by using DNSSEC.  DNSSEC-HSTS is already available for Firefox, but (as a WebExtension) it should be easily portable to Chrome.  Not so fast: Chrome has a number of quirks that make this nontrivial.&lt;/p&gt;

&lt;p&gt;First off, Chrome doesn’t support asynchronous blocking WebRequest, which is a feature that DNSSEC-HSTS uses in order to retrieve DNS data from a native application.  I was able to work around this by converting the native messaging code used in the Firefox version into a standard HTTP request for Chrome.  HTTP is substantially less secure than native messaging, but since the Chrome developers don’t seem to have any interest in security, we have to accept the reality that Chrome users will have less security than Firefox users.&lt;/p&gt;

&lt;p&gt;Second, Chrome doesn’t support SVG images as extension logos, which was causing Chrome to reject the DNSSEC-HSTS extension.  This was quite trivial to work around, since the Namecoin logo is also available as a PNG image.&lt;/p&gt;

&lt;p&gt;Third, Chrome doesn’t support loading unpacked extensions from the system.  (Chromium, as packaged by many GNU/Linux distros, does support this, but Google’s binaries do not.)  I was able to work around this by packaging DNSSEC-HSTS as a CRX file.  Unfortunately, I’m not aware of any existing tools for supporting detached signatures for CRX files, which means that the CRX version of DNSSEC-HSTS will probably not be possible to build reproducibly.  This is unfortunate, but again, we have to accept the reality that the Chrome developers simply don’t care about security, so Chrome users are going to have less security than Firefox users.&lt;/p&gt;

&lt;p&gt;With these changes, DNSSEC-HSTS appears to work on Chrome; the changes will be included in the next release.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/10/23/porting-dnssec-hsts-to-chrome.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/10/23/porting-dnssec-hsts-to-chrome.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC v3.3.7 Released</title>
        <description>&lt;p&gt;We’ve released Electrum-NMC v3.3.7.  Here’s what’s new since v3.3.6.1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;From upstream Electrum:
    &lt;ul&gt;
      &lt;li&gt;The AppImage Linux x86_64 binary and the Windows setup.exe (so now all Windows binaries) are now built reproducibly.&lt;/li&gt;
      &lt;li&gt;Bump fee (RBF) improvements: Implemented a new fee-bump strategy that can add new inputs, so now any tx can be fee-bumped (d0a4366). The old strategy was to decrease the value of outputs (starting with change).  We will now try the new strategy first, and only use the old as a fallback (needed e.g. when spending “Max”).&lt;/li&gt;
      &lt;li&gt;CoinChooser improvements:
        &lt;ul&gt;
          &lt;li&gt;more likely to construct txs without change (when possible)&lt;/li&gt;
          &lt;li&gt;less likely to construct txs with really small change (e864fa5)&lt;/li&gt;
          &lt;li&gt;will now only spend negative effective value coins when beneficial for privacy (cb69aa8)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;fix long-standing bug that broke wallets with &amp;gt;65k addresses (#5366)&lt;/li&gt;
      &lt;li&gt;Windows binaries: we now build the PyInstaller boot loader ourselves, as this seems to reduce anti-virus false positives (1d0f679)&lt;/li&gt;
      &lt;li&gt;Android: (fix) BIP70 payment requests could not be paid (#5376)&lt;/li&gt;
      &lt;li&gt;Android: allow copy-pasting partial transactions from/to clipboard&lt;/li&gt;
      &lt;li&gt;Fix a performance regression for large wallets (c6a54f0)&lt;/li&gt;
      &lt;li&gt;Qt: fix some high DPI issues related to text fields (37809be)&lt;/li&gt;
      &lt;li&gt;Trezor:
        &lt;ul&gt;
          &lt;li&gt;allow bypassing “too old firmware” error (#5391)&lt;/li&gt;
          &lt;li&gt;use only the Bridge to scan devices if it is available (#5420)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;hw wallets: (known issue) on Win10-1903, some hw devices (that also have U2F functionality) can only be detected with Administrator privileges. (see #5420 and #5437)  A workaround is to run as Admin, or for Trezor to install the Bridge.&lt;/li&gt;
      &lt;li&gt;Several other minor bugfixes and usability improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Namecoin-specific:
    &lt;ul&gt;
      &lt;li&gt;Fix issue affecting plugin detection.  If you were encountering hardware wallet bugs, they might be fixed now.&lt;/li&gt;
      &lt;li&gt;Various rebranding fixes.&lt;/li&gt;
      &lt;li&gt;Various code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#electrum-nmc&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/09/27/electrum-nmc-v3.3.7-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/09/27/electrum-nmc-v3.3.7-released.html</guid>
        
        <category>Releases</category>
        
        <category>Electrum Releases</category>
        
        
      </item>
    
      <item>
        <title>Fixing a gzip Reproducibility Bug in Tor Browser and rbm</title>
        <description>&lt;p&gt;As I’ve &lt;a href=&quot;/2019/08/06/decoupling-ncdns-go-versions.html&quot;&gt;discussed before&lt;/a&gt;, Namecoin is using Tor’s rbm-based build system for our various Go projects, such as ncdns and ncp11, in order to reduce the risk of supply-chain attacks.  Naturally, one of the important ways to test a reproducible build system is to build a binary twice in a row and see if the hashes are the same.  If the hashes don’t match, then tools like &lt;a href=&quot;https://diffoscope.org/&quot;&gt;Diffoscope&lt;/a&gt; can be used to figure out what the source of the reproducibility failure is.  Now that Namecoin’s usage of rbm is reasonably stable (i.e. working binaries are produced for most of Namecoin’s software now), it’s a good time to look into how reproducible our binaries are.&lt;/p&gt;

&lt;p&gt;So, I tried building ncdns twice to see if I got matching hashes.  Alas, the hashes did not match.  Plugging the results into Diffoscope yielded the information that the files within the &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; archive were indeed identical, but that the time value embedded in the gzip header was nonreproducible.  Given that this didn’t seem like anything I had screwed up on my end, I tried building a &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; binary from upstream Tor Browser.  Same issue: nonreproducible binaries due to gzip header time values.&lt;/p&gt;

&lt;p&gt;I also observed that &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt; binaries weren’t affected by the issue.  This would explain why upstream Tor hadn’t noticed or fixed the bug on their end – all of their end-user binaries are &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt;; &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; is only used by Tor for intermediate binaries, which probably aren’t tested for reproducibility as thoroughly.  Obviously, Namecoin could work around the issue by switching to &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt; for end-user binaries (I was planning to do this anyway since &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.xz&lt;/code&gt; archives have much better compression), but since Namecoin likes to be a good neighbor, I figured it was a good idea to report the bug upstream to Tor.&lt;/p&gt;

&lt;p&gt;After some discussion with Nicolas from Tor (lead developer of rbm), we converged on a 2-line patch to rbm that should resolve the issue.  Once this patch is merged upstream, Namecoin binaries will be substantially closer to reproducibility, and as a bonus, the intermediate binaries produced by Tor will probably be reproducible too.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/08/25/fixing-a-gzip-reproducibility-bug-in-tor-browser-and-rbm.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/08/25/fixing-a-gzip-reproducibility-bug-in-tor-browser-and-rbm.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncdns v0.0.9.2 Released</title>
        <description>&lt;p&gt;We’ve released ncdns v0.0.9.2.  List of changes in v0.0.9.2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All platforms:
    &lt;ul&gt;
      &lt;li&gt;New build system based on The Tor Project’s rbm.  This paves the way for reproducible builds.&lt;/li&gt;
      &lt;li&gt;Add an optional mode to &lt;code class=&quot;highlighter-rouge&quot;&gt;generate_nmc_cert&lt;/code&gt; that creates a name-constrained CA cert instead of an end-entity cert.  This mode is required for Tor Browser TLS support.&lt;/li&gt;
      &lt;li&gt;Add “URL list” output format to &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdumpzone&lt;/code&gt;.  This paves the way for a decentralized search engine for Namecoin websites.&lt;/li&gt;
      &lt;li&gt;Make Namecoin RPC timeout configurable.  This improves compatibility with Tor Browser.&lt;/li&gt;
      &lt;li&gt;Move &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; to its own repo.  This improves compatibility with Tor Browser.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows:
    &lt;ul&gt;
      &lt;li&gt;Automatically re-run &lt;code class=&quot;highlighter-rouge&quot;&gt;tlsrestrictnss&lt;/code&gt; when NSS is updated; this improves TLS support for Firefox.&lt;/li&gt;
      &lt;li&gt;Upgrade dnssec-keygen to v9.13.3.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;New projects:
    &lt;ul&gt;
      &lt;li&gt;DNSSEC-HSTS v0.0.1: A WebExtension that prevents sslstrip attacks for Namecoin websites that support TLS.  See my 35C3 slides for more details.&lt;/li&gt;
      &lt;li&gt;ncp11 v0.0.1: Enables Namecoin TLS in browsers that support PKCS#11, such as Tor Browser.  See my 35C3 slides for more details.&lt;/li&gt;
      &lt;li&gt;ncprop279 v0.0.1: Enables Namecoin resolution in Tor; somewhat smaller and more efficient than dns-prop279.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Code quality improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#ncdns&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/08/15/ncdns-v0.0.9.2-released.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/08/15/ncdns-v0.0.9.2-released.html</guid>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>Killing Namecoin's Fork of Conformal's btcd</title>
        <description>&lt;p&gt;One of the lesser-known dirty secrets of the ncdns codebase [1] is that it relies on an unmaintained fork of Conformal’s btcd, which dates back to 2015.  Specifically, ncdns uses a fork of the JSON-RPC client from btcd in order to query Namecoin Core, ConsensusJ-Namecoin, or Electrum-NMC.  Why did Namecoin not find upstream btcd to be sufficient?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;btcd’s RPC client expected a modern Bitcoin Core codebase to be used, and in 2015 Namecoin was somewhat behind upstream Bitcoin Core.  Thus Hugo needed to add a patch to avoid compatibility issues.&lt;/li&gt;
  &lt;li&gt;btcd’s RPC client expected JSON-RPC 1.0 to be used, and errored when it encountered JSON-RPC 2.0.  Both ConsensusJ-Namecoin and Electrum-NMC use JSON-RPC 2.0, so I had to add a patch to avoid that error.&lt;/li&gt;
  &lt;li&gt;btcd’s RPC client didn’t support cookie authentication, and Namecoin Core is easiest to set up when cookie authentication is in use.  Thus Hugo had to implement cookie authentication.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To make matters more complicated, Conformal decided to rewrite btcd’s JSON-RPC client from scratch a few months after Namecoin forked it; the rewrite has a completely different API, so it wasn’t a drop-in replacement.  This was yet further complicated by the fact that one of the features in the original btcd JSON-RPC client’s API allowed adding custom RPC methods for altcoins (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_scan&lt;/code&gt;), which ncdns relied on; the rewrite’s API doesn’t expose that functionality nearly as cleanly.&lt;/p&gt;

&lt;p&gt;We’ve been throwing around the idea of using upstream Conformal’s btcd package for a while, but finally I decided to start implementing it.  Happily, Conformal includes example code for using the new API, so it wasn’t hard to get it to talk to Namecoin Core.  I submitted a patch to Conformal that exposes the API features needed for custom RPC methods (the patch was pretty easy to write, and hopefully will be merged soon).  I also implemented &lt;code class=&quot;highlighter-rouge&quot;&gt;name_show&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_scan&lt;/code&gt; for btcd.  (ncdns also includes support for &lt;code class=&quot;highlighter-rouge&quot;&gt;name_filter&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_sync&lt;/code&gt;, but these methods weren’t actually used for anything and aren’t even included in current Namecoin Core releases, so I didn’t bother implementing them.)  Happily, issues (1) and (2) are no longer relevant, because ancient versions of Namecoin Core have long ago been phased out, and upstream btcd now supports JSON-RPC 2.0 without erroring.  Conveniently, the new API looks very similar to a custom high-level API that ncdns had implemented itself, so I was able to kill off quite a lot of glue code in ncdns as well.&lt;/p&gt;

&lt;p&gt;Finally, I ported Hugo’s cookie authentication code to btcd.  This wasn’t particularly difficult, since most of the relevant code could be copied from ncdns into btcd without major changes.  (ncdns is GPLv3+-licensed, while btcd is ISC-licensed, but Hugo is the only developer who’s touched the relevant code, and he’s authorized re-licensing that code to both MIT and ISC licenses, so licensing concerns aren’t an issue.)&lt;/p&gt;

&lt;p&gt;Killing off the legacy Namecoin fork of btcd will be an important step toward making Namecoin more secure, since unmaintained code is a potential source of bugs and vulnerabilities.  It also means we’ll benefit from whatever features Conformal has added since 2015, and whatever features they add in the future.  Now we just wait for Conformal to review the patches.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;

&lt;p&gt;[1] Of course, nothing is really secret in the ncdns codebase, since it’s free software.  That said, it’s rare for people to actually thoroughly check the dependency tree of free software they work with, which makes it a bit of a de facto secret.&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/08/14/killing-namecoin-fork-of-conformal-btcd.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/08/14/killing-namecoin-fork-of-conformal-btcd.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Decoupling ncdns Versions from Go Compiler Versions</title>
        <description>&lt;p&gt;One of the many pieces of witchcraft that Namecoin’s TLS interoperability requires is the ability to splice a signature into an X.509 certificate without otherwise modifying the certificate.  Unfortunately, while the Go standard crypto library is generally quite pleasant to use (and is certainly better-designed than most other crypto libraries such as OpenSSL), the functions relevant to splicing a signature are not exported.  This is understandable, since it’s not functionality that most users have any need for.  However, since Namecoin &lt;em&gt;does&lt;/em&gt; need that functionality, my only option back when this code was being written was to fork the &lt;code class=&quot;highlighter-rouge&quot;&gt;crypto/x509&lt;/code&gt; package from Go’s standard library.&lt;/p&gt;

&lt;p&gt;I didn’t want to be responsible for maintaining or distributing a fork of Go’s library, though.  So, the best option I could come up with was to use &lt;code class=&quot;highlighter-rouge&quot;&gt;go generate&lt;/code&gt;, which is a fun feature in Go’s build system.  In Namecoin’s case, the ncdns build process uses &lt;code class=&quot;highlighter-rouge&quot;&gt;go generate&lt;/code&gt; to copy the source code from the official &lt;code class=&quot;highlighter-rouge&quot;&gt;crypto/x509&lt;/code&gt; package into the &lt;code class=&quot;highlighter-rouge&quot;&gt;github.com/namecoin/ncdns/x509&lt;/code&gt; package, which (when combined with the single existing source code file, &lt;code class=&quot;highlighter-rouge&quot;&gt;x509_splice.go&lt;/code&gt;), produces a package that’s identical to upstream &lt;code class=&quot;highlighter-rouge&quot;&gt;crypto/x509&lt;/code&gt; but with an extra exported function (&lt;code class=&quot;highlighter-rouge&quot;&gt;CreateCertificateWithSplicedSignature&lt;/code&gt;) that calls out to the unexported upstream functions in order to do what we want.  The benefit here is that whenever those unexported upstream functions are updated in a new Go release, Namecoin’s forked package will automatically inherit those changes without the Namecoin developers needing to do anything.  In fact, in theory the same forked package will work unmodified with arbitrary versions of the Go standard library, without us needing to do anything special.&lt;/p&gt;

&lt;p&gt;Alas, theory does not always equal practice.  The most obvious scenario in which this theory will fall apart is if the unexported functions called by &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateCertificateWithSplicedSignature&lt;/code&gt; change their API.  Upstream is well within their rights to do this, of course: they’re not exported functions, so there’s no reason to expect a stable API.  However, in practice, this API changes quite rarely.  The more common issue I’ve been encountering, surprisingly, is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;go generate&lt;/code&gt; script has trouble &lt;em&gt;finding and copying&lt;/em&gt; the upstream library, because upstream seems to keep changing the details of where this library and its dependencies (some of which are internal-only libraries) can be found.  The result is that I’ve had to rebase our fork against upstream every couple of major Go releases to keep things working well.&lt;/p&gt;

&lt;p&gt;The problem here is that this has the effect of coupling a specific commit hash of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdns&lt;/code&gt; repository to a specific range of Go compiler versions.  If Namecoin rebases against a new Go standard library version, and then issues an ncdns bug fix that’s unrelated to our &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; fork, everyone who’s downstream of us needs to update their Go compiler in order to get the bug fix.  This is generally problematic since lots of downstream distributors have other considerations for when they update their compiler.  It was specifically causing me problems for getting ncdns to build in Tor’s rbm-based build system, because Tor is not likely to update their Go compiler exactly when Namecoin does.&lt;/p&gt;

&lt;p&gt;So, what to do?  Well, note that there’s no fundamentally important reason for the &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; package to be a subpackage of ncdns.  It ended up there by default because it was initially only used by ncdns and there wasn’t an obvious reason to create a new Git repo, but now we have a good reason to move it to its own repo: if the Git commit hash of ncdns and &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; are independent, then downstream distributors can pick the version of ncdns with whatever bug fixes they want, and independently choose the version of &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; that supports whatever Go compiler version they want.  I’ve now done this.  &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; now lives at &lt;a href=&quot;https://github.com/namecoin/x509-signature-splice/tree/master/x509&quot;&gt;github.com/namecoin/x509-signature-splice/x509&lt;/a&gt; , and branches are available for every version of the Go compiler that we’ve ever supported, ranging from Go 1.5.x all the way through Go 1.13.x.  (Note that the Go 1.12.x and Go 1.13.x support is new, as both of those Go releases required rebases in order for &lt;code class=&quot;highlighter-rouge&quot;&gt;go generate&lt;/code&gt; to run without errors.  So if you use one of those Go versions, you’ll find this work especially useful.)&lt;/p&gt;

&lt;p&gt;The two final steps here are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Removing &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; from the ncdns repo and switching over to the new repo; this has now been merged.&lt;/li&gt;
  &lt;li&gt;Updating ncdns-repro to use the new ncdns version; this will happen soon.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
        <link>https://www.namecoin.org//2019/08/06/decoupling-ncdns-go-versions.html</link>
        <guid isPermaLink="true">https://www.namecoin.org//2019/08/06/decoupling-ncdns-go-versions.html</guid>
        
        <category>News</category>
        
        
      </item>
    
  </channel>
</rss>
