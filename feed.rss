<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Namecoin</title>
    <description><!--Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
--></description>
    <link>https://namecoin.org//</link>
    <atom:link href="https://namecoin.org//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 05 Jul 2019 00:00:33 +0000</pubDate>
    <lastBuildDate>Fri, 05 Jul 2019 00:00:33 +0000</lastBuildDate>
    <generator>Jekyll v3.6.0</generator>
    
      <item>
        <title>Namecoin Core 0.18.0 Released, Softfork Incoming at Mainnet Block Height 475,000</title>
        <description>&lt;p&gt;Namecoin Core 0.18.0 has been released on the &lt;a href=&quot;/download/#namecoin-core-client-stable-release&quot;&gt;Downloads page&lt;/a&gt;.  This release schedules a softfork for block height 475,000 on mainnet.  Contained in the softfork are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;P2SH&lt;/li&gt;
  &lt;li&gt;CSV&lt;/li&gt;
  &lt;li&gt;SegWit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All three of these softfork components are already active in Bitcoin, and should be uncontroversial.  We had originally discussed lowering the block weight limit as part of this softfork, but we decided to defer block weight discussion for a later date, as the extra review procedures involved in changing the block weight limit would have delayed the release, and we wanted to get the softfork activated as soon as feasible.  So, for this softfork, the block weight limit is the same as that of Bitcoin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Due to the softfork, we strongly recommend that miners, exchanges, registrars, explorers, ElectrumX servers, and all other service providers upgrade as soon as possible.&lt;/strong&gt;  End users who do not need the name management GUI are also strongly encouraged to upgrade.&lt;/p&gt;

&lt;p&gt;At this time, the estimated activation date of the softfork is 82 days from now.  However, this may vary depending on hashrate fluctuations, so do not wait until the last minute to upgrade.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/namecoin/namecoin-core/issues/239&quot;&gt;#239&lt;/a&gt; for more details on the softfork.&lt;/p&gt;

&lt;p&gt;Also included in this release:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Windows binaries are available again.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; argument for &lt;code class=&quot;highlighter-rouge&quot;&gt;name_new&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;name_firstupdate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;name_update&lt;/code&gt; can now be used to specify per-RPC encodings for names and values by setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;nameEncoding&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;valueEncoding&lt;/code&gt; fields, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name_scan&lt;/code&gt; now accepts an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; argument, which can be used to specify filtering conditions (based on number of confirmations, prefix and regexp matches of a name).  See &lt;a href=&quot;https://github.com/namecoin/namecoin-core/issues/237&quot;&gt;#237&lt;/a&gt; for more details.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name_filter&lt;/code&gt; has been removed.  Instead, &lt;code class=&quot;highlighter-rouge&quot;&gt;name_scan&lt;/code&gt; with the newly added filtering options can be used.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ismine&lt;/code&gt; is no longer added to RPC results if no wallet is associated to an RPC call.&lt;/li&gt;
  &lt;li&gt;Numerous improvements from upstream Bitcoin Core.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2019/07/05/namecoin-core-0.18.0-released-softfork-incoming-475000.html</link>
        <guid isPermaLink="true">https://namecoin.org//2019/07/05/namecoin-core-0.18.0-released-softfork-incoming-475000.html</guid>
        
        <category>Alerts</category>
        
        <category>Namecoin Core Alerts</category>
        
        <category>Releases</category>
        
        <category>Namecoin Core Releases</category>
        
        
      </item>
    
      <item>
        <title>ncp11 Now Works in Tor Browser for Windows</title>
        <description>&lt;p&gt;ncp11 is now working (both positive and negative TLS certificate overrides) in Tor Browser for Windows.  It turned out that the only things keeping it from working properly once it &lt;a href=&quot;/2019/06/15/ncp11-now-builds-for-windows.html&quot;&gt;built without errors&lt;/a&gt; were a couple of GNU/Linux-specific file path assumptions, both of which were quite easy to fix.&lt;/p&gt;

&lt;p&gt;Actually testing it was mildly tricky, due to the fact that I was trying to use StemNS (a fork I made of meejah’s TorNS tool) for the DNS resolution in Tor Browser, and it turns out that there was a bug in both upstream TorNS and StemNS that caused the Prop279 implementation to launch with an empty set of environment variables.  In GNU/Linux, this is harmless, but (surprise, surprise) in Windows this causes a variety of horrible effects, chief among which is that cryptographic software will be unable to generate random numbers and thus will crash.  I was going to find that out anyway once the Tor community started messing with StemNS, so probably a good thing that I found it early.  (I wish it hadn’t taken me quite so long to figure out why things were crashing, but alas, that’s life.)  StemNS now has a fix for that bug, and I’ve submitted a fix upstream to TorNS as well.&lt;/p&gt;

&lt;p&gt;So, my estimate of what remains before we can release Tor Browser TLS support:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get the remaining PR’s merged to the relevant repos (in particular, ncdns-repro has a few pending PR’s that are needed for this).&lt;/li&gt;
  &lt;li&gt;Tag a release and build/upload binaries.&lt;/li&gt;
  &lt;li&gt;Write some documentation (should be easy to adapt from the 35C3 workshop notes).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Meanwhile, I also tried ncp11 in Firefox for Windows (same installation method as in Tor Browser), and ran into some severe trouble there.  As far as I can tell, the ncp11 library is failing very early in the boot process: it doesn’t even get as far as running the &lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt; functions in the Go code.  Firefox gives a relatively useless “library failure” error, which is presumably a different code path from the “library failure” error that I’m getting in Debian when loading ncp11 into Firefox via a totally different installation method from the Tor Browser method.&lt;/p&gt;

&lt;p&gt;Inspecting Mozilla’s CKBI library and ncp11 with the &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; commmand yielded 2 noticeable differences in file format:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CKBI’s PE metadata is set to use the GUI subsystem, while ncp11 is set to use the console subsystem.&lt;/li&gt;
  &lt;li&gt;CKBI isn’t stripped, while ncp11 is stripped.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Difference 1 was ruled out by switching ncp11’s PE metadata to use the GUI subsystem; it didn’t help.  Difference 2 is certainly a possible explanation, and I’ll spend some time later checking what happens if ncp11 isn’t built with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt; linker flag.  That said, I suspect that the best way to figure out what’s going wrong is to patch in some debug output to Firefox and NSS so that I can figure out what code path the “library failure” error is happening in.&lt;/p&gt;

&lt;p&gt;However, as curious as I am to see what’s failing in Firefox, it should be noted that ncp11’s current funding from NLnet is contingent on Tor Browser support, not Firefox support, which means that I’m unlikely to spend a lot of time debugging the Firefox failure in the near future (especially since the “TLS for Tor Browser” milestone for NLnet has already gone severely over-budget due to the unexpectedly large amount of R&amp;amp;D needed to produce ncp11).  I’ll probably resume the Firefox debugging after we’ve secured more funding for this effort.&lt;/p&gt;

&lt;p&gt;In the meantime, Namecoin TLS support for Tor Browser is likely to be released very soon.  Yay!&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2019/06/18/ncp11-now-works-in-tor-browser-for-windows.html</link>
        <guid isPermaLink="true">https://namecoin.org//2019/06/18/ncp11-now-works-in-tor-browser-for-windows.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncp11 Now Builds for Windows Targets</title>
        <description>&lt;p&gt;ncp11 (our next-gen Namecoin TLS interoperability software for Firefox, Tor Browser, and other NSS-based software) now builds without errors for Windows targets, including rbm descriptors.  Getting it to build was a little bit more involved than just tweaking the rbm end of things, because the PKCS#11 spec requires that structs be packed on Windows, while Go doesn’t support packed structs.  So, some minor hackery was needed (I wrote a C function that converts between packed and unpacked structs).  Kudos to Miek Gieben (author of the Go pkcs11 package) for his useful sample code, which made this fix quite easy to code up.&lt;/p&gt;

&lt;p&gt;Meanwhile, qlib (our Go library for DNS queries, based on Miek’s q command-line tool) has also been fixed to build in rbm for Windows targets.  This was just a matter of fixing some sloppiness that snuck into the rbm descriptors, which happened to not be causing any problems on GNU/Linux targets due to dumb luck.  All of our rbm projects that depend on qlib (specifically, certdehydrate-dane-rest-api and dnssec-hsts-native) also now build for Windows targets.&lt;/p&gt;

&lt;p&gt;It should be noted that ncp11 probably doesn’t actually &lt;em&gt;work&lt;/em&gt; as intended on Windows and macOS targets yet.  I already fixed a couple of GNU/Linux-specific assumptions in ncp11’s codebase yesterday, and there are likely to be more that will need fixing before ncp11 will actually be usable on Windows and macOS targets.  Presumably these will be teased out with further testing.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2019/06/15/ncp11-now-builds-for-windows.html</link>
        <guid isPermaLink="true">https://namecoin.org//2019/06/15/ncp11-now-builds-for-windows.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>More rbm Projects Added: DNSSEC-HSTS, certdehydrate-dane-rest-api, Dependencies, and macOS Support</title>
        <description>&lt;p&gt;A few days ago I &lt;a href=&quot;/2019/06/12/ncp11-now-builds-in-rbm-gnu-linux-64-bit-and-32-bit.html&quot;&gt;mentioned &lt;/a&gt; that ncp11 now builds in rbm.  As you may recall, rbm is the build system used by Tor Browser; it facilitates reproducible builds, which improves the security of the build process against supply-chain attacks.  I’ve now added several new projects/targets to Namecoin’s rbm descriptors:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DNSSEC-HSTS now builds.  For those of you who aren’t familiar with DNSSEC-HSTS, see my &lt;a href=&quot;/2019/05/08/35c3-summary.html&quot;&gt;35C3 slides&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;certdehydrate-dane-rest-api now builds.  This is a backend tool that’s used by both ncp11 and DNSSEC-HSTS.&lt;/li&gt;
  &lt;li&gt;Dependencies of the above, including:
    &lt;ul&gt;
      &lt;li&gt;qlib (a library for flexible DNS queries, based on Miek Gieben’s excellent q CLI tool).&lt;/li&gt;
      &lt;li&gt;crosssign (a library for cross-signing X.509 certificates).&lt;/li&gt;
      &lt;li&gt;safetlsa (a library for converting DNS TLSA records into certificates that are safe to import into a TLS trust store, using dehydrated certificates and name constraints).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ncdns can now be built as a library, not just as an executable.  This was needed in order to build certdehydrate-dane-rest-api.&lt;/li&gt;
  &lt;li&gt;ncdns now builds for macOS.&lt;/li&gt;
  &lt;li&gt;Several library dependencies were updated; this fixes a number of bugs that existed due to accidentally using outdated dependencies.  (Chief among them was a bug that broke ncdns’s ability to talk to ConsensusJ-Namecoin and Electrum-NMC.)  Thanks to grringo for catching this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve also submitted a patch to upstream Tor that will hopefully allow us to make our rbm descriptors a lot cleaner.  Specifically, upstream Tor has a special template for building Go libraries, but it doesn’t work for Go executables, so Go executable projects need to have a bunch of boilerplate.  My patch allows the Go library template to work with executable projects as well.  That patch is currently awaiting review.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2019/06/13/more-rbm-projects-dnssec-hsts-certdehydrate-dane-rest-api-macos.html</link>
        <guid isPermaLink="true">https://namecoin.org//2019/06/13/more-rbm-projects-dnssec-hsts-certdehydrate-dane-rest-api-macos.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncp11 Now Builds in rbm for GNU/Linux (64-bit and 32-bit)</title>
        <description>&lt;p&gt;ncp11 is the next-gen Namecoin TLS interoperability project that Aerth and I have been cooking up in the Namecoin R&amp;amp;D lab for a while.  (See my &lt;a href=&quot;/2019/05/08/35c3-summary.html&quot;&gt;35C3 slides and workshop notes&lt;/a&gt; for more info on it if you haven’t heard about it yet.)  Last month, I &lt;a href=&quot;/2019/05/16/ncdns-rbm-linux32-win64-win32.html&quot;&gt;mentioned&lt;/a&gt; that I intended to get ncp11 building in rbm.  I now have ncp11 building in rbm for GNU/Linux 64-bit and 32-bit x86 targets.  32-bit support involved fixing a bug in ncdns’s usage of PKCS#11 (specifically, ncp11 was making type assumptions that are only valid on 64-bit targets, which produced a build error on 32-bit targets).  I’ve tested the resulting 64-bit binary in a Debian Buster VM, and it works fine when used as a drop-in replacement for NSS’s CKBI library.  (It looks like there are issues when loaded alongside CKBI, which I’ll need to debug when I have some free time, but this isn’t a release blocker, and the same issues are reproducible with the non-rbm binary I used at 35C3.)&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2019/06/12/ncp11-now-builds-in-rbm-gnu-linux-64-bit-and-32-bit.html</link>
        <guid isPermaLink="true">https://namecoin.org//2019/06/12/ncp11-now-builds-in-rbm-gnu-linux-64-bit-and-32-bit.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Tor Browser 8.5 Released; Includes Namecoin's certutil Windows/macOS Patch</title>
        <description>&lt;p&gt;The Tor Project has &lt;a href=&quot;https://blog.torproject.org/new-release-tor-browser-85&quot;&gt;released&lt;/a&gt; Tor Browser 8.5.  Among the usual interesting changes, Namecoin users will be interested to note that Tor Browser 8.5 includes &lt;a href=&quot;/2018/10/15/certutil-rbm-merged-tor-project.html&quot;&gt;Namecoin’s &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; Windows/macOS patch&lt;/a&gt;, which paves the way for better Namecoin TLS support in Firefox on Windows and macOS.  For the #reckless among you who want to experiment, the &lt;code class=&quot;highlighter-rouge&quot;&gt;certutil&lt;/code&gt; binaries are available &lt;a href=&quot;http://rqef5a5mebgq46y5.onion/torbrowser/&quot;&gt;here&lt;/a&gt; (or &lt;a href=&quot;https://dist.torproject.org/torbrowser/&quot;&gt;here&lt;/a&gt; for those of you who can’t access onion services); specifically you want the &lt;code class=&quot;highlighter-rouge&quot;&gt;mar-tools&lt;/code&gt; downloads.  Kudos to The Tor Project on getting Tor Browser 8.5 released!&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2019/06/03/tor-browser-8.5-released-includes-namecoin-certutil-patch.html</link>
        <guid isPermaLink="true">https://namecoin.org//2019/06/03/tor-browser-8.5-released-includes-namecoin-certutil-patch.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC v3.3.6.1 Released</title>
        <description>&lt;p&gt;We’ve released Electrum-NMC v3.3.6.1.  This release includes a fix for a PyInstaller build script issue that was introduced in v3.3.6, which unfortunately slipped by us until a few minutes after v3.3.6 was released.  The only binaries affected by that issue were the Windows-specific binaries; users of the v3.3.6 Python, GNU/Linux, and Android binaries are unaffected.&lt;/p&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#electrum-nmc&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2019/05/23/electrum-nmc-v3.3.6.1-released.html</link>
        <guid isPermaLink="true">https://namecoin.org//2019/05/23/electrum-nmc-v3.3.6.1-released.html</guid>
        
        <category>Releases</category>
        
        <category>Electrum Releases</category>
        
        
      </item>
    
      <item>
        <title>Electrum-NMC v3.3.6 Released</title>
        <description>&lt;p&gt;We’ve released Electrum-NMC v3.3.6.  This release includes important security fixes, and we recommend that all users upgrade.  Here’s what’s new since v3.3.3.1.1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;From upstream Electrum:
    &lt;ul&gt;
      &lt;li&gt;AppImage: we now also distribute self-contained binaries for x86_64 Linux in the form of an AppImage (#5042). The Python interpreter, PyQt5, libsecp256k1, PyCryptodomex, zbar, hidapi/libusb (including hardware wallet libraries) are all bundled. Note that users of hw wallets still need to set udev rules themselves.&lt;/li&gt;
      &lt;li&gt;hw wallets: fix a regression during transaction signing that prompts the user too many times for confirmations (commit 2729909)&lt;/li&gt;
      &lt;li&gt;transactions now set nVersion to 2, to mimic Bitcoin Core&lt;/li&gt;
      &lt;li&gt;fix Qt bug that made all hw wallets unusable on Windows 8.1 (#4960)&lt;/li&gt;
      &lt;li&gt;fix bugs in wallet creation wizard that resulted in corrupted wallets being created in rare cases (#5082, #5057)&lt;/li&gt;
      &lt;li&gt;fix compatibility with Qt 5.12 (#5109)&lt;/li&gt;
      &lt;li&gt;The logging system has been overhauled (#5296).  Logs can now also optionally be written to disk, disabled by default.&lt;/li&gt;
      &lt;li&gt;Fix a bug in synchronizer (#5122) where client could get stuck.  Also, show the progress of history sync in the GUI. (#5319)&lt;/li&gt;
      &lt;li&gt;fix Revealer in Windows and MacOS binaries (#5027)&lt;/li&gt;
      &lt;li&gt;fiat rate providers:
        &lt;ul&gt;
          &lt;li&gt;added CoinGecko.com and CoinCap.io&lt;/li&gt;
          &lt;li&gt;BitcoinAverage now only provides historical exchange rates for paying customers. Changed default provider to CoinGecko.com (#5188)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;hardware wallets:
        &lt;ul&gt;
          &lt;li&gt;Ledger: Nano X is now recognized (#5140)&lt;/li&gt;
          &lt;li&gt;KeepKey:
            &lt;ul&gt;
              &lt;li&gt;device was not getting detected using Windows binary (#5165)&lt;/li&gt;
              &lt;li&gt;support firmware 6.0.0+ (#5205)&lt;/li&gt;
              &lt;li&gt;Trezor: implemented “seedless” mode (#5118)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Coin Control in Qt: implemented freezing individual UTXOs in addition to freezing addresses (#5152)&lt;/li&gt;
      &lt;li&gt;TrustedCoin (2FA wallets):
        &lt;ul&gt;
          &lt;li&gt;better error messages (#5184)&lt;/li&gt;
          &lt;li&gt;longer signing timeout (#5221)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Kivy:
        &lt;ul&gt;
          &lt;li&gt;fix bug with local transactions (#5156)&lt;/li&gt;
          &lt;li&gt;allow selecting fiat rate providers without historical data (#5162)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;fix CPFP: the fees already paid by the parent were not included in the calculation, so it always overestimated (#5244)&lt;/li&gt;
      &lt;li&gt;Testnet: there is now a warning when the client is started in testnet mode as there were a number of reports of users getting scammed through social engineering (#5295)&lt;/li&gt;
      &lt;li&gt;CoinChooser: performance of creating transactions has been improved significantly for large wallets. (d56917f4)&lt;/li&gt;
      &lt;li&gt;Importing/sweeping WIF keys: stricter checks (#4638, #5290)&lt;/li&gt;
      &lt;li&gt;Electrum protocol: the client’s “user agent” has been changed from “3.3.5” to “electrum/3.3.5”. Other libraries connecting to servers can consider not “spoofing” to be Electrum. (#5246)&lt;/li&gt;
      &lt;li&gt;Several other minor bugfixes and usability improvements.&lt;/li&gt;
      &lt;li&gt;qt: fix crash during 2FA wallet creation (#5334)&lt;/li&gt;
      &lt;li&gt;fix synchronizer not to keep resubscribing to addresses of already closed wallets (e415c0d9)&lt;/li&gt;
      &lt;li&gt;fix removing addresses/keys from imported wallets (#4481)&lt;/li&gt;
      &lt;li&gt;kivy: fix crash when aborting 2FA wallet creation (#5333)&lt;/li&gt;
      &lt;li&gt;kivy: fix rare crash when changing exchange rate settings (#5329)&lt;/li&gt;
      &lt;li&gt;A few other minor bugfixes and usability improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Namecoin-specific:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;/2019/02/02/electrum-nmc-checkpointed-auxpow-truncation.html&quot;&gt;Checkpointed AuxPoW truncation&lt;/a&gt;.  This requires servers to run ElectrumX v1.9.2 or higher.  All public servers have upgraded; if you run a private server, please make sure that you’ve upgraded if you want Electrum-NMC to keep working.&lt;/li&gt;
      &lt;li&gt;Pending registrations in Manage Names tab now show the name and value rather than a blank line.&lt;/li&gt;
      &lt;li&gt;Manage Names tab now shows an estimated expiration date in addition to a block count.&lt;/li&gt;
      &lt;li&gt;Manage Names tab now allows copying identifiers and values to the clipboard.&lt;/li&gt;
      &lt;li&gt;Status bar now shows a count of registered names and pending registrations next to the NMC balance.&lt;/li&gt;
      &lt;li&gt;Set memo in name wallet commands.  This improves Coin Control, which paves the way for anonymity.&lt;/li&gt;
      &lt;li&gt;We now distribute Android APK binaries and GNU/Linux AppImage binaries (in addition to the previously existing Python tarball binaries and Windows binaries).  Android and AppImage binaries are not tested in any way (they might not even boot) – please test them and let us know what’s broken.&lt;/li&gt;
      &lt;li&gt;Notify when a new version of Electrum-NMC is available.&lt;/li&gt;
      &lt;li&gt;Add 2 new servers.&lt;/li&gt;
      &lt;li&gt;Remove 2 old servers that are now being decommissioned.&lt;/li&gt;
      &lt;li&gt;Various fixes for exception handling.&lt;/li&gt;
      &lt;li&gt;Various unit tests and fixes for AuxPoW.&lt;/li&gt;
      &lt;li&gt;Various rebranding fixes.&lt;/li&gt;
      &lt;li&gt;Various code quality improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want to draw attention in particular to one of the code quality improvements.  Most forks of Electrum rename the &lt;code class=&quot;highlighter-rouge&quot;&gt;electrum&lt;/code&gt; Python package, in order to avoid causing namespace conflicts if both Electrum and an Electrum fork are installed on the same system.  Unfortunately, the result of this is that any change to &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; statements in upstream usually triggers a merge conflict.  I brought up this subject with SomberNight from upstream Electrum, in the hopes that we could find a solution that would avoid the merge conflicts.  My initial suggestion was for upstream to switch to relative imports; SomberNight shot that down due to code readability concerns, but he posted a code snippet that was a (non-working) attempt to work around the issue.  Based on the rough direction of his code snippet, I managed to produce a working patch to Electrum-NMC that allows the imports to revert to the upstream version.  For an idea of how much improvement this is, prior to this patch, merging one release tag’s worth of commits (i.e. about a month of commits) would typically take me a day or so.  Now, it takes me about 30 minutes.  Kudos to SomberNight for his excellent efforts working with me to get us to a solution that optimizes productivity for both upstream and downstream.&lt;/p&gt;

&lt;p&gt;As usual, you can download it at the &lt;a href=&quot;/download/betas/#electrum-nmc&quot;&gt;Beta Downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund and Cyphrs.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2019/05/21/electrum-nmc-v3.3.6-released.html</link>
        <guid isPermaLink="true">https://namecoin.org//2019/05/21/electrum-nmc-v3.3.6-released.html</guid>
        
        <category>Releases</category>
        
        <category>Electrum Releases</category>
        
        
      </item>
    
      <item>
        <title>ncdns rbm build scripts added support for Linux32, Win64, and Win32 targets</title>
        <description>&lt;p&gt;As Hugo &lt;a href=&quot;/2019/04/15/ncdns-repro.html&quot;&gt;mentioned previously&lt;/a&gt;, rbm-based build scripts for ncdns are available.  rbm is the build system used by Tor Browser.  This work paves the way for reproducible builds of ncdns, improves the security of the build process against supply-chain attacks, and also paves the way for Windows and macOS support in our next-gen TLS interoperability codebase, ncp11 [1].  I’ve been spending some time improving those build scripts; here’s what’s new:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Considerable effort has gone into shrinking the diff compared to upstream tor-browser-build as much as possible.  Upstream Tor has much better QA resources, so it’s important to avoid deviating from what they do unless it’s critically important.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;binutils&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt; are now dependencies of Go projects that use cgo.  This means that we build the compiler from a fixed version of the source code rather than using whatever compiler Debian ships with.  This brings us closer in line with what upstream tor-browser-build does, probably fixes some compiler bugs, and probably improves reproducibility.&lt;/li&gt;
  &lt;li&gt;Linux cross-compiling was fixed.  Currently, this means that 32-bit x86 Linux targets now build.  In the future, once upstream tor-browser-build merges &lt;a href=&quot;https://wiki.raptorcs.com/wiki/Porting/Tor_Browser&quot;&gt;my (currently WIP) patch&lt;/a&gt; for cross-compiled Linux non-x86 targets (e.g. ARM and POWER), those targets should work fine with ncdns as well.&lt;/li&gt;
  &lt;li&gt;Windows targets were fixed.  This mostly consisted of fiddling with dependencies (ncdns uses different libraries on Linux and Windows), but also meant adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;mingw-w64&lt;/code&gt; project from upstream tor-browser-build.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the above improvements are currently awaiting code review.&lt;/p&gt;

&lt;p&gt;The next things I’ll be working on are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fixing macOS targets.  So far, all of the dependencies for ncdns build without errors, but ncdns itself fails because of an interesting bug that seems to manifest when two different cgo-enabled packages have the same name.  ncdns includes a fork of the Go standard library’s &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; package; both the forked package and the original package are dependencies of the ncdns package, and it turns out that the only OS where cgo is used in &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; is… macOS.  We never noticed this before, because our existing ncdns macOS binaries are built without cgo (because no macOS cross-compiler was present); now that we’re building in an environment where cgo is present for macOS, we’re subject to whatever quirks impact cgo on macOS.  I think this is going to be pretty easy to work around by disabling cgo for the ncdns &lt;code class=&quot;highlighter-rouge&quot;&gt;x509&lt;/code&gt; fork, but the cleanest way to do that is going to require getting a patch merged upstream to &lt;code class=&quot;highlighter-rouge&quot;&gt;tor-browser-build&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Adding an &lt;code class=&quot;highlighter-rouge&quot;&gt;ncdns-nsis&lt;/code&gt; project, so that rbm builds the Windows installer.  This is already started, but I haven’t gotten very far yet.&lt;/li&gt;
  &lt;li&gt;Adding other Namecoin Go projects, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;crosssignnameconstraint&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ncp11&lt;/code&gt;.  ncp11 is going to be especially interesting, due to its exercising of cgo code paths that almost no one uses.  This should be useful in finally getting ncp11 binaries for Windows and macOS [1].&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;

&lt;p&gt;[1] Wait, you haven’t heard about ncp11 yet?  Go check out &lt;a href=&quot;/2019/05/08/35c3-summary.html&quot;&gt;my 35C3 slides and workshop notes&lt;/a&gt; about that!&lt;/p&gt;
</description>
        <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2019/05/16/ncdns-rbm-linux32-win64-win32.html</link>
        <guid isPermaLink="true">https://namecoin.org//2019/05/16/ncdns-rbm-linux32-win64-win32.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>35C3 Summary</title>
        <description>&lt;p&gt;As was &lt;a href=&quot;/2018/12/22/35c3.html&quot;&gt;previously announced&lt;/a&gt;, Jonas Ostman, Cassini, and I (Jeremy Rand) represented Namecoin at &lt;a href=&quot;https://events.ccc.de/congress/2017/wiki/index.php/Main_Page&quot;&gt;35C3&lt;/a&gt; in Leipzig, Germany.  Same as last year, we had an awesome time there.  As usual for conferences that we attend, we engaged in a large number of conversations with other attendees.  Also as usual, I won’t be publicly disclosing the content of those conversations, because I want people to be able to talk to me at conferences without worrying that off-the-cuff comments will be broadcast to the public.  However, the first fruits of those discussions started showing up on GitHub by January 2019, so hopefully you won’t be waiting too long.  I &lt;em&gt;would&lt;/em&gt; like to give a special shout-out to Diego “rehrar” Salazar and Dimi “m2049r” Divak from the Monero community, with whom I spent quite a lot of time hanging out during the Congress – very fun people to talk to.&lt;/p&gt;

&lt;p&gt;Namecoin gave 2 talks, as well as a workshop, all of which were hosted by the Monero Assembly and the Critical Decentralization Cluster (CDC).  We’re still waiting for the CDC to post videos of Namecoin’s talks, but in the meantime, here are the slides from Namecoin’s talks, as well as the notes from Namecoin’s workshop:&lt;/p&gt;

&lt;h2 id=&quot;namecoin-assembly-introduction&quot;&gt;Namecoin Assembly Introduction&lt;/h2&gt;

&lt;p&gt;Speaker: Jeremy Rand&lt;/p&gt;

&lt;p&gt;As 35C3 kicked off, the CDC invited each of the Assemblies to give a short presentation introducing themselves.  Although Namecoin wasn’t, officially speaking, an Assembly (we were registered as part of the Monero Assembly), the CDC very kindly treated us as our own Assembly, and therefore we got to give an introduction presentation here.  This presentation was thrown together in the ~15 minutes prior to the introduction presentations beginning, but I think it did a good job of explaining what we’re about.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/resources/presentations/35C3/Namecoin_Introduction_35C3_Monero_Assembly.pdf&quot;&gt;Slides are here.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;lecture-namecoin-as-a-decentralized-alternative-to-certificate-authorities-for-tls-the-next-generation&quot;&gt;Lecture: Namecoin as a Decentralized Alternative to Certificate Authorities for TLS: The Next Generation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;How we improved the attack surface, compatibility, and scalability of Namecoin’s replacement for the Certificate Authority system&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Speaker: Jeremy Rand&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Certificate authorities suck, but the proposed replacements (e.g. DNSSEC/DANE) aren’t so great either. That’s why one year ago at the 34C3 Monero Assembly, I presented Namecoin’s work on a decentralized alternative to certificate authorities for TLS. The attack surface was, in my opinion, substantially lower than any previously existing attempt. Compatibility and scalability weren’t too bad either. But we’re never satisfied, and wanted something even better. With significantly improved attack surface, compatibility, and scalability, our improved design bears little resemblance to what we had one year ago. In this talk, I’ll cover the various shortcomings in our replacement for TLS certificate authorities from one year ago, and how we fixed them.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Certificate authorities (CA’s) pose a serious threat to the TLS ecosystem. Prior proposed solutions (e.g. Convergence, DANE, HPKP, CAA, and CT) simply reshuffle the set of trusted third parties. In contrast, Namecoin solves the underlying problem: if you know a Namecoin domain name, you can find out which TLS certificates are valid for it, with a threat model and codebase nearly identical to the battle-hardened Bitcoin. One year ago at the 34C3 Monero Assembly, I presented a design (with implemented, working code) for accomplishing this in the real world of uncooperative web browsers, with best-in-class attack surface, good compatibility, and good scalability.&lt;/p&gt;

&lt;p&gt;But there was still much that could be improved, ranging from ending our reliance on HPKP API’s (which are being phased out), to preventing the browser’s TLS implementation from leaving your browsing history on the disk, to sandboxing Namecoin’s certificate override code so that it can’t compromise non-Namecoin traffic even if exploited, to supporting Firefox and Tor Browser (both of which posed unique challenges), to name just a few. This talk will cover a wide variety of improvements we made to attack surface, compatibility, and scalability. Expect to learn lots of interesting little-known trivia about the innards of TLS implementations, which can be used for unexpected purposes in our mission to rid the world of the scourge that is certificate authorities.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/resources/presentations/35C3/Namecoin_Next-Gen_TLS_35C3_Monero_Assembly.pdf&quot;&gt;Slides are here.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;workshop-demo--walkthrough-namecoin-as-a-decentralized-alternative-to-certificate-authorities-for-tls&quot;&gt;Workshop: Demo + Walkthrough: Namecoin as a Decentralized Alternative to Certificate Authorities for TLS&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Demo of the latest Namecoin TLS code, and install it yourself&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Workshop Hosts: Jeremy Rand and Jonas Ostman&lt;/p&gt;

&lt;p&gt;In this workshop, I’ll demo the latest Namecoin TLS code that’s covered in my talk “Namecoin as a Decentralized Alternative to Certificate Authorities for TLS: The Next Generation”. I’ll also walk you through installing it on your own machine so you can try it out for yourself. Bring a GNU/Linux VM (or, if you’re particularly brave, a GNU/Linux system that’s not a VM), and preferably have Chromium, Firefox, and Tor Browser installed (you can choose to install only a subset of those browsers if you like).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/resources/presentations/35C3/tls-workshop/&quot;&gt;Notes are here.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;thanks&quot;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;Huge thank you to the following groups who facilitated our participation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Monero Assembly&lt;/li&gt;
  &lt;li&gt;The Critical Decentralization Cluster&lt;/li&gt;
  &lt;li&gt;Replicant&lt;/li&gt;
  &lt;li&gt;The anonymous person who obtained tickets for us – you know who you are, thank you!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re looking forward to 36C3 in December 2019!&lt;/p&gt;

&lt;p&gt;This work was funded by NLnet Foundation’s Internet Hardening Fund.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2019/05/08/35c3-summary.html</link>
        <guid isPermaLink="true">https://namecoin.org//2019/05/08/35c3-summary.html</guid>
        
        <category>News</category>
        
        
      </item>
    
  </channel>
</rss>
