<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Namecoin</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>https://namecoin.org//</link>
    <atom:link href="https://namecoin.org//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 17 Jun 2017 19:36:07 +0000</pubDate>
    <lastBuildDate>Sat, 17 Jun 2017 19:36:07 +0000</lastBuildDate>
    <generator>Jekyll v2.2.0</generator>
    
      <item>
        <title>Progress on Electrum-NMC</title>
        <description>&lt;p&gt;Work on the electrum port for Namecoin has been moving along nicely. It was decided that we will use the electrum-client from spesmilo, along with the electrumX server. ElectrumX was chosen due to the original electrum-server being discontinued a few months ago. 
So far the electrum client has been ported over for compatability with electrumX. This includes the re-branding, blockchain parameters and other electrum related settings for blockchain verification&lt;/p&gt;

&lt;p&gt;On the roadmap now are:
  - Extend electrumX NMC Support to allow for full veritification of AuxPow
  - Modify new electrum client to verify the new AuxPow
  - Add Name handling support to electrum&lt;/p&gt;

&lt;p&gt;These repo’s are for testing purposes only. Do not use these unless your willing to risk losing funds. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Multicoin-co/electrum-nmc&quot;&gt;Client&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;https://github.com/Multicoin-co/electrum-nmc-server&quot;&gt;Server/ Not uploaded yet&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/06/17/progress-electrum-nmc.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/06/17/progress-electrum-nmc.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>How we&#39;re doing TLS for Chromium</title>
        <description>&lt;p&gt;Back in the “bad old days” of Namecoin TLS (circa 2013), we used the Convergence codebase by Moxie Marlinspike to integrate with TLS implementations.  However, we weren’t happy with that approach, and have abandoned it in favor of a new approach: dehydrated certificates.&lt;/p&gt;

&lt;p&gt;What’s wrong with Convergence?  Convergence uses a TLS intercepting proxy to replace the TLS implementation used by web browsers.  Unfortunately, TLS is a really difficult and complex protocol to implement, and the nature of intercepting proxies means that if the proxy makes a mistake, the web browser won’t protect you.  It’s fairly commonplace these days to read news about a widely deployed TLS intercepting proxy that broke things horribly.  Lenovo’s SuperFish is a well-known example of a TLS intercepting proxy that made its users less safe.&lt;/p&gt;

&lt;p&gt;Convergence was in a somewhat special situation, though: it reused a lot of code that was distributed with Firefox (via the js-ctypes API), which reduced the risk that it would do something horribly dangerous with TLS.  It was also originally written by Moxie Marlinspike (well-known for Signal), which additionally reduced the risk of problems.  Unfortunately, Mozilla stopped shipping the relevant code with Firefox, Moxie stopped maintaining Convergence, and Mozilla decided to deprecate additional functionality that was used by Convergence.  This made it clear that the Convergence codebase wasn’t going to be viable, and that if we wanted to use an intercepting proxy, we’d be using a codebase that was substantially less reliable than Convergence.&lt;/p&gt;

&lt;p&gt;So, we went back to the drawing board, and came up with a new solution.&lt;/p&gt;

&lt;p&gt;As a first iteration, TLS implementations have a root CA trust store, and injecting a self-signed end-entity x509 certificate into the root CA trust store will allow that certificate to be trusted for use by a website.  (For an explanation of how this can be done with Windows CryptoAPI, see my previous post, &lt;a href=&quot;/2017/05/27/reverse-engineering-cryptoapi-cert-blobs.html&quot;&gt;Reverse-Engineering CryptoAPI’s Certificate Registry Blobs&lt;/a&gt;).  We can do this right before the TLS connection is opened by hooking the DNS request for the &lt;code&gt;.bit&lt;/code&gt; domain (this is easy since we control the ncdns codebase that processes the DNS request).&lt;/p&gt;

&lt;p&gt;However, there are three major issues with this approach:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An x509 certificate is very large, and storing this in the blockchain would be too expensive.  Using a fingerprint would be much smaller, but we can’t recover the full certificate from just the fingerprint.&lt;/li&gt;
  &lt;li&gt;x509 certificates might be valid for a different purpose than advertised.  For example, if we injected a certificate that has the CA bit enabled, the owner of that certificate would be able to impersonate arbitrary websites if they can get you to first visit their malicious &lt;code&gt;.bit&lt;/code&gt; domain.  x509 is a complex specification, and we don’t want to try to detect every possible type of mischief that can be done with them.&lt;/li&gt;
  &lt;li&gt;Injecting a certficate doesn’t prevent a malicious CA that is trusted for DNS names from issuing fraudulent certificates for &lt;code&gt;.bit&lt;/code&gt; domain names.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Problems 1 and 2 can be solved at the same time.  First, we use ECDSA certificates instead of the typical RSA.  ECDSA is supported by all recent TLS implementations, but RSA is largely dominant because of inertia and the prevalence of outdated software.  By excluding the old software that relies on RSA, we get much smaller keys and signatures.  (Old software isn’t usable with this scheme anyway, because of our solution to Problem 3.)&lt;/p&gt;

&lt;p&gt;Next, instead of having domain owners put the entire ECDSA x509 certificate in the blockchain, the domain owner extracts only 4 components of the certificate: the public key, the start and end timestamps for the valdity period, and the signature.  As long as the rest of the certificate conforms to a fixed template, those 4 components (which we call a &lt;em&gt;dehydrated certificate&lt;/em&gt;) can be combined with a domain name and the template, and &lt;em&gt;rehydrated&lt;/em&gt; into a fully valid x509 certificate that can be injected into the trust store.  This technique was invented by Namecoin’s Lead Security Engineer, Ryan Castellucci.&lt;/p&gt;

&lt;p&gt;It should be noted that a dehydrated certificate can’t do any mischief such as being valid for unexpected uses; all of the potentially dangerous fields are provided by the template, which is part of ncdns.  The dehydrated data is also quite small: circa 252 bytes (we can probably shrink it further in the future).  Implementing this in ncdns was a little bit tricky, because the Go standard library’s x509 functions that are needed to perform the signature splicing are private.  I ended up forking the Go x509 package, and adding a public function that exposes the needed functionality.  (Before you freak out about me forking the x509 package, my package consists of a single file that contains the additional function, and a Bash script that copies the official x509 library into my fork.  It’s reasonably self-contained and shouldn’t run into the issues that more invasive forks encounter regularly.)&lt;/p&gt;

&lt;p&gt;So what about Problem 3?  Well, for this, I ~~abuse~~ &lt;em&gt;take advantage of&lt;/em&gt; an interesting quirk in browser implementations of HPKP (HTTPS Public Key Pinning).  Browsers only enforce key pins against certificates for built-in certificate authorities; user-specified certificate authorities are exempt from HPKP.  This behavior is presumably to make it easier for users to intentionally intercept their own traffic (or for corporations to intercept traffic in their network, which is a less ethical version of a technologically identical concept).  As such, I believe that this behavior will not go away anytime soon, and is safe to rely on.  The user places a key pin at the &lt;code&gt;bit&lt;/code&gt; domain, with subdomains enabled, for a “nothing up my sleeve” public key hash.  As a result, no public CA can sign certificates for any domain ending in &lt;code&gt;.bit&lt;/code&gt;, but user-specified CA’s can.  Windows CryptoAPI treats user-specified end-entity certificates as user-specified CA’s for this purpose.  As such, rehydrated certificates that ncdns generates will be considered valid, but nothing else will.  (Unless you installed another user-specified CA on your machine that is valid for &lt;code&gt;.bit&lt;/code&gt;.  But if you did that, then either you want to intercept &lt;code&gt;.bit&lt;/code&gt;, in which case it’s fine, or you did it against your will, in which case you are already screwed.)&lt;/p&gt;

&lt;p&gt;I’ve implemented dehydrated certificate injection as part of ncdns for 2 major TLS implementations: CryptoAPI (used by Chromium on Windows) and NSS (used by Chromium on GNU/Linux).  These are currently undergoing review as pull requests for ncdns.  (The macOS trust store should also be feasible, but I haven’t done anything with it yet.)  Right now, those pull requests prompt the user during ncdns installation with instructions for adding an HPKP pin to Chromium.  (If you’ve tried out the ncdns for Windows installer on a machine that has Chromium, you might have noticed this dialog.)  This isn’t great UX, and I’ve found a way to do this automatically without user involvement, which I will be implementing into the ncdns installer soon.&lt;/p&gt;

&lt;p&gt;Unfortunately, abusing HPKP in this way isn’t an option in Firefox, because Mozilla’s implementation of HPKP doesn’t permit key pins to be placed on TLD’s.  (As far as I can tell, the specifications seem to be ambiguous on this point.)  Mozilla &lt;em&gt;does&lt;/em&gt; offer an XPCOM API for HPKP (specifically, nsISiteSecurityService) that can inject key pins for individual &lt;code&gt;.bit&lt;/code&gt; domains on the fly, but since XPCOM is deprecated by Mozilla, this is not a viable option as-is.  On the bright side, Mozilla seems interested in implementing the API’s we need to do this in a less hacky way, so I’ll be engaging with Mozilla on this.&lt;/p&gt;

&lt;p&gt;As another note: NSS trust store injection is rather slow right now, because I’m currently using NSS’s &lt;code&gt;certutil&lt;/code&gt; to do the injection, and &lt;code&gt;certutil&lt;/code&gt; isn’t properly optimized for speed.  Sadly, there doesn’t seem to be an easy way of bypassing &lt;code&gt;certutil&lt;/code&gt; for NSS like there is for CryptoAPI (NSS’s trust store is a sqlite database with a significantly more complex structure than CryptoAPI, and the CryptoAPI trick of leaving out all the data besides the certificate doesn’t work for NSS).  I will probably be filing at least one bug report with NSS about &lt;code&gt;certutil&lt;/code&gt;’s performance issues.  If progress on fixing those issues appears to be unlikely, I think it may be feasible to do some witchcraft to speed it up a lot, but I’m hoping that things won’t come to that.&lt;/p&gt;

&lt;p&gt;I’m hoping to get at least the CryptoAPI PR merged to official ncdns very soon, at which point I’ll ask Hugo to release a new ncdns for Windows installer so everyone can have fun testing.&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/06/15/how-were-doing-tls-for-chromium.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/06/15/how-were-doing-tls-for-chromium.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncdns for Windows Beta Installer Now Available</title>
        <description>&lt;p&gt;In order to facilitate the easy resolution of &lt;code&gt;.bit&lt;/code&gt; domains, an installer for
ncdns for Windows has been under development. This installer automatically
installs and configures Namecoin Core, Unbound and ncdns.&lt;/p&gt;

&lt;p&gt;An experimental binary release for this installer is now available. Interested
Namecoin users are encouraged to test the installer and report any issues they
encounter.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/files/ncdns-2017-05-25-notreproduced/ncdns-install-2017-05-25-notreproduced.exe&quot;&gt;ncdns-install.exe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/files/ncdns-2017-05-25-notreproduced/ncdns-install-2017-05-25-notreproduced.exe.sig&quot;&gt;ncdns-install.exe.sig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This release does not yet integrate the TLS integration support for ncdns under
development by Jeremy Rand. This will be incorporated in a future release.&lt;/p&gt;

&lt;p&gt;The development of this installer was funded by NLnet.&lt;/p&gt;
</description>
        <pubDate>Tue, 30 May 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/05/30/ncdns.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/05/30/ncdns.html</guid>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
      <item>
        <title>Reverse-Engineering CryptoAPI&#39;s Certificate Registry Blobs</title>
        <description>&lt;p&gt;Every so often, I’m doing Namecoin-related development research (in this case, making TLS work properly) and I run across some really interesting information that no one else seems to have documented.  While this post isn’t solely Namecoin-related (it’s probably useful to anyone curious about tinkering with TLS), I hope you find it interesting regardless.&lt;/p&gt;

&lt;p&gt;A note on the focus here: while this research was done for the purpose of engineering specific things, I’m writing it from more of a “basic research” point of view.  My dad’s career was in basic research, and I firmly believe that learning cool stuff for the sake of learning it is a worthwhile endeavor, regardless of what the practical applications are (and indeed, usually when basic research turns out to have applications, which is commonplace, the initial researchers didn’t know what those applications would be).  Since I’m an engineer, there will be a bit of application-related commentary here, but don’t read this expecting it to be a summary of the next Namecoin software release’s feature set or use cases.&lt;/p&gt;

&lt;p&gt;In Windows-based OS’s, most applications handle certificates via the CryptoAPI.  CryptoAPI serves a somewhat similar role in Windows certificate verification as OpenSSL does on GNU/Linux-based systems.  Notably, Mozilla-based applications like Firefox and Thunderbird don’t use CryptoAPI (nor OpenSSL); they use the Mozilla library NSS (on both Windows and GNU/Linux).  However, except for Mozilla applications, and a few applications ported from GNU/Linux (e.g. Python) which use OpenSSL, just about everything on Windows uses CryptoAPI for its certificate needs.  CryptoAPI is a quite old Microsoft technology; it dates back at least to Windows NT 4.  (It might be even older, but I’ve never touched nor read about any of the earlier incarnations of Windows NT, so I wouldn’t know.)  Like any other codebase that’s been around for over 2 decades, its design is somewhat convoluted, and my guess is that if it were being designed from scratch today, it would look very different.&lt;/p&gt;

&lt;p&gt;CryptoAPI maintains a bunch of different stores for certificates.  These stores are designated according to the certificate’s intended usage (e.g. a website cert, an intermediate CA, a root CA, a personal cert, and a bunch of other use cases that I don’t understand because I’ve never managed any kind of certificate infrastructure for an enterprise), the method by which the certificate was loaded (e.g. by a web browser cache, by group policy, and a bunch of other methods that, again, I don’t understand because I don’t do enterprise infrastructure), which users have permission to use the certs (roaming profiles have special handling), and even which applications are expected to consider them valid (Cortana, Edge, and Windows Store all have their own certificate stores, for reasons that I don’t understand in the slightest, although I do wonder whether adding an intercepting proxy to Cortana’s cert store would be useful in an attempt to wiretap Cortana and see what data Microsoft collects on its users).  You can see a subset of the certificate stores’ contents via &lt;code&gt;certmgr.msc&lt;/code&gt;, and there’s a command-line tool included with Windows called &lt;code&gt;certutil&lt;/code&gt; which can edit or dump this data as well.  Neither of these tools actually shows all of the stores, e.g. Cortana, Edge, and Windows Store are secret and invisible.  Also, don’t confuse the CryptoAPI &lt;code&gt;certutil&lt;/code&gt; with the Mozilla command-line tool also called &lt;code&gt;certutil&lt;/code&gt;, which is similar but is for NSS stores and has an entirely different syntax.&lt;/p&gt;

&lt;p&gt;Incidentally, CryptoAPI has some interesting behavior when it comes to root CA’s.  If you add a self-signed website cert to a root CA store, that self-signed website cert becomes fully trusted (HSTS and HPKP even work, which implies that it doesn’t get reported as an override).  Of course, this is usually a dangerous idea, since that self-signed website could then sign other websites’ certs – you did tell Windows to treat it as a root CA, after all.  But Windows actually does respect the CA and CertUsage flags in this case: if you construct a cert that is not valid as a CA, Windows will happily let you add it to a root CA store, will accept it as a website cert, but will refuse to trust any other cert signed by that cert.  Namecoin lead security engineer Ryan Castellucci told me on IRC that he’s not sure if this behavior is even defined in a spec, but in my testing, NSS seems to exhibit identical behavior (no idea about OpenSSL).  Regardless of specs, Microsoft has a fanatical obsession with not changing behavior of any public-facing API that might impact backwards compatibility (to Microsoft, the original implementation &lt;em&gt;is&lt;/em&gt; the spec), so I think it’s probably pretty safe to rely on this behavior, even when someone as thoroughly knowledgeable as Ryan has never encountered anything in the wild that does this.  Of course, that’s just my assessment – I take no responsibility if this burns you.  As they say on &lt;em&gt;Brainiac: Science Abuse&lt;/em&gt;, “we do these experiments so you don’t have to – do not try this at home – no really, don’t.”&lt;/p&gt;

&lt;p&gt;Now, unfortunately, CryptoAPI has a problem.  It expects a user to have administrator privileges in order to add a cert to most of the stores.  This is probably well-meaning, because you definitely don’t want some random piece of malware that abused a Javascript zero-day to be able to add a root CA, or anything like that.  (Fun fact: any such malware can, however, add a root CA to Firefox, because the NSS cert stores are simply a file in your profile directory, and are therefore user-writeable.  That’s even true for Firefox on many GNU/Linux systems, even though the OpenSSL store is protected.)  Of course, the security benefits of requiring privileged access for this are dubious, given that malware running as the primary user can do all sorts of other mischief, such as replacing the shortcut to your browser with a patched version that MITM’s you.  However, regardless of the alleged security benefit of this policy, there’s a fairly obvious problem here: this implies that if you want to run software that programatically adds root CA’s, perhaps for the use case in the previous paragraph, you need to give that software Administrator privileges.  As a (minimally) sane person, running &lt;em&gt;anything&lt;/em&gt;, much less a daemon that interacts with a bunch of untrusted network hosts (e.g. Namecoin peers), as an administrator is an absolute dealbreaker.  Yes, I did code it that way as a proof of concept for the hackathon by the College Cryptocurrency Network that I got 3rd place in, but no way in hell am I going to ship software to end users that does such irresponsible things.  And if you’re the kind of person who would be tempted to do that, please, for the sake of your users, exit the software development field before you get some dissident or whistleblower murdered.  This stuff actually is important to those of us with ethics.&lt;/p&gt;

&lt;p&gt;You might wonder: why the heck isn’t there a permission system for this?  Coming from a culture that loves the concept (if not implementation) of things like AppArmor and SELinux, that was certainly my thought.  But alas, I was unable to find any Microsoft documentation that suggested a way to delegate access to a specific cert store to some other user.  (Of course, Microsoft’s documentation is a train wreck, so maybe they did address this use case and I just couldn’t find any mention of it.)  However, I did learn something interesting by Googling.  While OpenSSL cert stores are just a filesystem folder, and NSS cert stores are a database file (whose database backend is either BerkeleyDB or SQLite), CryptoAPI mostly uses… the Windows Registry.  Remember, this is Microsoft, they dump their garbage in the registry with as little hesitation as petroleum companies dump their garbage in Latin-American rainforests.  (Personal certificates that are part of roaming profiles are instead placed in a user’s profile folder, apparently ever since Windows 2000 came out.  But almost everything else is in the registry.)  Since the registry &lt;em&gt;does&lt;/em&gt; have a permission system, this looks like the perfect solution.&lt;/p&gt;

&lt;p&gt;It was relatively easy to figure out where these certificates are located in the dense, uncharted jungle that is the registry.  Indeed, you can search your registry for keys titled &lt;code&gt;Root&lt;/code&gt; and you’ll find all the root CA stores (the other types of stores are in sibling keys).  Each certificate is located in its own subkey (the subkey is named based on the certificate’s SHA-1 fingerprint).  Actually, let me digress for a moment.  Why the hell is Microsoft using SHA-1 hashes as the names of registry keys, even in Windows 10?  Yes, I know SHA-1 was not known to be weak when Microsoft designed CryptoAPI, but tying the name of something to a specific hash algorithm seems like a massively stupid idea in terms of design and safety.  (And no, it’s not a good idea to drive drunk just because your crazy git uncle Linus does it every New Year’s Eve and hasn’t died yet.)  Anyway, inside that subkey is a single value, called &lt;code&gt;Blob&lt;/code&gt;, which contains binary data encoding the certificate.  Not too complicated, right?&lt;/p&gt;

&lt;p&gt;Oh, wait.  We’re talking about Microsoft.  &lt;em&gt;Everything&lt;/em&gt; is complicated, usually for no discernable reason whatsoever.  Also, the most complicated things usually have the least documentation.  I know people who have long-ago adopted a policy of getting their Windows documentation from the ReactOS source code instead of the Microsoft website, because a small, minimally funded project that’s reverse-engineering everything writes more accurate documentation than the wildly successful company who actually engineered the system and wrote the original source code.  Anyway, I looked at the contents of the binary blob in the registry, and noticed that it didn’t look right.  More specifically, it wasn’t a DER-encoded x.509 structure, nor was it even PEM-encoded.  Actually, there was a substring that &lt;em&gt;did&lt;/em&gt; correspond to the DER-encoded x.509 structure, but there was a crapload of extra data too.  For reference, it looked like this (in &lt;code&gt;.reg&lt;/code&gt; format):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Windows Registry Editor Version 5.00

[HKEY_CURRENT_USER\Software\Microsoft\SystemCertificates\trust\Certificates\BBC2FAE0B710372FC293E092904F7E628D3D4546]
&quot;Blob&quot;=hex:04,00,00,00,01,00,00,00,10,00,00,00,97,30,35,47,95,5b,3b,e4,05,71,\
  d4,5c,6c,cd,7e,21,0f,00,00,00,01,00,00,00,20,00,00,00,95,6e,94,6c,93,46,fd,\
  c8,b5,02,66,9b,c9,1b,be,5c,19,df,97,f0,b4,8d,fa,f2,57,28,77,a1,7a,37,bc,bc,\
  14,00,00,00,01,00,00,00,14,00,00,00,33,c6,3b,84,aa,7a,15,b1,23,a5,4c,7e,38,\
  23,25,bc,e8,7f,cb,eb,19,00,00,00,01,00,00,00,10,00,00,00,73,1a,dd,da,db,51,\
  b3,34,87,0f,15,1e,03,c0,b0,11,5c,00,00,00,01,00,00,00,04,00,00,00,00,01,00,\
  00,03,00,00,00,01,00,00,00,14,00,00,00,bb,c2,fa,e0,b7,10,37,2f,c2,93,e0,92,\
  90,4f,7e,62,8d,3d,45,46,20,00,00,00,01,00,00,00,d3,01,00,00,30,82,01,cf,30,\
  82,01,76,a0,03,02,01,02,02,14,00,f5,9d,9e,8e,09,5d,3f,54,a9,02,2a,89,09,62,\
  41,df,f1,fa,e1,30,0a,06,08,2a,86,48,ce,3d,04,03,02,30,3e,31,19,30,17,06,03,\
  55,04,03,13,10,74,65,73,74,2e,76,65,63,6c,61,62,73,2e,62,69,74,31,21,30,1f,\
  06,03,55,04,05,13,18,4e,61,6d,65,63,6f,69,6e,20,54,4c,53,20,43,65,72,74,69,\
  66,69,63,61,74,65,30,1e,17,0d,31,37,30,31,30,31,30,30,30,30,30,30,5a,17,0d,\
  31,38,30,31,30,31,30,30,30,30,30,30,5a,30,3e,31,19,30,17,06,03,55,04,03,13,\
  10,74,65,73,74,2e,76,65,63,6c,61,62,73,2e,62,69,74,31,21,30,1f,06,03,55,04,\
  05,13,18,4e,61,6d,65,63,6f,69,6e,20,54,4c,53,20,43,65,72,74,69,66,69,63,61,\
  74,65,30,59,30,13,06,07,2a,86,48,ce,3d,02,01,06,08,2a,86,48,ce,3d,03,01,07,\
  03,42,00,04,fe,1c,b5,b7,88,c1,d7,8a,e8,9f,1e,a7,d6,6f,15,42,1d,36,8d,b9,51,\
  7e,ed,9c,57,7f,cb,73,2a,26,7d,59,63,ca,95,10,30,68,e6,bb,15,8d,6c,f2,34,6b,\
  77,05,ea,68,8d,3a,28,d2,0a,eb,6a,4d,97,5b,ed,32,ef,8a,a3,52,30,50,30,0e,06,\
  03,55,1d,0f,01,01,ff,04,04,03,02,07,80,30,13,06,03,55,1d,25,04,0c,30,0a,06,\
  08,2b,06,01,05,05,07,03,01,30,0c,06,03,55,1d,13,01,01,ff,04,02,30,00,30,1b,\
  06,03,55,1d,11,04,14,30,12,82,10,74,65,73,74,2e,76,65,63,6c,61,62,73,2e,62,\
  69,74,30,0a,06,08,2a,86,48,ce,3d,04,03,02,03,47,00,30,44,02,20,65,d7,93,a8,\
  18,c7,de,6f,42,89,27,47,08,90,e1,ed,bb,23,e0,d7,51,69,04,f0,be,9d,98,bc,00,\
  88,69,dc,02,20,5b,b4,45,f5,9e,76,48,37,1d,58,1b,34,f9,17,1f,12,c6,98,cb,c0,\
  d0,d3,50,19,2a,db,63,69,6b,31,cb,20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just to see what would happen, I took a raw DER-encoded x.509 certificate and shoved it into the registry to see if CryptoAPI would accept it, but of course it didn’t, so I needed to figure out what that extra data was.  Now, as a middle school student, as a high school student, and as an undergraduate student (though sadly not as a graduate student), I did a lot of reverse-engineering of various binary formats (making a Mega Drive Zero Wing ROM include custom dialogue between “Cracker” and “Admin” about how “All your 802.11b are belong to us” and that “You are on the way to DDoS microsoft.com” was a few days of work in 7th grade).  So I was quite ready to go that route.  However, I learned long ago that it’s always better to spend a few hours on Google to see if someone else has already done your dirty work for you, because usually someone has.  So I did that.&lt;/p&gt;

&lt;p&gt;The first result I found was &lt;a href=&quot;https://marc.info/?l=ms-capicom&amp;amp;m=103429631723830&amp;amp;w=2&quot;&gt;a Microsoft mailing list thread from 2002&lt;/a&gt; where Mitch Gallant and Rebecca Bartlett both inquired about this format.  Microsoft’s response was to refuse to provide any documentation, and generally be rude and unhelpful, on the grounds that this use case was unsupported.  Now, hang on, because I need to point something out.  I’ve asked a lot of software vendors for obscure technical information about their products, nearly all of which were for unsupported use cases.  By far my favorite vendor to work with in this area was the robotics hardware company Charmed Labs (they are incredibly nice and helpful, even happily giving me proprietary source code that was protected by patents, for me to do whatever I wanted with, as long as I didn’t distribute or use commercially).  But generally speaking, the “good” companies’ responses to such requests follow this kind of formulation:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What you’re trying to do is not something that we officially support.&lt;/li&gt;
  &lt;li&gt;We think what you’re doing is a bad idea for these reasons.&lt;/li&gt;
  &lt;li&gt;There may be other reasons that it’s a bad idea, which we haven’t thought of.&lt;/li&gt;
  &lt;li&gt;We think the “right” way is something else, and we’re happy to help you with that method if you like.&lt;/li&gt;
  &lt;li&gt;Regardless, here are all the answers to your questions.&lt;/li&gt;
  &lt;li&gt;If you have any other questions about this unsupported use case, we’ll try to answer, as long as it doesn’t become a time sink for us.  Don’t expect super-quick replies, because we’re looking up answers in our spare time.&lt;/li&gt;
  &lt;li&gt;If any of the info we’re providing turns out to be incomplete or wrong, or you end up getting burned in any other way for doing this, we’re not responsible.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Whenever I’ve gotten a reply like this (and it’s happened reasonably often), I was a happy camper, because I was able to make an informed decision.  Sometimes I decided to abandon my quest; other times I disregarded the warning and pressed on anyway.  In the latter case, I knew full well what I was getting into, because the vendor had given me sufficient information and context for me to make up my mind.  Usually, I was satisfied with my decision at the end of the day.  In fact, I cannot remember a case where I did something I seriously regretted after being warned against it like that.  I’m sure it could have happened, had the quantum noise been different, but if that had come to pass, I’m confident that I wouldn’t have blamed the vendor for giving me information coupled with advice that I ignored.  There &lt;em&gt;were&lt;/em&gt; several times where my disregard for the warning resulted in some lost development time or temporary confusion, but seriously, who could possibly be angry for the chance to gain practical experience in an unfamiliar area, particularly given that when I did decide to change course, I now had &lt;em&gt;both&lt;/em&gt; the vendor’s expert recommendations &lt;em&gt;and&lt;/em&gt; my new practical experience to inform my decision.  What more could anyone want?  My point is, the good software vendors treat their users like real, sentient people when they ask for information, while the bad software vendors (Microsoft included) treat their users the way that the owners of Number 4 Privet Drive treated their nephew up until mid-1991: &lt;em&gt;Don’t ask questions!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Technically, Microsoft did provide parts (1) through (4) of the above form, but they don’t even qualify for partial credit here, because the reason they gave for (2) is atrocious on its face: once in 2 decades, they moved a store from the registry to the filesystem to handle roaming profiles, and anyone using the registry directly would have had to update their software (with a really minor change) once Windows 2000 came out.  Frankly, if you’re unwilling to update your software once in 2 decades, I don’t know why you’re in this field, and you should go get a Ph.D. in Latin Literature so that you don’t need to ever learn anything new in order to stay at the top of your field for your whole life.  Anyway, reading that thread was entirely unhelpful, except for the fact that it told me I had made a great choice never interviewing at Microsoft, because if I ever become the kind of tech support robot who shows up in that thread, someone please kill me.&lt;/p&gt;

&lt;p&gt;So, I continued to look through Google for a while.  And I did find two people who had actually tried to reverse-engineer the blob format.  &lt;a href=&quot;https://timjacobs.blogspot.de/2008/08/wm6-and-self-signed-certificates.html&quot;&gt;Tim Jacobs had posted some information in 2008&lt;/a&gt;, and &lt;a href=&quot;https://itsme.home.xs4all.nl/projects/xda/smartphone-certificates.html&quot;&gt;Willem Jan Hengeveld had posted some other info in 2003&lt;/a&gt;.  Interestingly, both Tim and Willem had been looking into dealing with bugs in mobile versions of Windows that made it hard to import a certificate any other way.  (See, basic research has diverse, and often non-obvious, use cases.)  Tim’s documentation wasn’t particularly helpful for me, because while it explained how to solve a specific problem (which wasn’t the problem I had), it didn’t really explain why that solution worked, nor how he figured it out (actually, I’m very skeptical of why his solution even works, and based on my research below, I suspect that he simply got lucky and that his method will spectacularly break in many real-world scenarios).  However, Willem’s documentation was very helpful.  According to Willem, a cert blob is a sequence of records, each of which consists of a 4-byte &lt;code&gt;propid&lt;/code&gt; (which I gather means “property ID”), a 4-byte &lt;code&gt;unknown&lt;/code&gt; value (which I assume is reserved by Microsoft for future expansion, since everything I encountered used exactly the same value), a 4-byte size, and then the raw data for that property (whose size in bytes was specified by the size field).  Willem also listed the common property ID’s that show up.&lt;/p&gt;

&lt;p&gt;There was just one problem: the blob I was looking at had a bunch of property ID’s that weren’t in Willem’s list.  So, of course, I Googled for one of the property ID’s that &lt;em&gt;was&lt;/em&gt; in Willem’s list, and I ended up finding &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa376079%28v=vs.85%29.aspx&quot;&gt;this page&lt;/a&gt; and &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa376573%28v=vs.85%29.aspx&quot;&gt;this page&lt;/a&gt; on the Microsoft website, which had a (mostly) complete list.  Except… those references had descriptions (which, admittedly, is nice) but not any info on what numerical values the property ID’s were.  However, they did include a reference to &lt;code&gt;Wincrypt.h&lt;/code&gt;.  &lt;em&gt;Ah ha&lt;/em&gt;, I thought, &lt;em&gt;I’ve done this before!&lt;/em&gt;  So I went and looked up that header file in the MinGW source code, and was treated to a complete list of the numerical values of all the property ID’s.&lt;/p&gt;

&lt;p&gt;From there, I started gathering a list of which property ID’s Windows seemed to be using, so that I could generate the appropriate information while inserting a cert, given only its DER x.509 encoding.  Unfortunately, quite a lot of the property ID’s were for things that looked quite annoying to calculate.  After trying to figure out a way to calculate a “signature hash” of an x.509 cert in Golang, and not having any fun whatsoever (mind you, I did find ways to do it, I just knew I would despise the process of coding it, and of ever looking at the horrible code that was bound to result), a thought crossed my mind: &lt;em&gt;What does CryptoAPI do if some of the properties are missing from the blob, as long as the record format is correct?&lt;/em&gt;  So, I took the blob that Windows had generated, and I wiped everything except for the x.509 cert itself and the 12-byte header for that property.  I inserted it into the registry, and visited the corresponding website in Chrome.  The website loaded just fine!  Then I went back to the registry editor, and refreshed, and was quite surprised to see that the moment that CryptoAPI had validated the cert, it had re-calculated all of the other missing fields, and inserted them into the registry.&lt;/p&gt;

&lt;p&gt;So, basically, all of those other properties are, as best I can tell, just an elaborate caching mechanism, completely superfluous for proper operation.  Microsoft made CryptoAPI substantially more complex, added at least 4 public-facing API functions (those are just the ones I accidentally ran across), and invented a custom, undocumented binary blob format, all so that they could avoid doing a couple of extra hash operations when verifying a chain that included a previously seen certificate.  (Remember, hash operations are fast, while RSA and ECDSA, which aren’t cached here and are still needed to verify cert chains, are slow.)&lt;/p&gt;

&lt;p&gt;Typical Microsoft.  &lt;em&gt;slow clap&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks goes to ncdns developer Hugo Landau and Monero developer Riccardo Spagni for keeping me company on IRC while I figured all of the above out.  What does this have to do with Namecoin?  You’ll find out in my next post.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 27 May 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/05/27/reverse-engineering-cryptoapi-cert-blobs.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/05/27/reverse-engineering-cryptoapi-cert-blobs.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Progress on ncdns-nsis</title>
        <description>&lt;p&gt;Development nears completion on the NSIS-based Namecoin and ncdns bundle
installer for Windows.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/hlandau/ncdns-nsis&quot;&gt;ncdns-nsis&lt;/a&gt; repository provides
source code for an NSIS-based installer which can automatically install and
configure Namecoin Core, ncdns and Unbound and configure name resolution of
&lt;code&gt;.bit&lt;/code&gt; domains via Unbound.&lt;/p&gt;

&lt;p&gt;The installer can install Namecoin Core and Unbound automatically, but also
allows users to opt out of the installation of these components if they wish to
provide their own.&lt;/p&gt;

&lt;p&gt;Completion of the ncdns-nsis installer project will enable the Namecoin project
to distribute a Windows binary installer providing a turnkey,
configuration-free solution for &lt;code&gt;.bit&lt;/code&gt; domain resolution. The installer is also
intended to support reproducible builds and can be built from a POSIX system.&lt;/p&gt;

&lt;p&gt;At this point, extensive testing is the primary work remaining on the completion
of the ncdns-nsis installer.&lt;/p&gt;
</description>
        <pubDate>Fri, 26 May 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/05/26/progress-ncdns-nsis.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/05/26/progress-ncdns-nsis.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Receives Funding from NLnet Foundation&#39;s Internet Hardening Fund</title>
        <description>&lt;p&gt;We’re happy to announce that Namecoin is receiving 29,895 EUR in funding from &lt;a href=&quot;https://nlnet.nl/&quot;&gt;NLnet Foundation&lt;/a&gt;’s Internet Hardening Fund.  If you’re unfamiliar with NLnet, you might want to read &lt;a href=&quot;https://nlnet.nl/foundation/&quot;&gt;about NLnet Foundation&lt;/a&gt;, or just take a look at &lt;a href=&quot;https://nlnet.nl/thema/index.html&quot;&gt;the projects they’ve funded over the years&lt;/a&gt; (you might see some familiar names).  The &lt;a href=&quot;https://nlnet.nl/internethardening/&quot;&gt;Internet Hardening Fund&lt;/a&gt; is managed by NLnet and funded by the Netherlands Ministry of Economic Affairs.  The funding will be used to fund 4 Namecoin developers (Jeremy Rand, Hugo Landau, Brandon Roberts, and Joseph Bisch) to produce a usable decentralized TLS public key infrastructure.&lt;/p&gt;

&lt;p&gt;Specifically, the following areas of development will be funded:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Integration with DNS functionality of major operating systems.  We intend to support GNU/Linux and Windows, including DNS integration for Tor.  Other operating system support may be developed if things go well.&lt;/li&gt;
  &lt;li&gt;Integration with TLS certificate validation functionality of major web browsers.  We intend to support Chromium, Firefox, and Tor Browser on GNU/Linux and Windows.  Other browser support may be developed if things go well.&lt;/li&gt;
  &lt;li&gt;Improvements to the lightweight SPV name lookup client.&lt;/li&gt;
  &lt;li&gt;A lightweight SPV wallet with name support.  We intend to use Electrum.&lt;/li&gt;
  &lt;li&gt;Wallet GUI improvements, including Coin Control for name transactions and a name update GUI that doesn’t require knowing JSON.&lt;/li&gt;
  &lt;li&gt;Improved installation automation.  We intend to provide a Windows installer that includes a Namecoin client, DNS integration, and TLS integration.  Other OS support may be developed if things go well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’d like to thank the awesome people at NLnet Foundation for selecting us for this opportunity, as well as the Netherlands Ministry of Economic Affairs for recognizing that a hardened Internet is worth receiving government financial support.&lt;/p&gt;

&lt;p&gt;We’ll be posting updates regularly as development proceeds.  (Spoiler alert: a few components are already nearly ready for beta releases.)&lt;/p&gt;
</description>
        <pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/05/19/funding-nlnet.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/05/19/funding-nlnet.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ICANN58 Summary</title>
        <description>&lt;p&gt;As was &lt;a href=&quot;/2017/03/03/icann-58.html&quot;&gt;announced&lt;/a&gt;, I represented Namecoin at ICANN58 in Copenhagen.  Below is a brief summary of how it went.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I presented in the Emerging Identifier Technology Panel.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.namecoin.org/files/videos/icann-58/ICANN-58-Emerging-Identifiers-Technology.webm&quot;&gt;Free-software-friendly video recording&lt;/a&gt; is hosted by Namecoin.org.&lt;/li&gt;
      &lt;li&gt;The above recording is converted from &lt;a href=&quot;https://schedule.icann.org/event/9nqD/emerging-identifiers-technology&quot;&gt;ICANN’s official Adobe Connect video recording&lt;/a&gt;.  Copyright ICANN; used with permission.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.namecoin.org/files/videos/icann-58/Namecoin-ICANN58-EIT-Final.pdf&quot;&gt;Namecoin slides&lt;/a&gt; are hosted by Namecoin.org.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I presented in the Technical Experts Group / Board Joint Meeting.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.namecoin.org/files/videos/icann-58/ICANN-58-Joint-Meeting-ICANN-Board-and-Technical-Experts-Group.webm&quot;&gt;Free-software-friendly video recording&lt;/a&gt; is hosted by Namecoin.org.&lt;/li&gt;
      &lt;li&gt;The above recording is converted from &lt;a href=&quot;https://schedule.icann.org/event/9oMt/joint-meeting-icann-board-technical-experts-group-teg&quot;&gt;ICANN’s official Adobe Connect video recording&lt;/a&gt;.  Copyright ICANN; used with permission.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.namecoin.org/files/videos/icann-58/Namecoin-ICANN58-TEG-Final.pdf&quot;&gt;Namecoin slides&lt;/a&gt; are hosted by Namecoin.org.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A significant number of people in the ICANN community are interested in Namecoin.&lt;/li&gt;
  &lt;li&gt;While I have not attended previous ICANN events and therefore cannot evaluate this myself, my understanding is that the EIT panel session had an unusually large audience.&lt;/li&gt;
  &lt;li&gt;There is skepticism in the ICANN community of Namecoin’s ability to completely replace the DNS.
    &lt;ul&gt;
      &lt;li&gt;By far the most common reason for this skepticism is the concern that Namecoin may not be able to scale to DNS’s usage levels.
        &lt;ul&gt;
          &lt;li&gt;I fully agree that this is a good reason to be skeptical and that work needs to be done in this area.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Another concern raised was Namecoin’s lack of privacy in its current form (specifically the risk of transaction graph analysis).
        &lt;ul&gt;
          &lt;li&gt;The people who raised this concern appear to be satisfied that the Namecoin developers understand that this is a problem and that we intend to fix it.  If we fail to fix it adequately, this concern is likely to become more of a big deal.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The ICANN community appears to be reasonably accepting of Namecoin’s role as an alternative to DNS; Namecoin makes different tradeoffs from DNS, is therefore likely to be optimal for a different userbase, and can co-exist with DNS in its current state.&lt;/li&gt;
  &lt;li&gt;Several people I met are interested in assisting Namecoin; we are following up with those people.&lt;/li&gt;
  &lt;li&gt;I ran out of business cards in my wallet 3 times in 3 days.  Luckily, I carry a large stash of business cards with my travel laptop, so everyone who requested my business card received it.&lt;/li&gt;
  &lt;li&gt;My wallet is currently sufficiently full of business cards from ICANN58 attendees that I’m having trouble easily fitting my credit card into my wallet.&lt;/li&gt;
  &lt;li&gt;The joint meeting of ICANN’s Security and Stability Advisory Committee (SSAC) and the ICANN board included a segment on Special-Use Names and name collisions.  For those who are unaware, this is of interest to Namecoin because it would be problematic for Namecoin if ICANN were to allow someone to purchase .bit as a standard DNS TLD.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.namecoin.org/files/videos/icann-58/ICANN-58-Joint-Meeting-ICANN-Board-and-Security-and-Stability-Advisory-Committee.webm&quot;&gt;Free-software-friendly video recording&lt;/a&gt; is hosted by Namecoin.org.&lt;/li&gt;
      &lt;li&gt;The above recording is converted from &lt;a href=&quot;https://schedule.icann.org/event/9nvu/joint-meeting-icann-board-security-stability-advisory-committee&quot;&gt;ICANN’s official Adobe Connect video recording&lt;/a&gt;.  Copyright ICANN; used with permission.&lt;/li&gt;
      &lt;li&gt;The discussion of collisions between non-DNS names (such as Namecoin, though Namecoin wasn’t explicitly mentioned) and DNS names (such as if ICANN were to issue the .bit TLD to someone) begins at timestamp 42:25.  I highly recommend watching the full segment, but some highlights include:
        &lt;ul&gt;
          &lt;li&gt;The SAC090 document &lt;a href=&quot;https://www.icann.org/en/system/files/files/sac-090-en.pdf&quot;&gt;“SSAC Advisory on the Stability of the Domain Namespace”&lt;/a&gt; was cited; most important are 3 Recommendations from SSAC (summarized by Jeremy, apologies for any errors):
            &lt;ul&gt;
              &lt;li&gt;Recognize that name collisions will always be with us, and they’re not going to go away.  There’s no way to control how people use names.&lt;/li&gt;
              &lt;li&gt;It’s important to control the things that you can control: make sure that the parts of the namespace that ICANN controls are predictable (harmonize with private-use names).  We need to allow private-use names to exist, in the spirit of innovation.&lt;/li&gt;
              &lt;li&gt;Since we recognize that we are not the only ones who have names that will look like TLD names, and the community is going to use that kind of stuff in an interesting way, we need to have procedures for dealing with other bodies who are going to be creating special-use names for their own purposes.  It is important to establish regular communication, how we each recognize each other, how we’re going to work together, and set ourselves up for potentially others (besides IETF) who may want to create lists of names.  Be prepared to deal with other groups who are going to have their own lists of names.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Steve Crocker (chair of the ICANN board) said the following:&lt;/p&gt;

            &lt;blockquote&gt;
              &lt;p&gt;The IETF has a special names list, a reserved names list, but my understanding is that that’s not a definitive list in the following sense.  It takes a while before a name gets onto that list.  So, it tends to be on the conservative side.  There are other names that are in use but have not gone through an IETF process.  From where we’re sitting over at ICANN, if we want to be conservative, we would take into account not only the names on the reserve list from the IETF but also other names where it’s evident there is usage but nobody has come along and said we’re going to – you should reserve this and reserve this and so forth.  So, I would think that our obligation is to have a somewhat wider field of view, including not only the official list but also what’s actually happening in the real world.  And I can anticipate arguments that say well, there’s no official reason to reject this name [for ICANN issuance, e.g. someone buying the .bit TLD for non-Namecoin use], therefore you must accept it.  I would say just the opposite, that we have an obligation to be careful, and if we see reasons why a name should not be allocated, then we have that authority, we have that obligation to do that and to err on the side of caution there.&lt;/p&gt;
            &lt;/blockquote&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;I consider this an extremely good sign.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In response to a question in the Public Forum 2 about whether ICANN was looking into adopting Namecoin, Steve Crocker (chair of the ICANN board) commented “These things take time.”  The full question and answer are in the &lt;a href=&quot;https://schd.ws/hosted_files/icann58copenhagen2017/60/I58CPH_Thu16Mar2017-Public%20Forum%202-en.pdf&quot;&gt;ICANN transcript&lt;/a&gt;, pages 25-28.  Steve’s comment is, in my opinion, a completely reasonable response.&lt;/li&gt;
  &lt;li&gt;We plan to continue engaging with the ICANN community.&lt;/li&gt;
  &lt;li&gt;We plan to continue engaging with IETF on Special-Use Name registration.&lt;/li&gt;
  &lt;li&gt;At this time, I have no reason to expect any hostile action by ICANN toward Namecoin.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As with other conferences, I won’t be releasing details of private conversations, because I want people to be able to talk to me at conferences without being worried that off-the-cuff comments will be publicly published.  That said, all of the private conversations I engaged in were highly encouraging.&lt;/p&gt;

&lt;p&gt;Huge thanks to David Conrad (ICANN CTO) for inviting me to attend ICANN58, and to Adiel Akplogan (ICANN VP of Technical Engagement) for inviting me to the EIT Panel.  Also thanks to ICANN for covering my travel expenses.  I hope we can do this again sometime.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/04/17/icann-58-summary.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/04/17/icann-58-summary.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>QCon London 2017 Summary</title>
        <description>&lt;p&gt;As was &lt;a href=&quot;/2017/03/03/qcon-london.html&quot;&gt;announced&lt;/a&gt;, I represented Namecoin at QCon London 2017.  Below is a brief summary of how it went.&lt;/p&gt;

&lt;p&gt;The theme of the blockchain track was “Beyond the Hype”.  As such, the presentations in the track primarily focused on all the things that can go wrong when using a blockchain.  Riccardo Spagni (AKA fluffypony of &lt;a href=&quot;https://getmonero.org/&quot;&gt;Monero&lt;/a&gt;) is definitely an ideal person to host this track.  My talk was on alternate blockchains, with a focus on Namecoin (and some Monero).  In the spirit of going “Beyond the Hype”, my talk was almost entirely about things that can go wrong when using a non-Bitcoin blockchain.&lt;/p&gt;

&lt;p&gt;I think this is a very important theme for a blockchain track, because the hype attached to the blockchain field is seriously problematic for our field’s credibility.  None of us were there to sell our technology, attract investors, or grab media attention – we were there to provide a reality check for an audience who, in large part, had minimal exposure to blockchain technology and wanted to learn more about what use cases it’s good or bad for.&lt;/p&gt;

&lt;p&gt;Lots of attendees talked with me over dinner and in the hallway, and I’ll be following up with them ASAP.  After QCon, I attended a talk Riccardo gave at Imperial College; several people there were interested in Namecoin.  I met up with Riccardo the next day to discuss lots of cool stuff involving Namecoin and Monero.&lt;/p&gt;

&lt;p&gt;As with other conferences, I won’t be releasing details of private conversations, because I want people to be able to talk to me at conferences without being worried that off-the-cuff comments will be publicly published.&lt;/p&gt;

&lt;p&gt;Huge thanks to Riccardo for inviting me, and to all the QCon conference organizers for an awesome conference (and for covering my travel expenses).  It’d be awesome if we can do this again.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://qconlondon.com/2017-session-videos&quot;&gt;A video of my talk is scheduled for release on June 26, 2017.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/04/02/qcon-london-summary.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/04/02/qcon-london-summary.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Core 0.13.99-name-tab-beta1 Ready for General Use</title>
        <description>&lt;p&gt;Namecoin Core 0.13.99-name-tab-beta1, which has been listed on our Beta Downloads page for a few months, has demonstrated itself to be stable enough that &lt;a href=&quot;/download/&quot;&gt;it is now listed on the main Downloads page&lt;/a&gt;.  Huge thanks to our Lead C++ GUI Engineer Brandon Roberts for his work on this.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/03/20/namecoin-core-0-13-99-name-tabe-beta1.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/03/20/namecoin-core-0-13-99-name-tabe-beta1.html</guid>
        
        <category>Releases</category>
        
        <category>Namecoin Core Releases</category>
        
        
      </item>
    
      <item>
        <title>Namecoin&#39;s Jeremy Rand will be a speaker at ICANN58</title>
        <description>&lt;p&gt;ICANN has invited a Namecoin developer to speak at the ICANN58 meeting on March 11-16 2017 in Copenhagen, and I’m happy to say that I’ve accepted their invitation.  Since I’m well aware that this may be surprising to some readers, I think it’s beneficial to everyone to announce it here, and give some details about why I’ll be attending.&lt;/p&gt;

&lt;p&gt;The rest of this post will be in the excellent Q&amp;amp;A-style format.&lt;/p&gt;

&lt;h2 id=&quot;why-did-icann-invite-you&quot;&gt;Why did ICANN invite you?&lt;/h2&gt;

&lt;p&gt;To my understanding, I was invited because of a perception that there was a lack of understanding and dialogue between ICANN and Namecoin about specifically what the goals of each group were.  The hope is that by encouraging discussion between ICANN and Namecoin, the groups will have a more accurate idea of what the other is doing and what common interests we might have.&lt;/p&gt;

&lt;p&gt;It’s not news to me that ICANN has an interest in Namecoin; an &lt;a href=&quot;https://www.icann.org/en/system/files/files/iti-report-15may14-en.pdf&quot;&gt;ICANN panel report&lt;/a&gt; favorably mentioned us.  However, I admit that I was (pleasantly) surprised to receive this invitation.&lt;/p&gt;

&lt;h2 id=&quot;what-do-you-think-of-icann-and-dns&quot;&gt;What do you think of ICANN and DNS?&lt;/h2&gt;

&lt;p&gt;To be totally honest, I’m not really very knowledgeable about how ICANN operates.  I hope to gain some knowledge on this subject at the meeting.  That said, I’ve heard that ICANN has some political issues.  (Indeed, if James Seng’s comments in the aforementioned report are any indication, this is a recognized issue by ICANN participants, not just from the outside.)  This is really not surprising, and as far as I know, it’s not due to any kind of nefarious motivation by ICANN or any people within ICANN.  My take is that ICANN’s political issues are likely to be simply because ICANN is very large, and large centralized entities are inevitably going to have political issues.  If, in an alternate reality, OpenNIC were wildly successful and ended up as large as ICANN is today, I predict that OpenNIC would end up with political issues too.&lt;/p&gt;

&lt;h2 id=&quot;isnt-that-just-icanns-own-fault-for-being-centralized&quot;&gt;Isn’t that just ICANN’s own fault for being centralized?&lt;/h2&gt;

&lt;p&gt;That’s not ICANN’s fault, it’s the reality of the laws of math.  When DNS and ICANN were created, everyone believed that decentralized global consensus was impossible (and this belief was well-supported by a proof by Lamport dating back to the 1970’s).  It wasn’t until Satoshi Nakamoto invented Bitcoin that anyone had any credible reason to believe that decentralized global consensus was solvable, and it wasn’t until Appamatto and Aaron Swartz proposed BitDNS and Nakanames 2 years later that anyone really seriously considered applying a Nakamoto blockchain to a DNS-like system.&lt;/p&gt;

&lt;h2 id=&quot;but-namecoin-exists-now-doesnt-that-make-dns-obsolete&quot;&gt;But Namecoin exists now; doesn’t that make DNS obsolete?&lt;/h2&gt;

&lt;p&gt;Not really.  Namecoin makes a number of design tradeoffs in order to achieve decentralization.  Compared to DNS, Namecoin has significantly worse security against run-of-the-mill malware, significantly worse privacy against your nosy friends/neighbors/employer, and significantly worse resistance to squatting and trademark infringement, to list just a few.  These are open research problems for Namecoin-like systems, whereas DNS has long ago solved them.  I work on Namecoin because Namecoin also has some advantages over DNS, and I think there is a significant user base who want those advantages enough that they are willing to cope with the downsides.  But that doesn’t mean that DNS is obsolete, or that I expect Namecoin to replace DNS anytime soon.  If, in the future, Namecoin eventually solves those open research problems, and as a result replaces DNS, that’d be cool as heck from my point of view, but if that ever happens, I think it will be far enough in the future that it’s not worth worrying about right now.&lt;/p&gt;

&lt;h2 id=&quot;namecoin-has-almost-no-funding-if-you-had-the-budget-of-the-dns-industry-wouldnt-those-open-research-problems-have-been-solved-by-now&quot;&gt;Namecoin has almost no funding; if you had the budget of the DNS industry, wouldn’t those open research problems have been solved by now?&lt;/h2&gt;

&lt;p&gt;That would be inconsistent with the definition of “open research problem”.  Funding would certainly help us spend more time tackling those problems, but there’s no guarantee that the problems are even solvable.  Also, since no one is offering to give us such a budget, there’s not really much point in speculating here.&lt;/p&gt;

&lt;h2 id=&quot;are-you-being-paid-to-attend&quot;&gt;Are you being paid to attend?&lt;/h2&gt;

&lt;p&gt;ICANN is covering my travel expenses.  (Naturally, I wasn’t going to ask NMDF to pay for me to travel.  We don’t have anywhere near enough funding for that.)  Other than that, I’m not being paid to attend.&lt;/p&gt;

&lt;h2 id=&quot;has-icann-asked-for-any-control-or-influence-on-namecoin&quot;&gt;Has ICANN asked for any control or influence on Namecoin?&lt;/h2&gt;

&lt;p&gt;Of course not.  (And if they did, I would decline – as I assume would the other devs.)  It’s entirely standard to talk to people working on related projects; it doesn’t imply any desire to influence or control those projects.&lt;/p&gt;

&lt;h2 id=&quot;are-you-concerned-that-this-will-be-spun-by-market-manipulators-as-some-kind-of-sell-out&quot;&gt;Are you concerned that this will be spun by market manipulators as some kind of sell-out?&lt;/h2&gt;

&lt;p&gt;I’m reasonably confident that market manipulators will try to profit by spinning this in some way, but that’s not anything new.  We’ve already seen market manipulators try to make money by alleging a sell-out, based on everything from our application to Google Summer of Code in 2014 and 2015, to me getting a college scholarship from Google in 2013, to our collaboration with GNUnet, I2P, and Tor to try to register the .bit TLD as a special-use name via IETF.  Those same market manipulators will, I assume, use this the same way, probably with the same minimal level of success that they had previously.&lt;/p&gt;

&lt;p&gt;If I had any interest in spending my time worrying about market manipulators, I’d be in a different line of work, making way more money than I’m making right now.  The best I can do is be transparent about this, so that it’s obvious to anyone who does an ounce of research that nothing nefarious occurred.  Transparency FTW.&lt;/p&gt;

&lt;h2 id=&quot;will-you-publicly-post-your-presentation-slides&quot;&gt;Will you publicly post your presentation slides?&lt;/h2&gt;

&lt;p&gt;Sure, why not?&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Mar 2017 01:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/03/03/icann-58.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/03/03/icann-58.html</guid>
        
        <category>News</category>
        
        
      </item>
    
  </channel>
</rss>
