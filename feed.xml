<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Namecoin</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>https://namecoin.org//</link>
    <atom:link href="https://namecoin.org//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 28 Jul 2017 06:05:33 +0000</pubDate>
    <lastBuildDate>Fri, 28 Jul 2017 06:05:33 +0000</lastBuildDate>
    <generator>Jekyll v2.2.0</generator>
    
      <item>
        <title>QCon London 2017 Video: Case Study: Alternate Blockchains</title>
        <description>&lt;p&gt;InfoQ has posted &lt;a href=&quot;https://www.infoq.com/presentations/namecoin-monero&quot;&gt;the recording of my talk, Case Study: Alternate Blockchains&lt;/a&gt; at QCon London 2017.&lt;/p&gt;

&lt;p&gt;The videos on the InfoQ website do not appear to work when Javascript is disabled.  Security-conscious users who prefer not to enable Javascript can view the video via &lt;a href=&quot;https://rg3.github.io/youtube-dl/&quot;&gt;youtube-dl&lt;/a&gt; (&lt;a href=&quot;https://packages.debian.org/stretch/youtube-dl&quot;&gt;Debian package&lt;/a&gt;) (&lt;a href=&quot;https://forums.whonix.org/t/vlc-apparmor-profile-wip-streaming-documentation-for-whonix-install-youtube-dl-by-default/2918&quot;&gt;recommendation by Whonix&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/resources/presentations/QCon_London_2017/Namecoin_QCon_London_2017.pdf&quot;&gt;My slides are available here.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Jul 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/07/28/qcon-london-case-study-video.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/07/28/qcon-london-case-study-video.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>LibreTorNS Merged to Upstream TorNS</title>
        <description>&lt;p&gt;Generally I’m of the opinion that it’s better to get patches to other people’s projects merged upstream whenever feasible; accordingly I submitted the LibreTorNS patches upstream.  Happily, meejah has merged the LibreTorNS patches to &lt;a href=&quot;https://github.com/meejah/torns&quot;&gt;upstream TorNS&lt;/a&gt;.  That means LibreTorNS is now obsolete, and you should use meejah’s upstream TorNS for testing dns-prop279 going forward.&lt;/p&gt;

&lt;p&gt;Huge thanks to meejah for accepting the patch!  Also thanks to meejah for the code review – there was a bug hiding in my initial submitted patch, which is one of the reasons I always prefer getting things reviewed by upstream.&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Jul 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/07/07/libretorns-merged-upstream.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/07/07/libretorns-merged-upstream.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin&#39;s Jeremy Rand will be a speaker at GCER 2017</title>
        <description>&lt;p&gt;I will be speaking at the &lt;a href=&quot;https://new.gcer.net/&quot;&gt;2017 Global Conference on Educational Robotics&lt;/a&gt; (July 8-12, 2017).  For those of you unfamiliar with GCER, the audience is mostly a mix of middle school students, high school students, college students, and educators, most of whom are participating in the robotics competitions hosted at GCER (primarily Botball).  I competed in Botball (and the other 2 GCER competitions: KIPR Open and KIPR Aerial) between 2003 and 2015, and that experience (particularly the hacking aspect, which is actively encouraged in all three competitions) was a major factor in why I’m a Namecoin developer.  My talk is an outreach effort, which I hope will result in increased interest in the Botball scene in the areas of privacy, security, and human rights.  My talk (scheduled for July 10) is entitled “Making HTTPS and Anonymity Networks Slightly More Secure (Or: How I’m Using My Botball Skill Set in the Privacy/Security Field)”.&lt;/p&gt;

&lt;p&gt;Huge thanks to KISS Institute for Practical Robotics (which organizes GCER) for suggesting that I give this talk.  Looking forward to it!&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/07/06/gcer-2017.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/07/06/gcer-2017.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>QCon London 2017 Video: Practical Cryptography &amp; Blockchain Panel</title>
        <description>&lt;p&gt;InfoQ has posted &lt;a href=&quot;https://www.infoq.com/presentations/cryptography-blockchain&quot;&gt;the recording of the Practical Cryptography &amp;amp; Blockchain Panel&lt;/a&gt; at QCon London 2017.  The panelists (from left to right) were Elaine Ou, me (Jeremy Rand), David Vorick, Paul Sztorc, and Peter Todd.  Riccardo Spagni (on the right) moderated the panel.&lt;/p&gt;

&lt;p&gt;The videos on the InfoQ website do not appear to work when Javascript is disabled.  Security-conscious users who prefer not to enable Javascript can view the video via &lt;a href=&quot;https://rg3.github.io/youtube-dl/&quot;&gt;youtube-dl&lt;/a&gt; (&lt;a href=&quot;https://packages.debian.org/stretch/youtube-dl&quot;&gt;Debian package&lt;/a&gt;) (&lt;a href=&quot;https://forums.whonix.org/t/vlc-apparmor-profile-wip-streaming-documentation-for-whonix-install-youtube-dl-by-default/2918&quot;&gt;recommendation by Whonix&lt;/a&gt;).&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Jul 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/07/05/qcon-london-panel-video.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/07/05/qcon-london-panel-video.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Resolution for Tor Released</title>
        <description>&lt;p&gt;The &lt;a href=&quot;/2017/06/21/tor-prop279.html&quot;&gt;aforementioned licensing issues with TorNS&lt;/a&gt; have been dealt with, and I’ve released the DNS provider for Tor’s Prop279 Pluggable Naming API.  This allows Namecoin resolution in Tor.&lt;/p&gt;

&lt;p&gt;One issue I encountered is that TorNS currently implements a rather unfortunate restriction that input and output domain names must be in the &lt;code&gt;.onion&lt;/code&gt; TLD.  I’ve created a fork of TorNS (which I call &lt;a href=&quot;https://github.com/namecoin/LibreTorNS&quot;&gt;LibreTorNS&lt;/a&gt;) which removes this restriction.  LibreTorNS is currently required for Namecoin usage.&lt;/p&gt;

&lt;p&gt;The code is available from the &lt;a href=&quot;/download/betas/&quot;&gt;Beta Downloads page&lt;/a&gt;.  Please let me know what works and what doesn’t.  And remember, using Namecoin naming with Tor will make you heavily stand out, so don’t use this in any scenario where you need anonymity.  (Also please refer to the extensive additional scary warnings in the readme if you’re under the mistaken impression that using this in production is a good idea.)&lt;/p&gt;

&lt;p&gt;This development was funded by NLnet.&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/06/22/tor-prop279-release.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/06/22/tor-prop279-release.html</guid>
        
        <category>Releases</category>
        
        <category>Prop279 Releases</category>
        
        
      </item>
    
      <item>
        <title>Namecoin Resolution for Tor (DNS Provider for Tor Prop279 Pluggable Naming API)</title>
        <description>&lt;p&gt;A while back, I &lt;a href=&quot;https://lists.torproject.org/pipermail/tor-dev/2017-April/012222.html&quot;&gt;released on the tor-dev mailing list&lt;/a&gt; a tool for using Namecoin naming with Tor.  It worked, but it was clearly a proof of concept.  For example, it didn’t implement most of the Namecoin domain names spec, it didn’t work with the libdohj client, and it used the Tor controller API.  I’ve now coded a new tool that fixes these issues.&lt;/p&gt;

&lt;p&gt;Fixing the spec compliance and libdohj compatibility was implemented by using ncdns as a backend instead of directly talking to Namecoin Core.  Interestingly, I decided not to do anything Namecoin-specific with this tool.  It simply uses the DNS protocol to talk to ncdns, or any other DNS server you provide.  (So yes, that means that you could, in theory, use the DNS instead of Namecoin, without modifying this tool at all.)&lt;/p&gt;

&lt;p&gt;In order to work with the DNS protocol, some changes were made to how &lt;code&gt;.onion&lt;/code&gt; domains are stored in Namecoin.  The existing convention is to use the &lt;code&gt;tor&lt;/code&gt; field of a domain, which has no DNS mapping.  Instead, I’m using the &lt;code&gt;txt&lt;/code&gt; field of the &lt;code&gt;_tor&lt;/code&gt; subdomain of a domain.  This is consistent with existing practice in the DNS world.&lt;/p&gt;

&lt;p&gt;This tool is using Tor’s Prop279 Pluggable Naming protocol rather than the Tor controller API.  Right now &lt;code&gt;tor&lt;/code&gt; (little-t) doesn’t implement Prop279.  To experiment with Prop279, &lt;a href=&quot;https://github.com/meejah/torns&quot;&gt;TorNS&lt;/a&gt; is a useful way of simulating Prop279 support using the control port as a backend.  Unfortunately, TorNS’s license is unclear at the moment.  I’m in the process of checking with meejah (author of TorNS) to see if TorNS can be released under a free software license.  Until that minor bit of legalese is taken care of, the release of Namecoin resolution for Tor is on hold.&lt;/p&gt;

&lt;p&gt;This development was funded by NLnet.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/06/21/tor-prop279.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/06/21/tor-prop279.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Automated Nothing-Up-My-Sleeve HPKP Insertion for Chromium</title>
        <description>&lt;p&gt;As I mentioned in &lt;a href=&quot;/2017/06/15/how-were-doing-tls-for-chromium.html&quot;&gt;my previous post&lt;/a&gt;, we protect from compromised CA’s by using a nothing-up-my-sleeve (NUMS) HPKP pin in Chromium.  Previously, it was necessary for the user to add this pin themselves in the Chromium UI.  This was really sketchy from both a security and UX point of view.  I have now submitted a PR to ncdns that will automatically add the necessary pin.&lt;/p&gt;

&lt;p&gt;This is implemented as a standalone program that is intended to be run at install.  It works by parsing Chromium’s &lt;code&gt;TransportSecurity&lt;/code&gt; storage file (which is just JSON), adding an entry for &lt;code&gt;bit&lt;/code&gt; that contains the NUMS key pin, and then saving the result as JSON back to &lt;code&gt;TransportSecurity&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I expect this to work for most browsers based on Chromium (e.g. Chrome and Opera), on most OS’s (e.g. GNU/Linux, Windows, and macOS), but so far I’ve only tested with Chrome on Windows.  I don’t expect it to work with Electron-based applications such as Riot and Brave; Electron doesn’t seem to follow the standard Chromium conventions on HPKP.  I haven’t yet examined Electron to see if there’s a way we can get it to work.&lt;/p&gt;

&lt;p&gt;This isn’t yet integrated with the NSIS installer; I’ll be asking Hugo to take a look at doing the integration there.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/06/20/automated-nums-hpkp.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/06/20/automated-nums-hpkp.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>Progress on Electrum-NMC</title>
        <description>&lt;p&gt;Work on the electrum port for Namecoin has been moving along nicely. It was decided that we will use the electrum-client from spesmilo, along with the electrumX server. ElectrumX was chosen due to the original electrum-server being discontinued a few months ago. 
So far the electrum client has been ported over for compatability with electrumX. This includes the re-branding, blockchain parameters and other electrum related settings for blockchain verification&lt;/p&gt;

&lt;p&gt;On the roadmap now are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Extend electrumX NMC Support to allow for full veritification of AuxPow&lt;/li&gt;
  &lt;li&gt;Modify new electrum client to verify the new AuxPow&lt;/li&gt;
  &lt;li&gt;Add Name handling support to electrum&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These repo’s are for testing purposes only. Do not use these unless your willing to risk losing funds. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Multicoin-co/electrum-nmc&quot;&gt;Client&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;https://github.com/Multicoin-co/electrum-nmc-server&quot;&gt;Server/ Not uploaded yet&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/06/17/progress-electrum-nmc.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/06/17/progress-electrum-nmc.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>How we&#39;re doing TLS for Chromium</title>
        <description>&lt;p&gt;Back in the “bad old days” of Namecoin TLS (circa 2013), we used the Convergence codebase by Moxie Marlinspike to integrate with TLS implementations.  However, we weren’t happy with that approach, and have abandoned it in favor of a new approach: dehydrated certificates.&lt;/p&gt;

&lt;p&gt;What’s wrong with Convergence?  Convergence uses a TLS intercepting proxy to replace the TLS implementation used by web browsers.  Unfortunately, TLS is a really difficult and complex protocol to implement, and the nature of intercepting proxies means that if the proxy makes a mistake, the web browser won’t protect you.  It’s fairly commonplace these days to read news about a widely deployed TLS intercepting proxy that broke things horribly.  Lenovo’s SuperFish is a well-known example of a TLS intercepting proxy that made its users less safe.&lt;/p&gt;

&lt;p&gt;Convergence was in a somewhat special situation, though: it reused a lot of code that was distributed with Firefox (via the js-ctypes API), which reduced the risk that it would do something horribly dangerous with TLS.  It was also originally written by Moxie Marlinspike (well-known for Signal), which additionally reduced the risk of problems.  Unfortunately, Mozilla stopped shipping the relevant code with Firefox, Moxie stopped maintaining Convergence, and Mozilla decided to deprecate additional functionality that was used by Convergence.  This made it clear that the Convergence codebase wasn’t going to be viable, and that if we wanted to use an intercepting proxy, we’d be using a codebase that was substantially less reliable than Convergence.&lt;/p&gt;

&lt;p&gt;So, we went back to the drawing board, and came up with a new solution.&lt;/p&gt;

&lt;p&gt;As a first iteration, TLS implementations have a root CA trust store, and injecting a self-signed end-entity x509 certificate into the root CA trust store will allow that certificate to be trusted for use by a website.  (For an explanation of how this can be done with Windows CryptoAPI, see my previous post, &lt;a href=&quot;/2017/05/27/reverse-engineering-cryptoapi-cert-blobs.html&quot;&gt;Reverse-Engineering CryptoAPI’s Certificate Registry Blobs&lt;/a&gt;).  We can do this right before the TLS connection is opened by hooking the DNS request for the &lt;code&gt;.bit&lt;/code&gt; domain (this is easy since we control the ncdns codebase that processes the DNS request).&lt;/p&gt;

&lt;p&gt;However, there are three major issues with this approach:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An x509 certificate is very large, and storing this in the blockchain would be too expensive.  Using a fingerprint would be much smaller, but we can’t recover the full certificate from just the fingerprint.&lt;/li&gt;
  &lt;li&gt;x509 certificates might be valid for a different purpose than advertised.  For example, if we injected a certificate that has the CA bit enabled, the owner of that certificate would be able to impersonate arbitrary websites if they can get you to first visit their malicious &lt;code&gt;.bit&lt;/code&gt; domain.  x509 is a complex specification, and we don’t want to try to detect every possible type of mischief that can be done with them.&lt;/li&gt;
  &lt;li&gt;Injecting a certficate doesn’t prevent a malicious CA that is trusted for DNS names from issuing fraudulent certificates for &lt;code&gt;.bit&lt;/code&gt; domain names.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Problems 1 and 2 can be solved at the same time.  First, we use ECDSA certificates instead of the typical RSA.  ECDSA is supported by all recent TLS implementations, but RSA is largely dominant because of inertia and the prevalence of outdated software.  By excluding the old software that relies on RSA, we get much smaller keys and signatures.  (Old software isn’t usable with this scheme anyway, because of our solution to Problem 3.)&lt;/p&gt;

&lt;p&gt;Next, instead of having domain owners put the entire ECDSA x509 certificate in the blockchain, the domain owner extracts only 4 components of the certificate: the public key, the start and end timestamps for the valdity period, and the signature.  As long as the rest of the certificate conforms to a fixed template, those 4 components (which we call a &lt;em&gt;dehydrated certificate&lt;/em&gt;) can be combined with a domain name and the template, and &lt;em&gt;rehydrated&lt;/em&gt; into a fully valid x509 certificate that can be injected into the trust store.  This technique was invented by Namecoin’s Lead Security Engineer, Ryan Castellucci.&lt;/p&gt;

&lt;p&gt;It should be noted that a dehydrated certificate can’t do any mischief such as being valid for unexpected uses; all of the potentially dangerous fields are provided by the template, which is part of ncdns.  The dehydrated data is also quite small: circa 252 bytes (we can probably shrink it further in the future).  Implementing this in ncdns was a little bit tricky, because the Go standard library’s x509 functions that are needed to perform the signature splicing are private.  I ended up forking the Go x509 package, and adding a public function that exposes the needed functionality.  (Before you freak out about me forking the x509 package, my package consists of a single file that contains the additional function, and a Bash script that copies the official x509 library into my fork.  It’s reasonably self-contained and shouldn’t run into the issues that more invasive forks encounter regularly.)&lt;/p&gt;

&lt;p&gt;So what about Problem 3?  Well, for this, I ~~abuse~~ &lt;em&gt;take advantage of&lt;/em&gt; an interesting quirk in browser implementations of HPKP (HTTPS Public Key Pinning).  Browsers only enforce key pins against certificates for built-in certificate authorities; user-specified certificate authorities are exempt from HPKP.  This behavior is presumably to make it easier for users to intentionally intercept their own traffic (or for corporations to intercept traffic in their network, which is a less ethical version of a technologically identical concept).  As such, I believe that this behavior will not go away anytime soon, and is safe to rely on.  The user places a key pin at the &lt;code&gt;bit&lt;/code&gt; domain, with subdomains enabled, for a “nothing up my sleeve” public key hash.  As a result, no public CA can sign certificates for any domain ending in &lt;code&gt;.bit&lt;/code&gt;, but user-specified CA’s can.  Windows CryptoAPI treats user-specified end-entity certificates as user-specified CA’s for this purpose.  As such, rehydrated certificates that ncdns generates will be considered valid, but nothing else will.  (Unless you installed another user-specified CA on your machine that is valid for &lt;code&gt;.bit&lt;/code&gt;.  But if you did that, then either you want to intercept &lt;code&gt;.bit&lt;/code&gt;, in which case it’s fine, or you did it against your will, in which case you are already screwed.)&lt;/p&gt;

&lt;p&gt;I’ve implemented dehydrated certificate injection as part of ncdns for 2 major TLS implementations: CryptoAPI (used by Chromium on Windows) and NSS (used by Chromium on GNU/Linux).  These are currently undergoing review as pull requests for ncdns.  (The macOS trust store should also be feasible, but I haven’t done anything with it yet.)  Right now, those pull requests prompt the user during ncdns installation with instructions for adding an HPKP pin to Chromium.  (If you’ve tried out the ncdns for Windows installer on a machine that has Chromium, you might have noticed this dialog.)  This isn’t great UX, and I’ve found a way to do this automatically without user involvement, which I will be implementing into the ncdns installer soon.&lt;/p&gt;

&lt;p&gt;Unfortunately, abusing HPKP in this way isn’t an option in Firefox, because Mozilla’s implementation of HPKP doesn’t permit key pins to be placed on TLD’s.  (As far as I can tell, the specifications seem to be ambiguous on this point.)  Mozilla &lt;em&gt;does&lt;/em&gt; offer an XPCOM API for HPKP (specifically, nsISiteSecurityService) that can inject key pins for individual &lt;code&gt;.bit&lt;/code&gt; domains on the fly, but since XPCOM is deprecated by Mozilla, this is not a viable option as-is.  On the bright side, Mozilla seems interested in implementing the API’s we need to do this in a less hacky way, so I’ll be engaging with Mozilla on this.&lt;/p&gt;

&lt;p&gt;As another note: NSS trust store injection is rather slow right now, because I’m currently using NSS’s &lt;code&gt;certutil&lt;/code&gt; to do the injection, and &lt;code&gt;certutil&lt;/code&gt; isn’t properly optimized for speed.  Sadly, there doesn’t seem to be an easy way of bypassing &lt;code&gt;certutil&lt;/code&gt; for NSS like there is for CryptoAPI (NSS’s trust store is a sqlite database with a significantly more complex structure than CryptoAPI, and the CryptoAPI trick of leaving out all the data besides the certificate doesn’t work for NSS).  I will probably be filing at least one bug report with NSS about &lt;code&gt;certutil&lt;/code&gt;’s performance issues.  If progress on fixing those issues appears to be unlikely, I think it may be feasible to do some witchcraft to speed it up a lot, but I’m hoping that things won’t come to that.&lt;/p&gt;

&lt;p&gt;I’m hoping to get at least the CryptoAPI PR merged to official ncdns very soon, at which point I’ll ask Hugo to release a new ncdns for Windows installer so everyone can have fun testing.&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/06/15/how-were-doing-tls-for-chromium.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/06/15/how-were-doing-tls-for-chromium.html</guid>
        
        <category>News</category>
        
        
      </item>
    
      <item>
        <title>ncdns for Windows Beta Installer Now Available</title>
        <description>&lt;p&gt;In order to facilitate the easy resolution of &lt;code&gt;.bit&lt;/code&gt; domains, an installer for
ncdns for Windows has been under development. This installer automatically
installs and configures Namecoin Core, Unbound and ncdns.&lt;/p&gt;

&lt;p&gt;An experimental binary release for this installer is now available. Interested
Namecoin users are encouraged to test the installer and report any issues they
encounter.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/files/ncdns-2017-05-25-notreproduced/ncdns-install-2017-05-25-notreproduced.exe&quot;&gt;ncdns-install.exe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/files/ncdns-2017-05-25-notreproduced/ncdns-install-2017-05-25-notreproduced.exe.sig&quot;&gt;ncdns-install.exe.sig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This release does not yet integrate the TLS integration support for ncdns under
development by Jeremy Rand. This will be incorporated in a future release.&lt;/p&gt;

&lt;p&gt;The development of this installer was funded by NLnet.&lt;/p&gt;
</description>
        <pubDate>Tue, 30 May 2017 00:00:00 +0000</pubDate>
        <link>https://namecoin.org//2017/05/30/ncdns.html</link>
        <guid isPermaLink="true">https://namecoin.org//2017/05/30/ncdns.html</guid>
        
        <category>Releases</category>
        
        <category>ncdns Releases</category>
        
        
      </item>
    
  </channel>
</rss>
